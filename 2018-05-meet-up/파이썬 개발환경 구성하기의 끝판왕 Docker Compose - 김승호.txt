안녕하세요?

저는 약간 도발적인 제목을 잡아서 파이썬 개발환경 구성하기의 끝판왕 Docker Compose 라는 주제를 발표하게 된 김승호입니다.

발표를 제출해 놓고 보니까 너무 도발적이고 끝판왕 아닌데 라는 반론이 있을 수 있어서 제 생각에는 거의 끝판왕이라고 해서 ‘거의’를 추가했고요.

저는 raccony’s cave라는 블로그를 운영하고 있고, 아주 가끔 글을 쓰고 트위터는 @racconyy, ‘y’를 하나 더 붙여서 쓰고 있고요.

2018년에 장고 컨퍼런스 준비하는 모임이 있는데 그 모임에 소속 되어 있고, Write The Docs 라는 곳에서 Seoul meetup을 참석하고 있고요.

미디어 스트리밍 회사에서 백엔드 개발자로 일을 하고 있습니다.

먼저 왜 이 발표를 하게 됐는지 배경 설명을 잠깐 말씀드릴게요.

우리가 파이썬 개발환경을 구성해 본다고 할 때 보통 이런 과정들을 겪습니다.

우리가 파이썬 초급자라면, “파이썬 어떻게 깔아요?”  파이썬부터 깔아야 되겠죠.

그리고 파이썬이 깔려있다고 한다면 ‘easy_install’도 있고 ‘pip install’도 있고 ‘setup.py install’도 있는데 “어떤 걸 써야 되나요?” 이런 혼란스러운 상황에 처하게 됩니다.

그러면 이제 이런 도구들을 만나게 되죠.

pip로 해서 하다가 잘 안되기도 하고 쓰면 안 되는 명령어지만 ‘(sudo pip)’를 쓰기도 하고 virtualenv를 깔아야된다고 해서 쓰기도 하고 명령어가 복잡하니까 virtualenv wrapper를 또 깔아서 쓰고 pyenv를 통해서 파이썬버전도 여러 가지 깔게 되고요.

pipenv가 새로 나왔다던데 이걸 한번 써볼까 이런 여러 가지 상황에 초보자들은 처하게 되죠.

 

중급자, 경험이 있는 분들은 그런 모습을 옆에서 보면서 씩 웃으면서 이거 하나면 된다고 POP install 하게 되면 개발환경을 설정할 수 있다고 알고 있습니다.

그런데 잘 되나요? 이게 잘 안 돼서 제가 이런 발표를 준비하게 됐는데요.

보안 관련 패키지 설치할 때 보통 이런 오류를 겪게 됩니다.

뭔가 에러가 났고 내가 설치하고 싶은 패키지가 설치되지 않는다는 것만 알고 계시면 되고요.

굉장히 쉽지 않은 과정들입니다.

해결책을 물어보면, 인터넷에 찾아보면 이렇게 환경 변수를 넣어줘서 환경들을 수정해 주라는 이야기도 있고요.

따라하시면 안 됩니다.

DB 관련해서는 server package가 없으니까 brew install을 사용하거나 가이드를 해 주고는 하죠.

설치를 다 했는데요.

package사용하려고 하다 보면 이런 문제를 만나기도 합니다.

뭐가 없다 이런 문제들을 수도 없이 겪다 보면 힘들어지죠.

가장 큰 문제는 이런 문제들을 배포할 때 한 번 더 겪어야 됩니다.

그런데 배포하는 환경은 Linux니까 우연히 개발하는 환경이 배포하는 환경과 같다면 상관이 없겠지만 같지 않은 경우도 있으니까요.

그리고 환경이 어떤지에 따라서 package 이름이 다르죠.

이것도 찾아서 앞서 겪었던 문제들을 다 해결 해야 합니다.

그리고 가장 고역이죠.

Windows 환경에서 개발한다면 이 모든 과정을 한 번 더 해야 하는 어려움이 있습니다.

이렇다 보니까 OS를 업데이트하기 불안해요.

꼬일 것 같고 잘 안 될 것 같고 하루 날리는 것 아닌가 이런 문제들이 있고요.

배포할 때도 불안합니다.

왜냐하면 배포 서버, 배포 했는데 서버 업데이트 했는데 뭔가 꼬여서, 뭔가 오류가 나서 잘 돌아가던 서버가 죽고 그러면 따가운 눈총들이 기다리고 있는 거죠.

우리가 왜 이런 걸 경험하냐 하면 의존하는 패키지가 늘어나게 되면 문제가 발생할 지점이 많아진다 는 의미이기 때문입니다.

그리고 한참 나는 개발을 하고 있는데 새로 개발자가 들어오면 이거 처음에 어떻게 세팅하냐는 질문 을 하죠.

그런데 나도 몰라요.

체계적으로 정리한 문서가 없기 때문입니다.

대부분은 정리 안 하고 그 때그때 문제 해결하고 넘어가니까요.

그래서 이런 이야기를 하면 해결해 준다는 이야기를 하기도 하죠.

가장 오래된 질문입니다.

5년 1달 전에 물어본 질문이 있고요.

이렇게 5년 1개월 전의 글부터 시작해서 구글에서 검색을 해 보면 16만 9,000개 검색결과가 나오죠.

이 결과들을 다 하나씩 뒤져야 됩니다.

물론 검색어를 잘 넣으면 많이 줄어들기는 하겠지만요.

이거 언제언제, 매일매일, 또 새로 들어온 사람들이 이 과정을 겪어야 한다는 거죠.

그래서 제가 지금부터 이야기를 드리려고 합니다.

Docker Compose라는 것은 Docker라는 건 다양한 프 로그램, 혹은 실행환경, 여기에서는 파이썬 개발자가 많이 계실 테니까 보통 웹서버가 되겠죠.

이 정의를 모르고 넘어가셔도 상관 없습니다.

우리가에 제가 지금부터 명령어를 통해서 어떤 역할을 하는지 보여드릴게요.

container는 다 아시죠? 이 container가 도입되기 전에는 부두 노동자들이 배에 규격화 되지 않은 짐을 하나씩 다 올렸다고 합 니다.

이삿짐을 보면 알지만 차곡차곡을 쌓아도 많이 넣기 힘들게 되는 거죠.

그런데 container가 개발되고 나서는 container 단위로 움직이면 되니까 관리하기가 편해진 거죠.

 일례로 물건을 수출할 때 1,000개를 보낸다고 하면 예전에는 부두노동자들이 1,000개를 세고 내릴 때 1,000개 세고 이렇게 갯수로 확인해야 하는데 container에 넣고 사인하고 걸어잠그면 내릴 때는 표 만 보면 되는 거죠.

이렇게 container를 도입해서 부두 노동자들이 편해진 것처럼 서버에도 이런 일들 이 벌어졌습니다.

Docker Compose를 사용하면 서버를 규격화 해서 배포하고 사용할 수도 있는 거죠.

갤용 컴퓨터에서 파이썬 새 버전을 사용할 때 그렇게 쓰기도 하고 Windows 같은 경우는 바이너리를 다운받아서 설치하고 이런 과정을 겪는데요.

Docker를 사용하면 한 줄이면 됩니다.

파이썬 해서 python 3.7, beta 4 version이 나왔대.

그러면 이미지 뒤에 python 3.7 V4 이렇게 나중에 찾는 법을 알려드리고요.

Image 이름을 적으면 쭉 하고 나서 맨 밑에 보시면 베타 4버전이 실행이 된 거예요.

내가 설치하고 설치 하다가 문제를 겪고 그랬는데 이렇게 쉽게 됩니다.

장고랑 postgreSQL 개발을 할 때도 비슷한데요.

제가 내용을 보여드릴게요.

이건 녹화를 한 거라서 자동으로 진행이 되는데 인스톨도 되고 DB 설정된 화면도 나오고 개발 서버 가 그냥 떴어요.

이렇게 쉽게 됩니다.

뭐가 쉬운지 잘 모르시겠죠? 잠깐 뭐가 지나간 것 같은데 이거에 대해서 설명을 드릴게요.

Docker의 실행과정을 보면 간단합니다.

Docker1이라는 명령어를 통해서 뒤에 붙어있는 무언가를 실행하는데요.

파이썬 이미지의 버전 3, 지금은 3의 정식 버전 중에 가장 마지막 버전이 3.6.5이기 때문에 저렇게 실 행을 하시면 python 3.6.5가 실행이 됩니다.

그래서 인터프리터가 쭉 나오죠.

실행 중인 python3의 로그를 살펴보면 Docker에서 PS 명령어를 사용하면 되고, 그다음에 PS 명령어 를 사용해서 container 아이디라는 값이 있는데요.

Docker logs에 집어넣으면 앞에 넣은 명령어 기록 들이 나오는 거죠.

서버에서 로그를 살펴볼 일이 많으니까 이런 식으로 볼 수 있습니다.

이미 돌고 있는 서버가 있는데, Docker 서버가 있는데 그 서버에 접속하고 싶으면 이렇게 하시면 됩 니다.

잘 이해가 안 되더라도 일단 넘어가 볼게요.

Docker 이미지와 container의 이야기를 하고 있는데 이 둘이 어떤 관계냐? Docker 런는 -ti 3이라고 하면 Docker 이미지를 이야기합니다.

부둣가에 container들이 있다고 했는데 그 container 상자들을 의미한다고 생각하시면 돼요.

그리고 우리가 container 상자에 어떤 물건을 담고 문을 잠가서 배에 실어 보내잖아요.

배에 실은 컨테 이너를 여기에서도 container라고 부르는데 우리 말로 하면 python3을 실행하면 실행된 container가 있을 거잖아요.

그 container가 복잡한 값을 가진 container입니다.

이건 약간 우리가 클래스와 인스턴스의 관계와 비슷하다고 보시면 돼요.

그래서 이미지는 클래스고요.

인스턴스는 Docker container가 되는 셈입니다.

container를 만들 때 container 안에서 실행될 명령어를 지정할 수 있습니다.

위에 보시면 이미지 이름만 적어줬는데 기본적으로 입력된 명령어가 설정되는데요.

대시 쉐리 저렇 게 보이죠.

또 container 만들 때 환경변수를 넣을 수도 있습니다.

우리가 클래스에 특정 변수를 집어넣듯이 저런 식으로 -, -env 해서 나중에 들어가서 보면 파이썬 세미나라는 변수가 지정돼 있는 걸 볼 수 있죠.

또 특정 디렉터리를 연결할 수도 있습니다.

 현재 제 컴퓨터에서 장고 샘플이라고 보면 4개의 파일이 보이는데 Docker 런 해서 --볼륨 pwd는 현 재 디렉터리를 말하는 거고요.

대시로 해서 대시 명령어를 쳐서 들어가잖아요.

그렇게 해 보면 똑같은 파일이 보이는 것을 확인할 수 있습니다.

그런데 지금 뭐하는 건지 잘 모르겠죠? 갑자기 주제가 산으로 가는 것 같고 왜 이걸 알아야 되는지 모르겠습니다.

우리가 처음으로 돌아가서 웹 서버 실행에 필요한 게 뭔지 볼게요.

서버가 필요하고요.

그리고 실행 될 코드가 필요하고 실행될 명령어들이 필요하고, 어떤 환경변수에서 작성할지 환경변수를 작성해야 합니다.

그런데 Docker에서 제공하는 기능이 이 네 가지를 다 제공하고 있는 거죠.

서버가 되겠고요.

--볼륨을 해서 특정 디렉터리를 줄 수 있고요.

배시를 넣었던 것처럼 파이썬이 장고 라고 하면 이런 식으로 명령어 지정을 할 수도 있고 환경변수도 --env 옵션을 통해서 넣을 수 있는 거죠.

그러면 이제 파이썬 이미지로 장고 서버 쉽게 띄울 수 있는 건가 하면 아직은 안 안 됩니다.

몇 가지가 더 필요한데 이 두 가지도 생각해야 됩니다.

어딘가 내가 무슨 컴퓨터를 조립해서 사용하는 서버도 그렇고 컴퓨터 켜면 다 되는 게 아니잖아요.

다른 패키지도 설치하는 것처럼 서버 환경을 구성하는 방법이 있어야 되고, 그다음에 의존 패키지를 설치하는 과정이 필요합니다.

그래서 이런 과정들을 Docker에서 Dockerfile이라는 애로 제공을 하고 있어요.

python3의 서버에서 실행을 한다는 의미입니다.

그다음에 애드는 아까 보신 볼륨과 똑같아요..장고샘플, 현재 디렉토리를 container의 루트 앱 디렉토 리에 넣겠다는 의미가 되고요.

그래서 이 Docker 파일을 가지고 나만의 서버를 만드는 거예요.

이거는 제가 미리 올려놨던 그런 주소인데 저기에 방금 보여드린 Docker 파일이 있습니다.

저기에 현 재 디렉터리에 앞에서 보여드린 파일이 있다고 보시면 돼요.

마지막 문장을 보시면 되는데 아까 Docker  파일을 기반으로 나만의 서버 이미지를 새로 만드는 거죠.

그 이름을 지정해 준 겁니다.

그리고 실행은 이렇게 하면 됩니다.

하나도 안 간단해 보인다고 하시는데 설명을 해 드릴게요.

마지막 줄을 보시면 Django 2.0, 2.0.3 서버에 접속을 하실 수 있게 됩니다.

여기 보시면 신기한 옵션들이 많이 눈에 띄는데 이것부터 하나씩 설명을 해 드릴게요.

젤 위에 거는 데이터베이스 서버를 띄운 거예요.

저건 공식적으로 제공하는 이미지입니다.

그래서 서버를 띄우고 저는 밑에서 제가 아까 만들었던 마이Django 서버를 띄우고 그러면 두 container 가 연결되면서 웹 서버가 뜨는 건데요.

제일 위에 보시면 --env가 환경변수를 넣은 거고, 네임은 container의 이름을 지정해 준 거예요.

그리고 밑에 보시면 못 보던 애 중에는 --링크가 있는데요.

이거는 여기서 만든 DB라는 container에 연결을 하는데 이 container 안에서는 접속할 때 포스트그래스라는 이름으로 들어가겠다.

DB 컨테이 너를 포스트그레스라는 이름으로 접근하겠다는 겁니다.

그래서 여기에서 8000번 포트를 내가 접속을 했을 때 이 container에 바로 들어갈 수 있게 되는 거죠.

나머지는 아까 보신 환경변수 선언해 주는 부분밖에 없습니다.

방금 소개해 드린 내용이고요.

이렇게 서버를 실행을 하면 문제가 생기는데요.

앞에서 포스트그레스 서버를 띄웠잖아요.

그 container를 끄면 그 안에 쌓인 데이터가 다 날아가요.

개발 서버 띄우고 컴퓨터 껐다가 다시 켜면 내가 개발 서버에 열심히 넣은 데이터가 사라지는 거죠.

 이런 문제를 어떻게 해결할 수 있을까 보시면 볼륨이라고 로컬에 있는 특정 디렉터리를 container의 디렉터리와 연결해 주는 기능이 있다고 했는데요.

데이터라는 것을 만들어주고 밑에 보시면 볼륨이라고 해서 데이터 디렉터리를 container에 있는 데이 터가 쌓인 container와는 연결을 해 주면 내 로컬 디렉터리에 저장이 됩니다.

그러면 새로 container를 띄우더라도 계속 내용을 볼 수 있는 거죠.

아까처럼 서버를 띄우면 소스를 고쳤을 때 장고 서버가 새로 실행되지 않아요.

왜 그러냐 하면 그 역시 container에 있는 소스는 내가 아까 직접 집어넣은 소스고, 그 소스가 바뀌지 않는 거죠.

그래서 그 소스를 바꾸려면 여기 볼륨 옵션을 또 추가를 해서 내 로컬에 있는 디렉터리를 container 안에 넣어주는 방법도 필요합니다.

그런데 저는 개발 서버 하나 띄우고 싶은데 뭐 이렇게 복잡하고 아까 설치가 어렵다고 했는데 차라리 설치가 어려운 게 낫다고 이야기할 수도 있는데 거의 다 왔습니다.

조금 더 보시면 됩니다.

그래서 앞에서 봤던 복잡한 명령어 모음이 있잖아요.

이렇게 해서 서버를 띄운다고 했는데 이 명령어 를 Docker Compose 라는 명령어 하나로 할 수 있는 거예요.

제가 말씀드린 Docker Compose 사용을 하면.

어떻게 하냐? 앞서 봤던 그 내용들을 Docker Compose yml에 적기만 하면 됩니다.

아까 보여드린 명령어랑 옆에 놓고 보시면 거의 비슷합니다.

그래서 환경변수들을 인바이트먼트 섹션에 적고요.

볼륨 명령어를 적고 이미지 이름, 포스트그레스라 고 적으면 돼요.

여기 보시면 db라는 녀석은 그냥 이름이라고 생각하시면 돼요.

container 이름.

장고 부분도 마찬가지입니다.

환경변수가 많아졌는데 데이터베이스 설정할 때 넣는 기본값이라고 생 각하시면 되고요.

윗 부분이 약간 바뀌었어요.

윗 부분은 무슨 내용이냐 하면 이 위치에 있는 Docker 파일을 바탕으로 내 가 장고라는 이 container를 만들겠다 이런 의미입니다.

그리고 밑에는 포트는 아까 보신 퍼블리시 옵션이랑 같고, 장고 서버는 데이터베이스를 사용해야 되 잖아요.

링크는 아까 보신 링크와 같고 볼륨도 같습니다.

그래서 이렇게 해 놓고 띄우면 서버가 뜨는 거죠.

이렇게 해서 웹 서버 실행할 때 필요한 모든 기능들 이 Docker 와 Docker Compose로 커버가 가능한 거죠.

여기까지 하고 제가 한번 시연을 해서 다시 보여드릴게요.

실제로 현재 프로젝트를 하나 만들어놨고요.

여기에서 Docker Compose up을 해 보겠습니다.

설치하는 과정이 길어서 저는 아까 설치를 해 놨고, 지금은 바로 뜨는 거죠.

장고 서버 쓰면 이런 메시지가 뜨니까 익숙하시죠? 접속을 해 보겠습니다.

명령어를 간단하게 쓸 수 있다고 해서 다 좋은 거냐? 그건 아니겠지만 이 방식의 좋은 점은 아까 앞 서서 말씀드렸던 기록이 남지 않는다는 부분을 커버할 수 있는 이점이 있습니다.

그래서 내가 어떻게 해서 이 개발 서버를 띄울 때 어떤 문제를 겪었는지 기록이 남는 거고요.

그 기록 은 나중에 새로운 개발자가 합류할 때 그 개발자에게도 전수가 되는 거죠, 내가 말로 하지 않아도 그 분에게 Docker Compose만 가르쳐 주면 되는데 많이 사용하는 기술이니까 어렵지 않게 전달할 수 있을 것 같습니다.

Docker Compose도 PS 명령어가 있는데요.

그런 내가 정의한 container들이 어떻게 떠있는지 보실 수 있는 겁니다.

 중간에 어떤 명령어로 실행되는지 나오는 거고요.

포트에는 어떤 포트를 사용하고 있는지, 그래서 두 번째 줄에 제일 끝에 보시면 0.0.0.0:8000번 코드가 내 로컬 컴퓨터의 8000번 코트와 연결돼 있다는 의미입니다.

Docker Compose up을 하면 아까 보신듯이 로그를 계속 깔아가게 돼요.

한 번 더 보여드리면 이렇게 서버 접속 로그들이 남잖아요.

이거 보기 싫고 서버만 띄운다고 하면 업 하실 때 -d 옵션을 주시면 됩 니다.

만약에 그렇게 했는데 다시 로그를 보고 싶다 그러면 logs 명령어를 사용하시면 되고요.

로그즈 했 을 때 로그가 출력되고 끝나는데요.

-f 옵션을 주시면 계속 추적해 지고요.

container에서 명령어를 실행하고 싶을 때가 있어요.

이런 명령어를 실행하실 텐데 이런 것들 실행하 시려면 exec 명령어를 사용해서 container 이름을 적고, 저 같은 경우는 bash를 통해서 직접 명령어를 실행하는 편이고요.

어떤 분들은 대신해서 마이그레이드 이런 식으로 명령어를 직접 넣기도 하십니 다.

container를 멈추려면 어떻게 하냐? 앞에 제가 이렇게 붙어있잖아요.

지금 업 해서 바로 띄웠기 때문 에.

이 상황에서 컨트롤 C를 누르면 바로 container가 스톱되면서 나갈 수 있는데요.

이런 상황이 아니 고 -d 옵션을 통해서 데몬 모드로 띄워놨다고 하면 여기서 -d를 하면 container가 뜨고 난 이 상황이 되잖아요.

이 상황에서 종료를 하시려면 다운 명령어를 사용하시면 됩니다.

이렇게 해도 데이터베이스에 쌓였던 데이터는 계속 Docker가 관리하는 특정 영역에 저장이 되어 있 어서 사라지지 않고, 그 데이터까지 지우고 싶다고 하면 -v 옵션을 주시면 지울 수 있습니다.

제가 Docker Compose 이렇게 얘기를 하고 나면 많이 물어보시는 질문이 있어서 더 얘기를 해 드릴 게요.

파이썬 서버를 사용하면 pdb라는 것을 사용을 하는데 보시면 Django container 있잖아요.

그 컨테 이너에 이 옵션을 주시면 됩니다.

이 두 옵션을 추가한 다음에 여기서 Docker Compose 명령어가 아니라 Docker 명령어를 사용하시면 되는데요.

이게 약간 어려워서 제가 한 번 더 보여드릴게요.

여기에 지금 이 두 옵션이 주석처리 되어 있는데 이 옵션을 켜겠습니다.

그러면 서버를 띄우면 바로 뜨겠죠.

그런데 Docker Compose는는 그걸 보여주지 않아요.

여기서 로 그즈를 해서 살펴보면 그냥 그런 내용이 없이 오류가 났다고 하고 막 꺼진는 것 같습니다.

장고 서버가 에러가 났죠.

그래서 일단은 다시 띄우고, 이렇게 하면 여기에서는 뭔가 입력할 수가 없거든요.

그래서 그 정의에 붙으려면 아까 보여드렸던 지금 장고 샘플 해서 장고 서버가 여기에 떠 있는데 컨 테이너 아이디가 여기 있거는 든요.

여기에 붙이치면 됩니다.

이렇게 pdb도 보실 수 있는 거죠.

디버깅 쭉 하시고 나가면...

이 부분도 많이 물어보십니다.

그다음에 런 서버 말고 다른 명령어도 함께 실행하고 싶다.

예를 들면 저 같은 경우는 개발서버 실행 할 때 바로 마이그레이션이 있으면 바로 해버리는 편인데 두 가지 명령어를 한꺼번에 실행해야 되잖 아요.

그런 경우에는 다른 명령어를 커멘드 쪽에 추가를 하시면 되는데 약간 형식이 익숙하지 않을 수도 있겠지만 wml에서 작대기 기호를 통해서 리스트 형태로 명령어를 넣을 수 있는 거예요.

마이그레이션 2의 서버까지 진행이 됩니다.

그다음에 프린트로 출력을 하는 경우도 있잖아요.

별로 좋은 방법은 아니지만 특정 값이 어떤 값인지 궁금할 때 이런 식으로 하기도 하는데 바로 로그로 표현이 안 되는 경우도 있어요.

왜냐하면 파이썬 버퍼라는 애가 존재하는데 얘가 출력결과를 바로 보내주지 않고 갖고 있다가 한 템포 늦게 보내주거든요.

그래서 Docker 파일에서 파이썬 언버퍼드 값을 설정을 해 주면 바로 출력으로 보내준대요.

그리고 아까 보여드린 내용이 여기에 나오는데요.

만약에 Docker 파일을 수정을 했잖아요.

아까는 인스 톨로 포스트그레스만 추가를 했지만 예를 들어서 다른 패키지를 거기에 넣거나 할 때 그 내용을 바뀌 었으면 Docker Compose 업을 할 때 빌드를 수정을 하셔야 됩니다.

새로 만들어주겠다 이런 의미고요.

Docker Compose yml 파일을 수정했다면 컴포즈 업을 하실 때 사용하시는 옵션입니다.

팁이라고 하면 저도 제가 만든 팁은 아니고 외부에서 사용하시는 것을 보니까 배포용 Docker  이미지 만 들 때 보통 많이 사용하시고, 보통 폴더를 하나 더 만드셔서 장고 서버면 장고, 이런 식으로 쭉 폴더 를 따로 만들고 그 안에 Docker 파일을 만들어서 이런 식으로 관리를 하시면 깔끔하게 관리가 되고 요.

이런 오류를 만나는 경우가 간혹 생겨요.

이거는 Docker FOR osx가 자기가 그 부분을 가상 디스크처럼 사용을 하는 거죠.

그런데 이게 점점 쌓여서 64기가가 곽찹니다.

그러면 빌드를 할 수가 없으니까 Docker  런 명령어를 실 행할 때 container를 만들 수 있는 공간이 없다고 나오는데요.

이런 부분은 환경설정에 가서 리셋에 가서 제일 끝에 리셋 버튼을 누르고 디스크 이미지를 하시면 새 로 설정이 됩니다.

물론 내가 만들었던 그 디스크 이미지들이나 container는 다 사라지기는 하지만 그래도 에러 상황이 계속 남아있는 것보다는 나으니까 그래서 이렇게 사용하시면 되겠습니다.

이게 아까 보신 것처럼 단점도 있어요.

pdb 같은 디버거 붙이기가 까다로운 점, 두 번째는 그냥 내 로 컬 컴퓨터에서 파이썬 서버 하나 띄우는 것보다는 컴퓨터 자원을 많이 먹습니다.

실행을 해야 되고 설치를 하는 과정이 있기 때문에 저사양 컴퓨터에서 조금 느린데, 제가 얼마 전에 2014년형 맥북에서 한번 실행을 해 봤는데 그 정도면 괜찮더라고요.

i5 4기가 정도 되는 데도 잘 돌아가는 걸 봐서는 아주 느리지만 않으면 괜찮은 환경을 제공할 수 있 을 것 같습니다.

참고할 만한 자료는는 이렇게 제가 정리를 해 놨고, 이건 나중에 공유해 드릴 테니까 링크를 눌러서 들어가보시면 되겠습니다.

Docker Compose와 함께 즐거운 생활이 되셨으면 좋겠습니다.