그러면 이제 마지막 세미나 발표입니다.

지금까지 열심히 공부해 주셨는데, 마지막까지만 조금만 더 집중해서 공부하는 시간이고요.

마지막 발표는 장고 채널 삽질기라는 주제로 방신우 님께서 발표해 주시겠습니다.

큰 박수 부탁드립니다.

-함께: (박수)

-안녕하세요?

안녕하세요?어서

날이 추운데 감기 조심하셨으면 좋겠고요.

1시간 20분 정도 된 것 같은데 마지막 발표 빨리 ... 최대한 빨리 전달 혹은 열심히 전달해드리고 내려오도록 하겠습니다.

저는 장고 채널 삽질기를 이 자리에서 말씀드리려고 합니다.

저는 에드투페이퍼라는 서비스를 개발하고 있는데요.

혹시 에드투페이퍼에 대해서 들어보신 분 손 들어주시겠어요.

몇 분 계시네요. 감사합니다.

저도 그렇고 회사도 그렇고 파이썬 서버를 쓰고 있고 장고, Flask, 팔콘, 지벤트

팔콘 빼고는 거의 모든 방면에서 파이썬 서버를 다 쓰고 있는 것 같습니다.

저희 회사 자체가...

오른쪽 안에 Github 있으니까 팔로해 주시면 맞팔 하겠습니다.

파이썬 코리아 포스팅하기도 했는데 제 이름을 보셨는지 모르겠습니다.

애드투페이퍼 소개를 해드려야 세미나 내용 이해에 도움이 될 것 같습니다.

저희는 80만 대학생 누적 회원이 있었고요.

그리고 저희 앱에서 광고를 보면 포인트를 적립해 주고 그 포인트로 현장에서 프린트를 출력할 수 있는 돈으로 쓸 수 있는 그런 서비스를 제공하고 있습니다.

이렇게 오프라인에 가면 대학교 안에 저희 서비스 영역 존이 있어서 오프라인 지역 안에서 저희 서비스 포인트를 기반으로 출력을 할 수 있는 일종의 화폐개념 앱으로 제공하고 있습니다.

기술 관점에서 보면 하이브리드앱을 6, 7년째 운영하고 있고 장고도 횟수로는 7년째 운영하고 있고요.

장고, 장고채널스, Flask, 지이벤트.

진짜 할 수 있는 거는 웬만하면 다 쓰지 않았나 싶고 클라이언트의 입장에서는 윈도우os, 대학교에서는 대부분 Windows os를 쓰니까 후킹을 해서 프린트 과금을 하는 그런 시스템입니다.

저의 엔지니어링 블로그도 아래에 링크가 있으니까요.

rss피드 팔로 기능이 있으니까 그것도 한번 구독해 주시면 저희가 간단히 올리는 거 확인하실 수 있을 것 같습니다.

오늘은 장고 채널스에 대해서 이야기할 텐데요.

이게 어디에 저희가 장고 채널스를 쓰고 있나를 말씀드리겠습니다.

정의는 일단 평소에는 그냥 장고만 7년을 썼습니다.

그래서 학생들이 pc에 가겠죠.

pc에 가서 쉬는 시간에 스스로 원하는 출력물들을 한글, 워드 등등에 띄우고 출력을 하려고 할 겁니다.

그러면 이 출력 명령과 함께 저희 UI가 뜨고 과금창이 떠서 과금을 시키는 시스템이었습니다.

그래서 과금이 완료가 되면 프린터로 스풀파이를 전달해서 출력이 시작되는 형태였고요.

굉장히 간단하죠.

뭐 어떻게 내부 구현을 했는지는 뭐 일일이 말씀드리긴 어렵습니다만 간단하게는 다들 구상할 수 있을 거라고 생각을 합니다.

그런데 이번에 저희가 복합기 회사와 컬래버레이션을 했습니다. 일종의 협업이죠.

저희가 이게 지금 가장 쉽게 볼 수 있는 형태인데 PC에서 출력을 하면 복합기에서 로그인, 과금 등등의 형태를 복합기 위주로 가져가는 형태입니다.

저희 서비스는 아닌데 이런 UI를 다들 한 번쯤은 보셨을 거라고 생각합니다.

여기에 로그인 버튼을 달아두고 계정별로 출력을 할 수 있는, 출력 과정과 함께 과금을 하는, 이해하기 어렵지 않지 않나요.

회사, 혹은 학교에서 이런 UI를 한 번쯤은 다들 마주하셨을 거라고 생각합니다.

그래서 기존 프린트 시스템과 가장 달라진 거는 이 문서 전달 요청 과정입니다.

그러니까 여기 보면 기존에는 PC에서 과금까지 다 한 다음에 프린터는 말 그대로 출력물 받으러 가는 곳이었거든요.

그런데 이제 프린터와 복합기가 조금 더 많은 기능을 하게 되었죠.

그래서 문서를 전달받는 시점이 조금 애매해지게 되었습니다. 기술적인 관점에서

이 문제를 해결해야 할 필요가 있었죠.

이거 처음으로 생각한 게 PC마다 서버 띄우기인데 이거는 사실 말도 안 되는 생각입니다.

아주 러프하게 한 건데 당연히 말이 안 되죠.

왜냐하면 모바일 애플리케이션으로 치면 모바일 애플리케이션마다 서버를 띄운다는 건데 사실 너프하게 우스갯소리였고요.

내부망에 파일 서버를 두는 방식을 생각했습니다.

PC에서 출력이 시도가 되면 그 출력파일, 스풀파일이라고 하는데 스풀 파일을 내부망 서버에 전달해둔 다음에 복합기 과금이 완료되면 문서 ID값에 대한 조회를 스풀 파일 서버에 요청해서 문서를 가져오는 시스템이었습니다.

이렇게 하면 다들 예상하시겠지만 HTTP 통신으로 모든 것을 해결할 수 있고 도입 사례도 있습니다.

안정성도 괜찮죠.

사실 복합기가 설치되어 있는 환경이 굉장히 낙후되어 있는 경우가 많습니다.

예를 들어서 Windows XP가 깔려 있는 학교도 많거든요.

그리고 학교 차원에서 OS를 관리하는 라이선스 문제도 있기 때문에 쉽게 Windows를 7으로 올린다든가 10, 8으로 올리는 게 학교 차원의 규제를 받는 경우가 있어서 제약이 많습니다.

낙후되어 있어서 내부망을 쓰면 굉장히 좋았을 텐데

문제는 도입마다 비용이 발생한다는 겁니다.

비즈니스적인 이해 관계와 개발적 이해 관계가 충돌하는 순간입니다.

한 장당 50원, 100원, 150원 이렇게 복사 비용을 받는 사장님 입장에서는 이거를 도입과 함께 몇십만 원의 서버를 도입한다는 거 자체가 심적인 거부감을 굉장히 유발한다는 거죠.

영업하시는 분들의 클레임도 있었고, 그런데 굉장히 합리적인 말씀이기도 해서 이런 제약 조건 아래에 다른 방식을 찾아 보게 되었습니다.

속이 쓰리더라고요.

굉장히 쉽게 해결할 수 있는 문제인데...

세상에 저희 마음대로 할 수 있는 게 많지는 않으니까요.

그리고 어떤 학교는 프린터와 PC 사이의 좁은 5, 10m도 안 되는 공간 안에서도 망이 분리가 되어 있습니다.

그래서 내부망을 쓰는 방식으로 하면 언젠가는 저희가 리버럴한 솔루션으로 쓸 수 없겠다는 판단도 했었고요.

그래서 생각을 한 게 이거를 외부망으로 빼고 소켓 연결을 시키는 방식이었습니다.

그러니까 여러분들이 다 아시는 것처럼 저희도 맨날 쓰고 있는 AWS의 퍼블릭 서버를 하나 두고 이 퍼블릭 서버가 과금을 기다리고 있는 형태인데요.

살짝 복잡할 수 있는데 설명을 드리겠습니다.

일단 PC와 퍼블릭 서버 간의 소켓이 24시간 연결이 되어 있고요.

출력 시도가 발생한 경우, 그러니까 유저가 이 문서를 출력하겠다.

한글 파일을 출력하겠다. 과제를 출력하겠다고 한 순간 PC 내부에 스풀 파일을 저장합니다.

그래서 복합기에서 과금이 끝나면 이 서버에 과금을 알리고요.

이 과금을 알려진 서버가 이 PC에게 복합기로 전달하도록 소켓을 통해서 명령을 내립니다.

일종의 푸시 서버 느낌의 기능을 하고 있다고 보시면 될 것 같네요.

아무리 쉽게 하려고 해도 쉽게 정리가 안 되는 내용이더라고요.

조금만 집중해서 들어주시면...

출력 파일을 갖고 있고 유저가 출력을 명령하는 순간 그리고 폭합기에서 과금이 완료되면 서버로 과금이 완료됐다고 알리고요.

그리고 이 서버는 출력하라고, 과금이 완료됐으니까 너희가 출력할 때야! 하고 PC에 알리고 마지막으로 이 PC가 자신이 가지고 있던 스풀 파일을 복합기에 전달하는 방식입니다.

그런데 HTTP로는 아시다시피 서버에서 클라이언트로 전달하는 통신이 안 되죠.

클라이언트가 미리 서버로 리퀘스트를 날리지 않고 HTTP2가 아닌 이상 어렵겠죠.

그리고 소켓 서버가 필요했습니다.

언제 출력이 발생할지 모르기 때문에 폴링 방식을 쓰기에는 애매하고 소켓 서버를 하나 두는 방식으로 생각을 했습니다.

그래서 기존 장고를 쓰면 참 좋겠죠.

그런데 저희는 기존 장고는 구 버전이고요.

그래서 이 오피셜한 장고 채널스가, 장고채널스가 오피셜하게 붙은 지 2년 정도 됐지만 2년 전 장고임에도 불구하고 LTS가 존재하기 때문에 그 버전이 아니라 필연적으로 다른 기술을 써야 할 필요성이 있었습니다.

사실 딜레마긴 했는데 행복하기도 했습니다.

왜냐하면 장고, Flask, 지벤트 써보기도 했지만 이번에 다른 기술도 써볼까?

이런 갈증 혹은 문제 의식, 욕구가 있었거든요.

일종의 갈증 해소 기회가 될 수 있겠다는 생각도 했습니다.

기능이 굉장히 단순합니다.

출력해라고 명령 하나 하는 거기 때문에 굉장히 마이크로하거나 엄청나게 거대한 기술을 써도 유지보수에 문제가 없겠다고 생각을 했거든요.

기능이 10가지면 모르겠는데 1가지니까

그래서 아주 트렌디하거나 하는 데서 쓰는 걸 써볼까

어랭 많이 올라오죠. 엘릭서 얘기도 있고 고랭도 있고 백엔드는 아니지만 카프카의 컨슘하는 방식도 사고 오버엔지니어링도 생각을 했습니다.

왜냐하면 말씀드렸다시피 오버엔지니어링을 해서 25초가 전혀 문제가 되지 않는 상황이었거든요.

그런데 런칭은 3주 후라는 말을 뒤늦게 들었습니다.

팀 내에서만 의사 결정을 하는 게 아니라 외부 팀, 아까 말씀드렸다시피 복합기 회사랑 컬래버를 한 거기 때문에 비즈니스적 이해관계상 3주 후에 런칭을 해야 하는 상황이더라고요.

다른 분들, 혹은 다른 회사 분들도 서비스의 주기가 있을 수 있을지 모르겠지만 저희는 개강 시즌이 엄청나게 중요한 시즌입니다.

그러니까 저희는 방학 때 모든 필요한 서비스, 업데이트를 다 마치고요.

개강 때 모든 걸 진행하는 주기라서 개강이 3주 남은 시점이라 결국에는 돌아오는 계기가 되지 않나.

굉장히 포스터가 적절하더라고요.

결국에는 장고로 돌고 돌아서 돌아온 탕아라고 하나요. 탕자라고 하나요.

그런 개념처럼 장고를 쓰게 되었습니다.

앞서 얘기 나오기도 했지만 채널스가 장고 오피셜 프로젝트로 들어갔죠.

그래서 이것을 국내에서 누가 쓰고 있나 이것도 궁금하더라고요.

그때 마침, 아주 마침 파이콘에서 이 발표가 있었습니다.

다들 파이콘 가신 분들은 기억하실 수 있겠는데요.

이거 완전 저희 얘기 아닌가?

그래서 심지어 저희는 40만 명도 안 쓰거든요.

그래서 이거 발표를 굉장히 유심히, 유익하게 들었고요.

굳.

굉장히 좋은 기회다 싶었습니다.

그리고 유지보수는 잘되고 있나 싶었는데 일단 아예 이 오픈소스 프로젝트 자체가 장고 팀에서 관리를 하고 있더라고요.

메인테이너들이 장고 프로일 수 있는 거니까 그리고 여기 아래 보시면 업데이티드가 17일 전, 2일 전 이렇게 되어 있죠.

유지보수가 잘되어 있구나 이렇게 알고 있었고요.

최신이슈까지, 클로즈됐다는 의미인데 보시면 이틀, 6일 전 게 클로즈되어 있습니다.

이 얘기는 현재까지 토론이 되어 있고 메인 테이너가 이것을 예의주시하면서 이슈가 열리고 닫히는 거를 확인하고 있다는 의미이기 때문에 유지보수가 잘되어 있다는 것을 알 수 있었습니다.

굳, 쓰자.

이렇게 사실 뭐 답정너로 원래 쓰려고 했는데 한번 검토한 거죠.

구현 과정은 굉장히 생략... 쉽기 때문에 거의 장고 쓰시는 거랑 똑같다고 생각하시면 되고요. 오늘은 삽질한 거 들려드리려고 온 거기 때문에 조금만 덧붙이면 테스트코드는 채널스 내에 테스팅 객체들이 준비가 되어 있습니다.

이거랑 파이 테스트를 붙이면 웹소켓도 지원이 돼서 콘슈머 객체를 활용해서 테스트를 할 수 있었습니다.

컨슈머는 쉽게 말씀드려서 뷰 게임에서 장고채널스에서 컨뮤서, 원론적으로 같지않지만 그렇게 이해하시면 될 것 같은데 장고로 말씀드리면 일반 HTTP 통신을 하는

클라이언트가 테스트 코드를 짤 때 URL, 겟 파라먼트, 이렇게 맞춰서 짜는 게 아니라 백앤드에 된 것을 활용해서 클라이언트가 짤 수 있게 되어 있었습니다.

굉장히 테스트 코드를 작성하는 데 어려움이 없었다 이렇게 말씀을 드리고요.

런칭도 아주 쉽게 무리없이 바로 할 수 있었습니다.

여기서부터 이제 삽질인데요.

하... 이게 다들 현업에서 일해보신 분들은 알겠지만 자신이 개발한 코드가, 혹은 자신이 개발한 명령이 외부팀으로부터 안 된다는 얘기를 들을 때 어떤 심정인지는 다들 아실 거라고 생각이 듭니다.

그래서 처음에는 사실 너무 당황스러웠죠. 왜냐하면 기능이 하나밖에 없는데 이게 안 된다고 하면...

나는 뭘 한 것인가? 그런 생각이 들지 않겠습니까?

그래서 조금만 더 깊이 들어가보면 출력 명령이 안 된다는 건 웹소켓 메시지에 문제가 있다는 거거든요.

웹소켓의 메시지가 뭔가 깨졌거나 혹은 안 갔거나 등등의 과정을 생각할 수 있습니다.

그래서 미리 만들어둔 게를 있었는데요. 웹디버그 할 때

유저 혹은 클라이언트의 각각의 유니크한 아이디 값이 있잖아요.

그 아이디값에 오가는 메시지를 실시간으로 체크할 수 있는 디버거를 하나 만들어놨습니다.

그래서 저희는 이 메시지에 오가는 내용이 막 엄청나게 시큐한 정보가 없고요. 일단 출력이 된다 만다 이런 얘기밖에 없기 때문에 이런 거를 만들어놨는데요.

보시면 제가 좀 지웠는데요.

자바 스크립트로 웹소켓 클라이언트를 하나 구현해두고 실시간으로 클라이언트가 된 것처럼 웹디버거를 만들어둔 겁니다.

그래서 실시간으로 웹 메시지가 퍼블리싱 되면 섭스크라입을 크롬에서 할 수 있게 해서 실제 디버깅을 해보니까 1초 동안 메시지를 1천 개 발생을 시켜봤는데 잘되더라고요.

차라리 안 되면 행복하다고 할까요. 아무튼 문제가 잡히는 건데!

아니, 1천 개가 되면... 돼야 하는 거 아니겠습니까?

그래서 뭐지...? 하고 봤는데 이때 머리가 좀 아팠습니다.

그런데 오류 환경을 좀 세밀하게 조사를 해봤는데 한 장소에서만 오류가 나더라고요. 딱 한 장소에서만

다른 데 잘되고 거기만 안 되는 건 환경에 문제가 있었지 않겠나

그런데 거기 보니까 24시간 오픈된 장소입니다.

이게 뭘 의미하느냐 하면 학생들이 새벽 3시에 출력하지는 않아요. 사실

다들 집에 가거나 술 마시고 있거나 등등의 행위를 하는데 이곳은 24시간 오픈을 했더라고요.

왜냐하면... 모르겠습니다. 수요가 있겠죠.

그리고 대부분의 학교가 아침 8시에 PC를 켜는데 그렇지 않고 24시간 오픈된 장소였습니다.

그러면 혹시 연결 문제가 있는 것인가? 24시간이 지난 이후로?

이런 의심을 할 수 있죠.

엔진X 설정을 보면 과하다 싶을 정도로 타임 아웃을 길게 잡아놔서 사실 디버깅 용으로 처음에 초기 도입 때 해놓은 건데 이렇게 잡아두면 타임 아웃은 없는 거거든요. 너무 과하게 잡아놔서 사실 문제가 됐어야 하는데 그런 것도 아니고

그리고 다프네라고 해서 전전 발표자님께 감사한 게 파이썬 서버들, 인터페이스 서버를 훑어주셨더라고요.

그런데 이게 다프네라고 채널스에 맞는 인터페이스 서버가 있습니다.

이 웹소켓 타임아웃에 -1이 1초가 아니라 무한대거든요. 그러면 이 연결 문제가 났을 때 제가 분명히 알 수 있는, 명시적으로 나는 문제입니다.

혹은 클라이언트에서 디버그를 봤을 때 타임아웃이 나든가 네트워크 오류가 명시적으로 드러날 수 있는 환경인데요.

조금 과하다 싶을 정도로 문제가 없었습니다.

그리고 실제로 보니 현장에서도 연결은 아주 잘 맺어져 있더라고요.

조금 머리가 아팠는데, 그래서 일단 조금 엔지니어링하기도 민망한 거지만 워낙 현장이 낙후된 곳이 많기 때문에 일단 새벽에 클라이언트 리셋을 하는 방식으로 대응을 해놨었습니다.

학생들이 새벽 4시에 출력하는 건 몇 년 동안 손가락에 꼽을 상황이기 때문에 이렇게 단순 대처를 해놨었고요.

그러던 중에... 그러던 중에 아주 우연하게 이 아마 레디스로 개발하시는 분들은 알겠지만 가끔 이렇게 켜놓고, 저는 항상 켜놓고 하는데요.

이렇게 메시지를 보고 있었습니다.

사실 왜 이걸 보고 있었냐 하면 이 레디스의 키값이 잘 들어가는지 밸류가 잘 들어가는지 보고 있었는데 여기서 이상한 거 느끼시는 분 계세요?

못 느끼세요?

저도 못 느꼈습니다.

못 느껴야 정상이죠.

아주 잘 보면 익스파이어가 있어요.

익스파이어가... 도대체 왜 나오지 싶었는데 익스파이어는 레디스에 있는 키값을 특정 시간이 지나면 없애주는 기능인데요.

아니, 잘 보니까 장고 채널스 레디스에 이 기능이 있더라고요.

그러니까 이 그룹... 일종 레디스 서브스크라이더를 모으는 기능인데 이거를 8만 6400초가 지나면 자동으로 없애주는 기능이 있었던 거더라고요.

유심히 봤으면 좋았을 텐데 아마 메모리 혹은 등등 레디스 환경을 배려한 개발자의 디폴트 옵션이었을 텐데 못 보고 있다가 이거를 발견해서 86400초는 정확히 24시간이거든요.

저희가 겪는 문제가 발견되는 시간이었습니다.

제가 연결을 계속 봤는데 학교와 연결의 문제가 많기도 해서, 연결은 유지가 되는데 안에 메시지가 오가지 않는 상황이었습니다.

그래서 그룹 익스파이리 값을 조정해서 해결을 했습니다.

설정을 잘하자.

진리 같습니다.

그리고 삽질2가 있습니다.

이거는 더 심각했어요.

특정 장소는 아니고 새벽 7시에서 8시?

시험 기간에 아침에 학생들이 일찍 오는 경우가 있는데 출력이 안 된다고 하는 거예요.

이거는 거의 자다 깨는 심정이잖아요.

다들 아실 거라 생각합니다. 심장이 철렁하는 느낌

그래서 뭐라 하죠.

로우 서버를 보니까 이렇게 뜨고 있더군요.

툭 투 롱 투 셧다운 앤 워즈 킬...

무슨 뜻이지?

뜻은 이해가 갑니다.

직역을 못하는 게 아니라 이게 무슨 의미인지?

결과는 500이 펑펑 나고 있는 상황이었고 이 이슈에 있더라고요.

툭 투 롱 투 디스커넥트 이슈

이 문제가 공론화되던 건 사실이었습니다.

좀 자세히 보니까 다수가 동시에 디스커넥트할 때 발생하는 문제였습니다.

저희가 새벽... 아까 말씀드렸다시피 특정 장소에서 새벽에 리셋을 하는 바람에 이게 나비 효과처럼 없던 문제가 다른 문제를 해결하다 보니까 이 문제가 생겼고 꼬리를 물고 물어서 여기까지 온 거더라고요.

저희가 테스트로 1천 개 연결을 해보고, 2천 개 연결을 해봤는데 동시에 한 번에 모든 걸 끊어보는 테스트는 해본 적이 없어서 2천 개 정도는 동시에 연결 시켜 놓고 스무스하게 끊는 거는 해봤지만 인위적으로 2천 개를 한 번에 끊는 거는 테스트를 진행해 보지 않았습니다.

그래서 일종의 라이브러리 레벨 버그라고 하더라고요.

그래서 엔드류 님이 메인테이너인데 채널스 쪽은 이분이 다 관리하십니다.

그리고 장고 채널스 오피셜이 장고의 오피셜로 어뎁트 되었다고 공표한 분도 이분이 하신 건데 그런데 바쁘시다고, 이 문제를 함부로, 모든 걸 처음부터 디버깅하실 시간은 없으신 걸로 나와서 슬펐습니다.

다른 유저들은 어떻게 이거를 겪고 해결하고 있는지 보니까 아까 너무 감사한 게 워커에 대한 개념을 설명해 주셨죠.

워커를 질문하시고 그리고 어떤 분은 프로세스를 질문하셨더군요.

그래서 저희도 일단 다프네 프로세스를 증분시키고 엔진X 로드 밸런싱을 해서 해결을 시켰습니다.

근본적인 해결은 아니지만 아쉬운 데로, 그리고 복사실 도입하는 거는 B2B입니다.

그래서 언제 이 서버가 증설될지 알고 있고 수요가 늘어날지 예측할 수 있었습니다.

그리고 무엇보다 서버 역할이 적기 때문에, 안정적인 대응이 가능하다는 생각에 이렇게 대처를 했습니다.

우여곡절 끝에, 아주 진짜 너무 적은 건데 뭐 이렇게 우여곡절했는지 모르겠습니다.

너무 초라한 커넥션인데 피크에 500명 동작하는 건데 이 출력 시스템이

이거 왜 이렇게 유지하는 게 힘들었나 이렇게 생각을 하고 있습니다.

끝으로 소감, 이슈를 세심하게 읽자.

그런데 저는 기존에 논의가 활발하게 오가는가를 굉장히 중요하게 여기거든요. 오픈소스를 선택할 때

사실 당연한 거죠. 이슈가 어떻게 오가고 메인 버그가 뭔지 조금 더 세심하게 봐야 했었는데 조금 아마추어틱한 실수를 한 게 아닌가

변명을 하자면 장고 팀에서 관리를 하는데 무슨 일이 있겠어?

핑계입니다.

과거로 돌아간다면 두 번째로 저는 지이벤트 쓰지 않을까?

300명 접속하는 데 뭐 이렇게 우여곡절 겪어야 했나 싶긴 합니다.

이미 비슷한 요청을 처리하는 지이벤트가 서버에 있었는데 이건 협업하는 코드라 분리를 해야 해서 동시에 저 기존에 쓰던 걸 쓸 수는 없고요.

그런 과정에서 채널스를 선택한 건데 지이벤트 써도 좋지 않았을까 하는 생각을 하고 있습니다.

끝입니다.

-함께: (박수)

-밑에 이메일이 있습니다.

긴 질의응답은 여기로 하셔도 되고

-시간상 질의응답은 하나만 받을게요.

질문 있으신가요?

넵

그럼 박수 한 번 더.

이제 공부하는 시간이 끝났습니다.

