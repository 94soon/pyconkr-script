자, 다음은 감효준 님께서 테스트 미신이라는 제목으로 발표해주시겠습니다.

 박수 부탁드립니다.

(박수)

-네, 안녕하세요? 스포카의 강효준이라고 합니다. 

저기 왼쪽에서 스포카 부스를 해서 제 목소리를 들으신 분도 많을 것 같아요.

벌써 네 번째 후원사 행사를 진행했는데 정말 목이 아파요.

행사 진행하시는 진행위원분하고 저기 문자통역 해주시는 분도 정말 대단한 것 같습니다. 감사합니다.

그리고 저는 테스트미신이라는 주제를 가지고 발표를 하려고 하는데요. 

테스트 짠다고 항상 이야기를 많이 하면 항상 먼저 나오는 이야기가 이런 이야기인 것 같아요.

테스트를 하는 데 너무 오래 걸린다. 이거 왜 짜냐.

저는 사실 이게 테스트미신이라고 생각하는데 왜 그렇게 생각하는지 이야기를 해보려고 합니다.

사실 테스트 짜는 게 오래 걸린다는 이야기는 그냥 손으로 돌려보는 게 더 빠르다고 믿고 있기 때문에 많이 나오는 이야기인 것 같아요.

이렇게 쳐서 나오면 결과값이 나오니까 더 빨라보이잖아요.

물론 그래서 QA 하시는 분들 따로 모아서 그런 절차를 진행하기도 하죠. 

그래서 제가 예제로 절대값의 더 큰 값을 가지고 오는 함수를 만들어왔는데요.

그래서 보통 이렇게 파이를 작성하게 되면 이런 식으로 함수를 돌리겠죠.

그러면 저희는 테스트를 하기 위해서 실행을 세 번씩 이렇게 할 거예요. 

그런데 여기서 참 간과되는 부분 중에 하나는 코드, 소프트웨어, 라이브러리, 모듈들은 녹이 슨다는 사실입니다.

시간이 갈수록 소프트웨어의 어떤 부분이 바뀐 것도 아닌데 알아서 녹이 슬고 있는 게 저희가 테스트를 짜야 하는 이유라고 생각해요.

그냥 갑자기 코드가 안 돌아가기 시작해요. 

저희 회사에서는 CI를 돌리고 있는데 그게 갑자기 하루아침에 망가져서 다음날 빌드가 안 돼서 배포를 못하는 상황도 종종 옵니다.

그렇게 되는 이유는 일단 구현이 복잡해지면서 어느 코드를 어디서 고쳐야 될지 모르겠는 상황이 오는 게 하나가 있고 

그다음에 저희 서비스를 안 고치더라도 라이브러리가 업데이트가 되면서 라이브러리의 인터페이스가 바뀌어요.

물론 버전피닝을 하면 그런 현상들을 막을 수는 있지만 

또 어제 어떤 발표에서 이야기한 것처럼 리졸버가 아직은 제대로 만들어지지 않았기 때문에 깨지는 경우가 많다고 생각합니다.

이런 것들은 팀원들이 많아지면 또 많이 발생하는 문제고요.

그래서 저는 회사 안에서도 그렇고 지인분들하고 이야기할 때도 단위테스트를 꼭 짜야 한다는 이야기를 많이 하는데요.

모듈, 함수, 클래스 단위를 테스트하는 것을 단위테스트라고 합니다.

하지만 안타깝게도 단위테스트가 만능은 아니에요. 

지금 이 문고리를 잘 작동하는 단위테스트를 만든다고 해도 통과테스트가 없으면 미닫이문인 문을 테스트할 수 없는겠죠.

그렇기 때문에 단위테스트만으로 부족하지만 

그래도 단위테스트라도 짜면 저희가 방지하고 싶은 문제들을 방지할 수 있게 됩니다.

그래서 아까 ABS맥스라는 함수를 짰었는데 

테스트를 만약에 작성한다면 저는 가장 쉽게 성공하는 케이스들을 생각을 해서 먼저 짤 수 있을 것 같아요.

이 함수는 파이테스트라는 라이브러리에서 실행을 하시려면 이런 느낌으로 짜셔야 되는데요.

그래서 나중에 성공하는 케이스가 많이 충분히 짜여져 있다. 

그러면 나중에 실패하는 케이스를 조금씩 추가, 

뭐 넌이 들어가면 밸류에러가 나야 된다라든지 실패하는 케이스에 대한 구현도 붙여주면 좋을 것 같고요.

소프트웨어는 유지라는 게 사실 버그가 날 수 있어요. 

아까 맨 처음에 함수 작성한 걸 보면 -3을 넣어도 3이 나오게 되거든요.

 사실 이거는 버그가 생기는 케이스를 넣고 그 버그가 다시 생기지 않도록 회귀테스트를 하는 거죠.

그래서 한 가지 더 소개시켜드리고 싶은 개념이 TDD라는 이야기입니다.

테스트를 먼저 짜고 구현을 나중에 한다는 거죠.

그래서 이런 식으로 성공하는 케이스에 대한 거를 먼저 짜는데 약간은 조금 이상하게 보일 수 있지만 무조건 성공하게 만드는 가장 짧은 코드를 먼저 짭니다.

그리고 이제 실패하는 케이스를 넣은 다음에 이 실패하는 케이스를 커버칠 수 있는 가장 빠른 방법을 추가시키는 거죠.

 이런 식으로 코드를 점진적으로 개선하다 보면 유니테스트가 더 견고해지고 테스트할 수 있는 코드가 만들어지는 거죠.

지금 15초 남았는데 저는 스포카에서 왔고요. 스포카 채용 중이니까 저한테 연락주시면 감사하겠습니다. 감사합니다.

(박수)

-(사회자) 발표해주신 효준 님, 셀프로 책 가져가주셔서 감사하고요. 여러분, 핸드폰을 가지고 올라오시니까 영 재미가 없네요.

 핸드폰을 잠시 수거를... 뒤에 분부터 하시면 슬프시죠? 아니에요. 아니에요. 진행하세요. (웃음)
