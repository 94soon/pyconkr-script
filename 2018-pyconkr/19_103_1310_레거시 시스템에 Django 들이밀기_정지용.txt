안녕하세요? 

정지용입니다.

이렇게 많이 찾아주셔서 감사하고요.

재미있게 듣고 가시면 좋을 것 같습니다.

먼저 간단하게 제 소개를 드리면 저는 P2P금융 렌딧이라는 회사에서 일하고 있고요.

제 개인적으로는 새로운 언어나 새로운 프레임워크를 배우는 것을 정말 좋아합니다.

파이썬 같은 경우는 옛날부터 조금씩 쓰고 있었지만 장소는 시작한지는 말씀드리기 부끄럽지만 그렇게 오래 되지 않았고요.

회사에도 장고 프레임워크이나 이런 것도 열심히 공부하면서 즐겁게 생활하고 있고요.

장고를 좋아하게 된 이유는 역시 코드가 굉장히 읽기 편하고, 그다음에 코드의 양이 굉장히 적다는 점이 굉장히 매력적이었고요.

발표를 시작하기 전에 사실 이것이 저 혼자 한 작업은 아니고 여러 분이 도와주셨는데 고비마다 도와주신 쌤하고, 여기 어딘가 앉아있는데 감사를 전하고 싶습니다.

먼저 자바, 저희회사뿐만아니라 우리나라 굉장히 많은 회사에서 자바를 주요 개발 언어로 사용하고 있는데요.

자바가 나쁜 것은 아니지만 자바라도 개발하다 보면 써야 하는 코드가 굉장히 많아요.

클래스가 끝도 없이 나오고 프론텐드 개발도 해야 하니까 이것저것 또 만들어야 하고, 그러다 보니까 뭔가 기능을 하나추가할 때마다 코딩 양이 많아 지고 코딩 양이 많아지면 자연스럽게 카피 페이스트를 하게 됩니다.

이것이 나쁘다고 할 수 없지만 복사 붙여넣기 하고 조금 바꾸고 이런 일을 많이 하게 되는데요.

저만 그런 것은 아니라고 생각하고요.

그러다 보니까 생기는 문제가 실수를 하게 되는 거죠.

아무래도 사람이 하다 보니까 필드도 하나 빼먹었네 하면서 실제로 서비스에서 문제가 생기고 여러 가지 고충이 이어지게 됩니다.

그러다 보면 또 실제 서비스에서 장애가 발생하고 이것을 빨리 고쳐야 하는데 빨리 고쳐야 하니까 또 마음이 급하니까 어쩔 수 없이 터미널을 열고 mysql를 또 치게 되지요.

문제가 생각해보니까 또 빼먹어서 대형사고가, 저희 회사에서 대형사고가 발생했다는 것은 아니고 이럴 수 있다는 것이고요.

그래서 정말 만들고 싶다..

물론 자바도 사람의 수고를 줄여주기 위해서 여러 가지 노력들을 많이 분들이 많이 하고 있고 굉장히 여러 가지 라이브러리들이 있어요.

그렇지만 제가 실력이 부족한 탓도 있겠고 제가 원하는 수준의 생산성을 갖기는 힘들었던 부분이 있었습니다.

자바 말고 코틀린은 써보기도 했지만 한계가 있었고요.

그래서 어드민을 새로만들고 싶다는 이런 생각을 하게 되었습니다.

그래서 저는 예전에 레일즈를 꽤 오래 써서 레일즈로 후다닥 만들어볼까 생각도 했었고 PHP 어드민 깔아서 쓰면 아까 같은 대참사도 안 일어나지 않을까 생각도 했었고요.

그러다가 제가 찾은 답은 장고였습니다.

슬라이드가 자꾸 이상하게 넘어가네요.

죄송하고요.

저희 환경을 잠깐 설명드리면 좋을 것 같은데 저희는 자바랑 자바 스크립트로 되어 있고 파이썬은 일부분만 사용하고 있었습니다.

그래서 기존에 자바로 만들어진 거대한 레거시 시스템있었고요.

저희 비즈니스가 복잡하다 보니까 테이블 수가 많았어요.

새로 어드민을 만드려고 보니까 기존 어드민을 버릴 수 없는 것이지요.

이 많은 기능을 한꺼번에 다 개발할 수 없으니까 적어도 꽤 긴 시간 동안 어드민을 유지보수해야 한다는 것이 가장 큰 제약이었습니다.

이것은 저희뿐만 아니라 거대한 레거시 시스템을 가진 회사에서 공통적인 고민일 것 같고요.

그러다가 만난 것이 장고의 인스펙트디비라는 기능인데요.

문서가 있는데 이것을 보면 장고가 제공하는 매니지먼트 커맨드 중에 인스펙트디비를 소개하고 있는데요.

간단하게 말씀드리면 장고로 시스템을 만들 때 무대를 이렇게 코딩을 하시게 될 텐데요.

이 모델 파일을 자동으로 생성해주는 프로그램입니다.

그래서 원래는 그런데 정보를 어딘가에서 읽어와야 하잖아요.

그것을 설정되어 있는 데이터베이스에 접속해서 데이터베이스 테이블 정보를 스캔한 다음에 그것으로부터 모델 파일을 거꾸로 만들어주는 것이지요.

그래서 이것이 있는 원래 의도는 레거시 시스템을 장고로 바꾸고 싶을 때 쉽게 옮겨갈 수 있도록 도와주는 것인데, 이것을 계속 지속적으로 하면 DB 하나에서 2개의 어드민을 운영하는, 한 DB 두 살림을 할 수 있지 않을까 생각을 하게 되었습니다.

그래서 목표는 최소한의 코딩으로 어떻게 하면 최대한 효과, 여기에서는 어드민을 만드는 것이고.

그다음에 최대한 기존 데이터베이스를 활용하지만 영향을 주지 않게 하는 것이 목표였습니다.

여기까지 도입길었고요.

발표 목차는 이렇고요.

여기에서 다량의 코드가 쏟아질 텐데 집중해서 한번 해보도록 하겠습니다.

장고 세팅을 해야 하는데요.

데이터베이스 연결을 세팅해야 합니다.

mysql를 쓰고 있었기 때문에 같이 쓰기로 했고요.

2개의 데이터베이스를 연결한다는 점인데요.

기존 시스템의 영향을 최소화하기 위해서 장고를 운영하는 데 필요한 기본 테이블들이 있는데 이 테이블들도 다른 데이터베이스의 생성이 되도록 하였습니다.

그래서 여기 이 장고가 붙어 있는 이것이 장고 운영에 필요한 테이블들이 들어가는 데이터베이스이고 이것이 레거시 시스템에서 운영하는 데이터베이스가 되겠습니다.

이 2개의 데이터베이스를 연결할 때는 장고가 제공하는 데이터베이스 라우터라는 기능이 있는데 이것을 활용해서 2개의 데이터베이스를 필요한 정보에 따라서 왔다 갔다하면서 접속하도록 하였습니다.

DB는 연결하면 인스펙트 스크립트를 돌릴 수 있는데요.

잠깐 보여드렸던 이것을 하면 되는데 2개의 데이터베이스 중에 어떤 것을 스캔해야 할지 지정해줘야 하고요.

그래서 레거시 데이터베이스를 지정해준 모습이고, 이것을 리다이트해서 모델스파이에 쓰면 되는데 이것은 보통 한 번만 하는데 저희는 레거시 시스템도 계속 변동되기 때문에 지속적으로 매일매일 이렇게 해줘야 해요.

그래서 아예 스크립트를 만들어서 쓰는데, 이 인스펙트디비를 돌리는데도 모델스파이를 하기 때문에 임시파일을 거쳐서 생성해야만, 생성하지 않으면 약간문제가 생겨서 임시파일을 거쳐서 파일 이름을 적용해서 하고 있습니다.

그다음에 로그인을 붙여야 하는데 물론 장고는 기본적으로 세팅하면 슈퍼유저를 만들 수는 있지요.

그런데 이왕 기존 데이터베이스가 있는데 거기에 기존 어드민이 있기 때문에 사용자 정보도 있고 암호도 당연히 있고 사용자별로 어떤 정보를 액세스할 수 있는데 권한 정보도 다 있어요.

굳이 이것을 새로만들 필요가 없잖아요.

기존 시스템에 로그인 인증을 사용해왔습니다.

그래서 장고에서 제공하는 어센션케이션백엔드라는 것을 사용하면 커스텀 백엔드를 로그인 인증에 사용할 수 있고요.

그래서 코드 양이 많아지니까 먼저 기존 레거시 데이터베이스에서 사용자 정보를 찾습니다.

그다음에 그 사람의 입력받은 암호랑 데이터베이스에 저장되어 있는 암호랑 확인하고, 권한을 확인하고 이 사람은 로그인을 시켜줘야 되겠다고 판단이 되면 그 사람에 해당하는 사용자를 장고 데이터베이스에서 다시 한번 찾습니다.

장고 시스템을 운영하는 데도 유저 정보가 필요하기 때문에 중복이기는 하지만 그대로 사용하기로 했고요.

그런데 처음 로그인을 하는 경우에는 유저 정보가 없기 때문에 이렇게 새로운 유저를 등록을 해주었습니다.

그래서 스태프여야 장고 어드민을 사용할 수 있기 때문에 툴로 해주고요.

이제 이대로 장고를 띄우면 뜨긴 뜨는데 내용이 없겠지요.

장고 어드민 사용하신 분은 아시겠지만 각 모델에 해당하는 모델 어드민을 등록해줘야 합니다.

그래서 차례대로 저희가 사용하는 모델들, 지금 레거시 데이터베이스에서 인스펙트디비로 생성된, 자동으로 생성된 모델들을 쭉 이렇게 나열하고요.

나열을 하면 되는데, 아까 말씀드렸다시피 저희는 테이블이 200개가 넘기 때문에 200개가 넘게 이어지는 것이지요.

사실 처음에는 그냥 복사 붙여넣기를 열심히 했었는데 생각해보니까 내가 왜 복사 붙여넣기를 하고 있지라는 생각이 또 들더라고요.

이러면 안 되겠지요.

그래서 사실 제가 하려면 의도는 모델스파이에 자동으로 생성된 모델을 전부 다 등록하고 싶었어요.

그래서 파일 인스펙트라는 모델이 있는데 이것은 모듈, 어떤 모듈에 들어있는 클래스들이라든가 아니면 이런 것들을 다 읽어주는, 읽어서 우리가 실시간으로 코드에서 사용할 수 있게 해주는 그런 모듈인데요.

예를 들어서 이렇게 쓰면 앱스코어 모델스라고 들어있는 모델 중에서 클래스인 것들을 전부 반환해주는 함수가 이것이고요.

함수는 그 클래스 이름과 클래스 객체를 네임밸류의 리스트로 반환해줍니다.

그래서 이렇게 하면 리스트가 나오는데 그중에서 베이스클래스가 모델인 경우, 그러니까 모델 클래스인 경우에 한해서만 이렇게 리스트로 뽑아내는 코드고요.

그래서 이렇게 하면 모델스파이에 들어있는 것을 모두 얻을 수 있습니다.

하나씩 레지스터를 해주면 되겠지요.

그래서 짜잔 하고 장고 어드민이 완성되었어요.

그래서 보면 저희가 저희 적나라한 내부 시스템이 드러나서 제가 모자이크 처리를 급하게 했는데 익숙한 장고 화면이 나오고 실제 데이터베이스에 들어있는 내용을 쉽게 확인할 수 있어요.

그래서 유저를 봤더니 유저 목록이 나올 줄 알았는데 장고 어드민 디폴티로는 다 어떤 모델 이름 다음에 오브젝트만 나와요.

이것을 바꾸려면 몇 가지 방법이 있는데 보편적으로 하는 것은 어드민을 커스터마이징하는 것이지요.

그래서 이것은 장고 어드민으로 한 번이라도 작업해보신 분은 다들 굉장히 익숙하신 부분일 것 같은데요.

예를 들어서 저희가 대출시스템을 하다 보니까 대출계약을 예로들어보면 고객의 네임으로 검색하고 목록화면에는 아이디, 이름, 상태 이런 정보를 하고, 상태로 필터링을 하게 한다든가 이런 식으로 손쉽게 커스터마이징를 할 수 있습니다.

실제로 이런 식으로 커스터마이징을 많이 하고 있고요.

그런데 문제는 저는 아까 말씀드렸다시피 200개가 넘는 모델을 자동으로 하고 싶고, 하지만 아까처럼 오브젝트라고 안 예쁘게 나오는 것은 싫었어요.

어떻게 할까 생각하다가 최소한으로 목록화면이라도 예쁘게 보였으면 좋겠다.

그래서 이 리스트디스플레이라는 속성만이라도 전부 적용해보고 싶었습니다.

비슷한 생각을 하는 사람이 많아서 검색해보니까 역시 좋은 코드가 많이 있더라고요.

그것을 정리해서 앞서 말씀드렸다시피 모델마다 모델 어드민 클래스를 만들어야 하는데 클래스를 만들어주는 함수를 만들었습니다.

여기 나오는 타입이라는 함수가 파이썬에서 클래스를 만들어서 그 클래스를 리턴해주는 함수인데요.

느낌이 오실 거예요.

첫 번째 인자가 만드는 클래스 이름이니까 우리는 그 모델 이름뒤에 붙여서 만들고 클래스는 모델 어드민이라는 것을 상속받아 만드는 클래스고요.

그래서 리스트플레이에 뭐를 보여줄까 했는데 일단 간단하게 이 모델의 모든 필드라도 리스트디스플레이로 설정해보았습니다.

필드가 너무 많은 경우에는 적당히 자를 수도 있을 것이고요.

그다음에 이것을 앞에서 말씀드린 코드에서 모델 클래스를 불러왔으니까 쭉 돌이면서 어드민 레지스터를 할 때 모델하고 모델 클래스가 루프마다 만들어져서 등록하게 하면 되는데요.

간단한 커스터마이징 말고 진짜로 내가 더 커스터마이징을 하고 싶은 부분이 있을 테니까 손으로 코드라도 짜고, 그러면 여기 등록이 하나씩 차례대로 되고요.

이렇게 자동으로 생성하는 부분은 이 레지스터리에 들어있지 않은 것만 자동으로 생성하게 하였습니다.

짜잔하고 예제를 보면 저희 실제 서비스에 저희 회사에 관한 홈페이지에 보면 관련 기사 이런 것 있잖아요.

언론보도.

그것을 실제로 이렇게 확인할 수 있는 화면이고요.

아까 유저 오브젝트 이렇게 나오는 것보다 훨씬 보기 좋고 실제로 내가 필요한 내용을 편집하기도 좋겠지요.

그리고 여기까지 이 모델에 대해서 아무런 정보도 주지 하였지만 자동으로 만들어진다는 것이 포인트가 되겠습니다.

여기까지 재미있으신가요?
그래서 이게 하다 보니까 여러 가지 문제들이 생겼는데 가장 대표적인 것이 문자의 필드를 얘가 모두 필수필드라고 생성하는 것이에요.

인스펙트디비는 얘가 필수인지 아닌지 알 수 없으니까 무조건 필수라고 하는 것이지요.

필수가 아닌 것에도 무조건 값을 넣어줘야 저장이 가능해져서 고민하다가 일단 커스터마이징 필요한 것은 수동으로 하고 기본적으로 모두 필수아님으로 해보려고 합니다.

일단 가장 생각이 나는 것은 인스펙트디비한 결과물을 이렇게 표현으로 다 바꿔서 블랭크 트루를 넣어주면 되거든요.

아름답지 않죠.

파일성 코드도 아니고.

그래서 어떻게 해야 하지?

인스펙트디비를 뜯어고칠까하고 깃헙에 가서 파일을 찾기 위해서 T 누르고, 사실은 인스펙트디비 소스코드를 보고 싶었는데, 옆에 보니까 똑같은 이름의 파일이 있는 거예요.

열어봤는데 기존 것을 확장하는 것 같더라고요.

역시 또 찾아보니까 다 확장이 가능하더라고요.

그래서 장고 문서에 확장하는 방법에 대한 문서도 있고요.

기본적으로 파일명이나 함수이름이나 클래식 규칙을 지켜주면 됩니다.

상속받은 다음에 함수 먼저 부르고 필드가 문사형 필드이면 블랭크 트루로 살짝 넣어주면 자동으로 모든 필드가 필수아님이 됩니다.

블랭크 트루가 되는 것이지요.

이렇게 확장할 수 있으니까 기분이 좋잖아요.

그래서 좀 더 해볼 수 있는 것 없을까 하다가 이것도 많이 쓰시는 기능일 텐데 저희는 레코드가 생성된 일시를, 내부적으로 쓰고 있었어요.

필드의 이름이 이것이면 오토나우, 장고에서 제공하는 것을 넣어주는 기능을 붙여봤어요.

역시 아주 손쉽게 잘 되고 굉장히 기분이 좋았습니다.

또 문제가 있었는데, 저희 기존 시스템을 mysql를 사용하고 있었는데 불린을 비트1이라는 것으로 표시하고 있었어요.

그런데 텍스트필드라는 것이에요.

어드민에서 열어보면 엄청 커다란 텍스트가 나와요.

이것을 어떻게 해결해야 할까.

뭔가 확장해서 해결해야겠죠.

그래서 많이 예상하실 수 있있지만 사용자 필드를 만들자.

그래서 비트1이라는 바이트를 인식하는 커스텀필드를 만들어서 이것을 인스펙트디비에서 비트1이면 이것은 데이터베이스마다 타입 코드가 비트이고 1이면 아까 말씀드린 비트1이 됩니다.

그리고 mysql에서 또 불린을 쓰면 내부적으로는 사이즈1인 필드가 돼요.

그래서 모두 통일해서 제가 만든 커스텀 불린 필드로 사용을 하도록 했습니다.

그런데 나중에 알고 보니까 장고에 붙여서 쓰는 장고 mysql라는 패키지가 있는데 비트1불린필드라는 것이 있더라고요.

지식이 부족하면 제가 써야 하는 코드의 양이 늘어나는 거죠.

여기까지 쓴 파이썬 코드를 보면 코드를 굉장히 많이 보신 것 같지만 거의 모든 코드를 보여드린 것이거든요.

로그인 처리 하는 데 10줄, 전부 다 100줄이 안 되는데 그렇게 나온 결과물은 저희 실서비스에서 굉장히 유용하게 활용할 수 있는 , 물론 간단한 것이기는 하지만 어드민이 만들어졌습니다.

그래서 회고를 좀 해보면 일단 저희 레거시 시스템이랑 공존할 수 있는 어드민을 만드는 데는 성공했어요.

보셨으니까 아시겠지만 기존 레거시 시스템은 아무것도 건드리지 않았고 아무 영향도 주지 않았거든요.

그리고 장고 연동을 했으니까 이것을 기반으로 여러 가지 장고에 좋은 기능을 사용해서 많은 서비스를 만들 수 있겠죠.

가장 힘들었던 부분은 배포 환경을 설정하는 것이었는데 PIP로 아무리 깔아도 안 깔리더니.

그리고 또 생각을 해보면 역시 코드 몇 줄 안 쓰고 날로 먹으니까 굉장히 기분이 좋았고요.

인상깊은 것은 장고가 확장이 쉽다.

확장할 수 있는 포인트가 정말 많다.

그래서 복사붙여넣기를 하다가 뭔가 있을 텐데, 하고 찾아보면 진짜 항상 있는 거예요.

그래서 그런 것에 정말감동을 많이 받았습니다.

물론그렇다고 해서 또 복사 붙여넣기를 다 대체할 수 있느냐이것은 때에 따라 다를 것 같지만요.

여기까지고요.

마지막으로 저희 렌딧에서는 소프트웨어 엔지니어와 데이터 엔지니어를 모시고 있으니 관심 있으신 분은 관심 부탁드립니다.

감사합니다.