https://www.youtube.com/watch?v=4wEFo7L2zRc

안녕하세요? 

저는 '나도 할 수 있다, 오픈소스!'라는 주제로 발표를 하게 된 강효준이라고 합니다.

지금 제가 너무 떨려서 점심을 먹지 못했습니다. ㅎㅎ

저는 프로그래밍을 처음 배우기 시작하면서 오픈소스가 참 멋있고 정말 재미있는 일이라고 생각하게 되었습니다.

그래서 회사 일을 같이 하면서 오픈소스를 같이 진행하고 있는데요.

파이콘 한국 2017에서 진행했었습니다.

이번 년도에도 진행했었는데 정말 많은 분들이 참여해주셔서 감사하게 생각하고 있습니다. 

제가 처음 파이썬 패키지를 배포할 때를 생각해보니까 

혼자 해보려고 하니까 복잡해보이고 어려운 일들이 많게 느껴졌어요.

그러다 보니까 오픈소스 하기가 좀 어렵게 느껴진다는 생각이 들었고요.

그리고 이제 배포를 하고 코드를 관리하다가도 테스트를 받는 과정에서도 

리뷰를 어떻게 해야 될지 몰라서 어려움을 느꼈어요.

그래서 회사 동료하고 같이 하면서 보니까 파이썬패키지가 거의 비슷하기도 하고 복붙을 하고 있더라고요.

그러다 보니까 처음 배포해주시는 분들도 한번 하고 나면 쉽게 하시더라고요.

그래서 이 발표를 들으시고 같이 진행해보실 분들이 없더라도 조금 더 쉽게 진해해볼 수 있으면 좋겠다고 생각했습니다. 

이 발표를 준비하면서 회사 동료분이 자료를 하나 추천해주셨는데 

김중기 님께서 파이콘 APAC 2018에서 패키지 워크숍을 진행하신 자료가 있어요. 

거기 참고하시면 좋을 것 같습니다.

그리고 코드 관리를 잘 하기 위해서 자동화 할 수 있는 부분들에 대해서 제가 또 소개해보려고 합니다.

발표하면서 제가 이야기하고 싶은 부분들에 대해서 미리 정리를 해서 패키지를 이미 배포를 해놨어요.

셋업 함수 안에는 정말 많은 정보들이 들어가요. 

배포에 필요한 정보들이 들어가고 패키지에 필요한 설명, 그리고 많은 정보들이 들어가 있습니다. 말이 좀 빠른가요?

이렇게 많은 정보들이 있는데 제가 이걸 다 설명해드릴 수는 없고 

제가 많이 사용했던 옵션들만 추려서 말하려고 합니다.

처음으로 패키지 이름과 작성자 정보에 관한 정보입니다.

패키지 이름은 네임을 적습니다. 

이 패키지 이름은 파이썬 모듈 안에서 사용하는 이름과는 별개니까 주의해주시면 좋을 것 같습니다.

Author는 이름을 넣는 거고 Author Email은 이메일인데요.

지금 보시면 문자열이 이상하게 띄어져 있는 걸 볼 수 있는데 

이건 구글 같은 데에서 찾아서 보낼 수 없도록 해킹을 한 건데 잘 먹히는 방법인지는 모르겠어요.

패키지에 대한 설명은 디스크립션 혹은 롱디스크립션에 적습니다.

디스크립션은 패키지에 대해서 한 줄 정도 되는 짧은 설명을 적는 거고요.

롱디스크립션은 긴 설명을 적는데 보통은 리듬이나 뭐 그런 파일들을 보통은 적어주고요.

그런데 최근에 롱디스크립션이 RST뿐만 아니라 다른 것도 지원하게 되면서 다른 패러미터도 같이 생겼습니다.

그래서 마크다운을 사용하시고 싶으시다면 롱디스크립션 타입에 텍스트마크다운이라는 것을 넣어주시면 됩니다.

이런 식으로 롱디스크립션을 씁니다.

그 다음에 이제 패키지에 라이선스를 고를 수 있는데요. 

어떤 라이선스를 사용하실지 고민이 되실 것 같아요.

그런데 셋업툴즈에서도 나와있는 내용인데요. 

이런 곳에서 들어가셔서 라이선스 선택에 도움을 받을 수 있습니다.

그래서 여기서 고르실 수 있습니다.

지금까지는 이 정도의 셋업인자들을 채워넣었습니다.

패키지는 당연히 버전도 적어질 수 있는데요. 

버전을 적는 규칙은 유의적 버전하고 비슷하게 작성해주시면 됩니다.

사실 이 부분에 대해서는 다음에 좀 더 자세하게 다뤄보겠습니다.

그리고 url이라는 인자도 있어요. 

이건 패키지를 잘 설명할 수 있는 url를 적어주시는 게 좋아요.

사실 버전을 적는 규칙에 대해서 PEP가 있을 줄 몰랐는데 

PEP396에 버전 넘버를 어떻게 적는지에 대한 스펙이 정의가 되어 있더라고요.

패키지 버전을 패키지 안에 포함시키고 싶다면 언더바 언더바... 이렇게 정의해주셔야 돼요.

이때 규칙은 PEP440에 나와있는데 뭐 이런 저렇게 해주시면 되고 숫자가 아닌 문자열이어야 하고요.

VCS나 이런 데서 제공하는 번호가 포함되어서는 안 됩니다.

그다음에 setup.py의 버전 인자를 가지고 오시거나 setup.py에 정의되어 있는 버전의 정보로부터 

언더바 언더바 버전의 정보를 채워주셔야 한다고 설명하고 있어요.

그래서 보통은 저는 최상위 패키지에 저런 변수를 넣어서 리포트를 해주는데 이 방법도 사실 문제가 조금 있습니다.

가령 인잇점파이가 다른 모듈을 임포트하고 있는데 

표준 라이브러리 외에 다른 것을 임포트하는 모듈을 임포트하고 있다면 

setup.py를 실행하다가 에러가 나는 경우가 있어요.

왜냐하면 setup.py가 특정 라이브러리를 설치하려고 할 때 패키지를 실행하게 되면서 

그 라이브러리를 찾을 수 없어서 에러가 나게 되는 거죠.

그래서 저는 이 문제를 해결하기 위해서 ast모듈을 가지고 와서 하게 되는데요.

사실 이 코드는 제가 여러 패키지에 걸쳐서 그냥 복붙해서 쓰고 있습니다.

그리고 다음은 이제 패키지 의존성과 관련된 내용인데요.

패키지 의존성을 해결하기 위해서는 packages 혹은 pymodules 라는 인자에 해주면 됩니다.

pymodules 같은 경우는 패키지 크기가 크지 않거나 할 때 하는 용도로 사용하고 있고요.

packages같은 경우는 패키지가 커지거나 할 때 여러 패키지를 넣을 수 있게 되어 있습니다.

사실 packages라는 인자를 사용할 때는 find_packages라는 셋업툴즈가 있어요.

그래서 그걸 사용해서 찾을 수 있게 코딩을 하고 있습니다.

다음은 classifiers라는 인자인데요. 이건 패키지의 분류 정보에 대해서 적어줄 수 있는 인자인데요.

classifiers 같은 경우에는 이런 식으로 보여지게 되어 있어요.

그러다 보니까 자세히 적어주시면 검색이 잘 되는 효과도 있고 해서 홍보하는 데 참 많이 도움이 됩니다.

이 정보들은 여기 파이피 홈페이지에 리스팅되어 있으니까 찾아서 사용해주시면 될 것 같습니다.

다음은 entry_points 라는 인자인데요. 사실 이건 다이나믹디스커버리라는 기능을 지원하기 위해서 있는 인자예요.

이게 뭐냐 하면 다른 라이브러리에서 인포트 가능한 entry_points를 만들어서 플러그인처럼 쓸 수 있게 만드는 건데 

이 기능보다는 일단 저는 콘솔스크립트를 먼저 소개해드리고 싶습니다.

이 기능을 사용하면 개인화된 명령어를 만드실 수 있고요.

그렇게 만드시면 이런 식으로 쉐어되어서 자신의 라이브러리를 사용하실 수 있게 됩니다.

그래서 leftpad 예제에서도 저런 식으로 콘솔스크립트를 만들어서 넣어놨어요.

패키지 의존성들은 인스톨 리콰이어즈, 테스트 리콰이어, 엑스트라 리콰이어 이렇게 세 개가 있는데요.

install_requires는 패키지를 설치하면 자동으로 깔리는 데 반해서 

tests_require나 extras_require는 이런 식으로 추가적으로 설치를 진행해야만 합니다.

그래서 만약에 테스트에 필요한 하이테스트 같은 라이브러리는 tests_require에 넣어서 처리하실 수 있고요.

암호와 관련된 확장기능을 만들었다 하면 크립토와 관련된 것을 만들어서 거기에 리스팅할 수도 있겠습니다.

제가 setup.py의 인자를 적는 걸 열심히 설명했는데 사실은 setup.cfg가 생겼어요.

저도 이번에 리서치하면서 알게 됐거든요. 

이걸 사용하면 메타 데이터들을 다 담을 수 있습니다. 

그래서 예제를 보시면 이런 식으로 되어있는데요.

제가 아까 패키지 메타데이터 같은 것들을 적기 위해서 막 함수도 만들었고 했는데 

사실 보시면 버전은 저런 지지자들이 있어요. 

저런 것들을 사용할 수도 있고 또 파일 지지자도 있고요.

아무래도 불필요한 코드를 적지 않게 되니까 간결해보이는 효과가 있습니다.

그래서 setup.py는 다 작성을 완료했고요.

그다음에 이제 배포를 하려면 PyPI에 들어가서 배포를 해야 되는데 얼마 전에 PyPI.org로 이전을 했습니다. 

그래서 지금은 디자인도 예쁘고 멋진 사이트가 됐어요.

일단 배포를 하시려면 가입부터 해야 되는데 

이 정보로 이제 패키지의 권한이나 업로드 같은 걸 하실 수 있으니까 

먼저 이걸 가입을 하시고 이 계정을 파이피알씨라는 걸 해주시면 업로드 할 때마다 

계정정보를 입력하지 않아도 되니까 편하게 업로드할 수 있어요.

그래서 PyPI까지 가입을 하시고 파이피알씨 설정을 하시고 업로드를 할 수 있는 상태가 되면 

명령어로 배포를 하실 수 있는데 이렇게 배포하셔도 특별히 문제는 없어요.

그런데 더 좋은 방법들도 존재하거든요. 일단 휠이라는 걸 소개를 해드리려고 해요.

휠은 이제 이 명령어에 대해서 설명을 하자면 

휠이라는 것은 기존에 egg 포맷, 그러니까 이 배포파일을 대체하는 포맷입니다.

장점들이 몇 개 존재하는데요. 

윈도우나 맥에서 패키지 관련된 것을 설치할 때 gcc 같은 컴파일러가 필요없어요.

그래서 좀 더 CI와 테스트를 위해 좀 더 나은 캐시와 지원을 할 수 있습니다. 

그리고 설치할 때 setup.py를 실행하지 않기 때문에 

악의적으로 나쁜 코드를 넣었을 때 그걸 실행하지 않아서 회피할 수 있는 거죠.

이런 식으로 차이가 몇 가지 있는데 제가 슬라이드를 만들다 보니까 

시간이 너무 넘치는 관계로 이건 넘어가겠습니다.

그래서 이제 휠도 명령어를 치신 후에 이런 식으로 넣으시면 PyPI 패키지를 볼 수 있는데 

보통 휠파일을 패키지 이름, 뭐 이런 식으로 올라가게 됩니다.

그래서 두 번째로는 트와인이라는 라이브러리를 소개해드리려고 해요. 

이건 새로운 파이썬 패키지 배포 도구인데요.

파이썬 버전에 상관없이 HTTPS를 사용해서 업로드합니다.

그리고 키링 같은 도구와 같이 사용 가능한데 

좋은 점은 OS에서 지원하는 패스워드 저장 프로그램이랑 같이 엮어서 쓸 수 있어요.

키체인이라는 프로그램이 있고 윈도우에는 윈도우즈프레덴셜 마커라는 프로그램이랑 쓸 수 있기 때문에 보안상 더 좋습니다.

그래서 사실 배포파일은 동일하게 만드시면 돼요. 

파이톤 setup.py 하고 휠까지는 똑같이 하시고 업로드만 트와인 해서 사용하시면 돼요.

트와인을 사용하게 되면 테스트 용도로 만들어진 테스트로도 업로드를 할 수 있는데요. 

그래서 이런 인자를 주게 되면 테스트 pip에 업로드를 할 수 있습니다.

이제 이렇게 하면 업로드까지 끝나서 PyPI에서 패키지가 배포가 되고 

누구든지 패키지를 깔아서 쓸 수 있는 상황이 되었습니다.

그런데 제가 한 가지 더 이야기하고 싶은 게 생겼어요.

결국 오픈소스니까 다른 사람들, 그러니까 제가 알지 못하는 모르는 사람들하고 협업을 하게 되는 경우가 생기고 

또 이런 것이 오픈소스의 가장 큰 장점이라고 생각합니다.

그래서 코드 작성 시 도움이 될 만한 것들을 제가 공유하려고 합니다.

그리고 깃허브에서 기여하는 방법을 알려드릴 수 있도록 콘트리뷰팅 문서를 하고 있습니다.

그래서 이런 문서가 있을 정도로 격려를 하고 있고요.

그래서 이런 식으로 컨트리뷰팅 문서가 없으면 적으라고, 만들어달라고 요청하기도 해요.

그래서 컨트리뷰팅 파일 만들어서 가이드라인을 적어주시는 게 기여하시는 분들이 오픈소스를 기여할 때 

어떤 부분을 신경쓰면 되는지 알려줄 수 있기 때문에 정말 좋습니다.

아톰의 기여가이드를 베스트로 소개하고 있는데요. 

보면 CoC부터 어떤 코딩스타일을 지켜야 하는지, 

어떤 식으로 이슈를 찾으면 되는지 정말 좋은 가이드를 해주고 있습니다.

그래서 이건 아톰에디터의 컨트리뷰팅 파일을 가지고 온 거고요. 

그리고 이제 깃허브에서 또 Pull Request 템플릿이라는 기능을 했어요.

이걸 자동으로 채워줬으면 좋겠는 것을 적어주는 내용인데 생성해서 넣으면 해당 내용이 자동으로 채워지게 됩니다.

이런 식으로 되는데요. 

오른쪽에 보이시죠?

실수하기 쉬운 부분에 대해서 가이드를 해줄 수 있고 기여자가 기본적으로 지켜야 할 부분들을 

한 번 더 체크할 수 있게 해주는 부분도 있습니다. 

또 메인테이너는 리뷰하는 데 필요한 기능을 놓치지 않고 할 수 있고 기여가이드에 적혀있지만 놓치기 쉬운 규칙들도 있잖아요. 

그런 것들을 다 관리해줄 수 있기 때문에 좋은 부분들이 있습니다.

그리고 패키지에 변경기록을 항상 적게 격려하는 방법도 있습니다.

패키지를 사용하다 보면 버전 업데이트가 되면 어떤 기능이 추가되고 삭제되는지 체인지로그를 자주 읽게 되잖아요.

그런데 이게 사실 조금 귀찮게 느껴지기도 하고 밀린 일기 쓰듯이 한번에 적으려고 하면 사실은 저도 잘 안 적습니다.

그래서 CI에서 항상 체인지로그를 적도록 유도할 수 있는데요.

이런 간단한 대쉬스크립트를 넣어서 체인지로그를 올렸는데 변화가 없다면 그 PR를 할 수 있도록 이런 식으로.

그리고 귀찮은 일을 미룰 수 있는데 아까 트와인 업로드 이런 명령어를 패키지 업로드 할 때마다 하는 건 정말 귀찮은 일 중의 하나예요.

그래서 오픈소스 할 때 많이 쓰는 CI서비스들은 깃의 기능을 이용해서 릴리스 할 수 있도록 도와줍니다.

깃허브 릴리스도 할 수 있고 PyPI에도 자동릴리스 기능을 제공하고 있습니다. 

그리고 배지라는 부분이 있는데요.

이건 아까 말씀드린 CI서비스나 문서 사이즈, 코드커버리지 사이트 등 여러 가지 배지를 달 수 있는 건데 

내가 이런 서비스들을 사용해서 이런 패키지들을 관리하고 있으니까 패키지 정보를 확인해봐라, 이런 식으로 보여주는 거거든요.

일단 좀 이게 있으면 예뻐요.

제가 관리하고 있는 리드미라는 언어의 배지인데요.

보시면 에러가 나고 있는데 업스트림에서 빌드가 에러가 나고 있으니까 이 패키지는 사용하지 말아야겠다. 하고 결정할 수도 있겠죠.

그리고 이제 거의 마지막 내용인데 아시는 분들은 아시겠지만 

플립테스트를 달릴 때 여기 나열되어 있는 단어들과 함께 이슈번호를 적으시면 자동으로 이슈가 같이 따라써져요.

그래서 여기 오른쪽에 보시면 제가 써놨는데 그러면 #9번 이슈가 자동으로 되는 거죠.

여기까지 발표는 끝이었고요. 

매장과 고객을 세련되게 연결하다라는 미션을 가지고 스포카에서 같이 일하실 프로그래머 분들을 모집하고 있습니다. 

관심있으시면 메일 보내주세요. 

감사합니다.

