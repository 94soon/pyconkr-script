안녕하세요.

여러분.

반갑습니다.

제가 아마 재미있을 거라고 생각하고..

마이크가 이쪽에 있는 걸 봤는데.

반갑습니다.

안 반가워요?

쟁쟁한 후보들을 103호말고 다른 세션들을 포기하시고 저의 세션에 찾아와주셔서 대단히 감사합니다.

성원에 힘입어서 제가 오늘 최선을 다해서 여러분께 제가 가진 지식을 전달해드리고, 재미있게 들을 수 있도록 준비를 했으니까 기대하셔도 좋고요.

PyQt를 만드는 웹기반 데스크탈 어플리케이션라고 제목을 지었는데..

사실 제가 검색을 굉장히 많이 해봤는데 이거에 대한 정확한 제목을 못 짓겠으니까 들어보시고 이거는 뭐다!라고 큰소리로 외쳐주세요.

약 40분 동안 발표를 진행할 거고요.

시작하도록 하겠습니다.

드랍더빗

안녕하세요.

저는 임덕규입니다.

자랑할만한 이력은 없고 잘하는 게 뭘까? 해보니까 동영상처럼 제가 애교를 정말 잘 부려요.

잘 부리는 애교를 가지고 왔습니다.

보시는데 거북함이 있으시겠지만 참고봐주시고요.

저는 소프트웨어를 만들고 있습니다.

파이콘2015에서 업무에서 빠르게 사용해서 만드는 PyQt 프로그래밍.

PyQt로 삼년째 약을 팔면서 파이콘에 참여하고 있고요.

이게 잘 먹히네요.

다양성을 지향해서 그런가 잘 됐어요.

이 발표를 왜 하게 되었는가.

설명해드릴 건데.

발표를 왜 하게 되었나.

그다음에, 이 발표에서 핵심적인 PyQt, 큐티진영에서 쓰이는 위젯 두개하고 질문과 답변을 받겠습니다.

발표 난이도가 중급으로 돼 있잖아요.

중급으로 측정하기에는 애매모호한 게 있어요.

PyQt 사용..

여기 계시는 분들이 제가 앞서 2년 동안 발표를 초급에서 살짝 위에 거를 했었고요.

이번에는 발표 대상자를 Qt나 파이썬, 그리고 PyQt를 써봤다.

그다음에, 적어도 웹에서 HTML, Javascript를 조금이라도 해볼줄안다고를 전제로 해서 중급으로 잡았고요.

어려운 주제는 아닌데, 제가 설명을 꼬아서 할 거기 때문에 난이도는 중급으로 잡았습니다.

저는 여기 오신 분들이 발표를 40분 동안 진행을 하더라도 제가 발표하는 모든 것들을 잘 전달을 해줄 수도 없을 뿐더러.

여기 계신 분들이 제가 말하는 것들을 처음에 들었을 때는 이런 게 있구나하시고 말게 되잖아요.

그래서 그런 거를 아쉽게 생각해서..

다 정리를 해놔요.

한번 검색해서 보시면 한번 정도는 뜰 거예요.

예제로 배우는 PyQt라고 해서..

기법을 통해서 모든 예제들을 다 공개로 해놓고 있습니다.

제가 왜 이 발표를 준비하게 됐는지에 대해서 설명할 건데.

2010년에 저의 길지 않은 개발 중에 2010년에는 Javascript가 보잘 것 없었어요.

지금처럼 휘황찬란하고 할 게 없었어요.

그런데 갑자기 2010년 이후에 들어오면서 Javascript가 눈부신 발전을 하게 됩니다.

눈이 좀 부셨나요? 사실 제가 원하는 게 불이 꺼져있고 강조가 돼야 하는데 그게 안 됐네요.

Javascript에 빅뱅이 일어나요.

빅뱅 제가 좋아하는데.

보시다시피 수많은 프레임워크가 등장하죠.

느끼실 분들도 느끼시겠지만 몇년 전부터 이 사람들이 굉장히 빠르게 뭔가를 뱉어내요.

프레임워크도 그러고 Javascript 자체도 엄청나게 발전했잖아요.

지금 이엠씨6인가요? 부족한 부분은 Javascript가 하고 있고.

말도 못할 정도로 현재 가장 핫한 것 중에 하나로..

보시다시피 제가 다 담지도 못 했어요.

Javascript 프레임워크를 다 담지도 못 했어요.

그러던 와중에 언제부터인가 그런 이야기가 들려오더라고요.

Javascript에서 Javascript 이용해서 네이티브 어플리케이션라고 말해야 되나.

어플리케이션를 만들 수 있다고 하더라고요.

윈도우지만 실행할 수 있다 Javascript가.

그 전에는 Javascript가 그 정도 되나? 했었어요.

왜냐하면 저는 웹 개발자가 아니었기 때문에 어떻게 상황이 돌아가는지 몰랐는데.

노드가 나오고나서 크게 웹이 변하더라고요.

그래서 일렉트론.

일렉트론 말고도 그외 다수 여러 가지가 있는데.

이런 데스크탑의 등장이라고 했는데 이게 아까 제가 말하는 오늘 발표 주제인데.

제가 두 가지 용어를 지금 적어 놓은 거는, 어떤 데에 가면 데스크탑 앱이라고도 하고 다른 곳에 가면 오늘 발표 주제처럼 그런 식으로 쓰더라고요.

웹기반의 데스크탑 어플리케이션.

한마디로 아직도 정의가 확실하지 않은 것 같아요.

여러 군데에 물어봤는데 다 말장난이에요라고 하더라고요.

중요한 거는 Javascript를 이용해서 프로그램이 나온다는 거죠.

이 말이 무엇이냐? 저희가 PyQt나 Qt나 파이썬이나 이런 거는 데스크탑에서 실행해서 쓰게 되잖아요.

그런데 Javascript는 웹에서 하게 되는데 이게 영역을 침범한다는 거예요.

침범은 그러고 확장한다.

첫 번째 아이콘 슬랙, 디스코드, 아톰에디터죠.

이 프로그램들을 많이 쓰시거나 아니면 한번 정도는 보셨을 거예요.

이 프로그램이 굉장히 수준이 높아요.

슬랙이 쓰실 때 이게 웹인가? 생각하시면서 쓰시는 분 계세요? 제 생각인데 없으실 것 같아요.

디스코드도 프로그램을 실행해서 켠거와 웹에서 쓴 거와 거의 일치하죠.

그리고 아톰에디터는 제일 좋은 것 같아요.

현재 나와있는 Javascript 웹 기반의 프로그램 중에서 제일 잘하는 것 중 하나인 것 같아요.

크로스플랫폼 데스크탑 앱이라는 게 등장했습니다.

Javascript이런 거를 이용해서 앱을 만들다기보다는 이거만 만들 수 있다는 시대가 아닌 것 같아요.

그러면 우리처럼 파이썬을 쓰는 사람들은 어쩌나? 생각했거든요.

그전에, 제가 파이썬으로 개발하다가 GUI를 하잖아요.

그런데 PyQt가 여러 제약적인 사항도 있지만 일단 제가 접해본 GUI 프로그램 중에서는 PyQt가 최선 중에 하나예요.

다른 것들은 문서도 옛날 거고 Tk 쓸 수는 없잖아요.

누구한테 보여주는데..

다른 것도 많기는 하지만 문서나 발전, 지속적인 발전을 위해서는 PyQt가 최선이고.

PyQt를 이용해서 나도 덩달아서 이 흐름에 합류하고 싶다.

해서 PyQt로 웹을 합쳐서 개발한 거를 생각하다가 생각하게 된 게, PyQt는 물론 훌륭해요.

훌륭한데, 써보신 분들 아시겠지만 나는 디자인이기는 하지만 전세계적인 디자인이죠.

전세대.

1세대, 2세대 전이고.

요즘 추세는 아까 나왔던 슬랙이나 디스코드의 디자인이라고 할까요.

요즘 추세가 이런 디자인이잖아요.

웹 디자이너들이 만들어놓은 개발자가 만들어놓은 환상의 콜라보.

그거를 우리가 같이 쓸 수 없을까? 해서 시작하게 된 거였고요.

아까 말씀드렸다시피, 우리가 PyQt를 쓰니까 하는 거고.

나쁘지 않은 개발환경이에요.

Qt 크리에이터가 있어야 되는데.

훌륭한 에디터들이 있고.

문서도 잘 돼 있는 편이고 그래서 나쁘지 않은 개발환경이고.

크로스플랫폼을 지원한다는 게 있는데.

말씀드렸다시피 전세대이고.

위젯이 부족해요.

이말인 즉슨, PyQt를 써서 뭔가를 개발할 때 우리가 스스로 위젯을 만들어쓰기도 하지만 남이 만들어놓은 것도 쓰고 싶어요.

그런데 남이 만들어놓은 거를 쓸 수 없어요.

쓸 수는 있지만 귀찮은 과정을 거쳐야 C++로 만들어진 거를 쓸 수 있는..

너무나 귀찮거고요.

어쨌든 위젯이 상대적으로 부족해요.

그러면 우리는 항상 주어진 위젯 가지고 만들고 보니까 디자인의 한계가 있다는 거예요.

그리고 처음부터 새로 만들어야 한다는 게 있고.

웹하고 접목시키면 어떨까? 해서 나왔는데.

PyQt웹으로 접목시키면 데이터 분석은 파이썬이 강세잖아요.

모듈도 많고, 요즘에 지원해 주는 것도 많아서 데이터분석하는 것도 하고, 표는 웹으로 하는 게 어떨까?
기존 익스플로러.

요즘에는 보기 힘든 말이지만 예전에는 이런 말이 많았어요.

이 홈페이지는 인터넷 익스플로러 8.0에서 최적화된 상태입니다라는 거.

그런 문구가 나오는 웹을 앱 형태로 전환할 수는 없을까?
한마디로 PyQt가 그거를 띄워줄 수 없을까? 그다음에 웹 라이브러리를 이용한 웹 개발.

어린이용이나 교육용 프로그램인 도구들 있잖아요.

그런 도구나 아니면 지쓰리.

웹 하시는 분들 보면 구글 차트라든가 기타 등등 구글에서 지원해 주는 예쁜 디자인들을 써먹을 수 없을까? PyQt를 접목해서.

그렇게 접근해봤고요.

이거는 오늘 핵심인데.

양옆에 있는 게 Qt고요.

가운데가 웹이에요.

웹하고 간단하게 하고 있죠.

어떤 블록을 불렀을 때 이 블로그에 대한 거를 가져오고.

Javascript이기 때문에 Qt하고 통신하려는 매개체가 필요하겠죠.

그런 거를 이용해서 Qt와 Javascript를 어떻게 합치냐가 오늘의 주제고.

이거는 기본적인 예제고.

웹을 메인으로 쓸 수도 있고요.

아까 말씀드렸다시피 아이전용 웹사이트를 옆에 창 같은 거 없애버리고 웹만 그대로 띄운 다음에 액티베이스를 걷어낸 거죠.

전용 앱이었는데 액티베이스를 걷어서 파이썬이 하도록 하고.

인터넷 익스플로러로 클라이언트가 전에 이야기했던 것 중에 하나가 버전이 너무 많아서 윈도우 버전이 제각각인데 그거를 다 맞춰줄 수 없다 하고 했는데.

이런 식으로 웹을 앱으로 바꿔주면서 문제가 해결이 된 거예요.

오늘의 주제처럼 이런 웹 기반 어플리케이션을 만들기 위해서는 웹 엔진이라는 게 있어요.

엔진을 보여줄 수 있는 Qt 위젯인데.

Qt를 하시는 분들도 처음 보시는 분들이 계실 수도 있고
이미 알고 있으시다고 말씀하실 수 있는데.

Qt4, Qt5 초기에 나왔을 때 말도 안 되게 빠르게 발전하고 있는 위젯 중에 하나예요.

두번인가 바뀌었어요.

그래서 저도 Qt4.0 세대랑 Qt5로 넘어오면서 쓰려고 하니까 너무 많이 바뀌어서 제가 찾아보고 공부를 하게 됐던 거거든요.

방금 사진 찍으셨지만 나중에 슬라이드 올라가니까 사진 안 찍으셔도 돼요.

세션이 끝나면 슬라이드 공개할 거니까 찍지 마시고요.

잠깐 살펴볼게요.

소스 다 공개해놓습니다.

보시면 되고요.

처음에..

잘 보이시죠?

Qt웹 엔진 비율을 해보고.

웹엔진을 인스턴스 만들어주고 유알엘을 설정해준 다음에 실행시키면 되는데.

이렇게 화면이 딱 떠요.

아까 이게 기본적인 폼에다가 Qt웹엔진을 띄워서 한 거고.

보시다시피 웹 뷰만 있기 때문에 아무 것도 없어요.

내가 유알엘을 바꿀 수 있는 것도 없고 네비게이션도 없고..

그냥 웹뷰만 보여주는 상태예요.

이게 기본이고요.

우리가 기억하실런지 모르겠는데, 웹을 개발하는 데에 있어서 엄청난 사건이 있었어요.

그 사건이 뭐였냐면, 파이어폭스에서 파이어버그 아세요? 

크롬이나 파이어폭스에 보면 기본으로 들어가 있는 개발자 도구 있잖아요.

개발자 도구가 물론 없었어요.

없어서 제가 웹같은 거 개발할 때는 다 찍었거든요.

그런데 어느 날 이런 웹을 디버깅할 수 있는 툴이 나왔어요.

그런데 방금 전처럼 제가 Qt 위젯을 띄워서 보면 그런 디버그를 쓸 수가 없잖아요.

디버그를 못 써요.

왜냐하면 저거는 그냥 웹뷰만 띄워진 거고 단축키는 아무 것도 안 먹고 아무 것도 할 수 없어요.

그러면 이 상태에서 디버그를 어떻게 하냐? 그 방법은 실행할 때 우리가 적혀있는 소스 코드 자체로 시스해서 저거를 메인 밑에 넣어주시면..

뒤로 가서 다시 보여드릴게요.

8000번을 열어줘요.

크롬에서만 가능해요.

Qt웹엔인은 크롬을 기반이라서 크롬으로만 쓸 수 있고, 실행했을 때 크롬으로 쓰라고 안내문구가 나와요.

그래서 디버깅을 할 수 있고.

이거를 실행한 거를 보여드릴게요.

너무 빨라서 확 지나가죠.

잠깐만요.

아까 처음에 보신 것처럼 Qt로 만들어진 거는 아무 것도 없어요.

주소를 이동할 수가 없어요.

그래서 저기 밑에 크롬으로 8000번에 접속해서 디버깅창에다가..

아!

디버깅창에다가 제가 윈도우 오픈해서 활성화한 뒤 셀프하면 이거를 쳐주면 뒤에가 바뀌게 돼요.

이런 식으로.

한마디로 이게 무슨 말이냐하면, 우리가 웹뷰를 쓰는 대신에 처음부터 끝까지 다 만들어줘야 된다 말이에요.

그런데 이 과정이 정의된 게 없었어요.

저도 다 찾아보고 삽질하면서 한 건데.

그러려고 오늘 발표를 준비한 거죠.

삽질을 같이 하자는 의미에서.

이거를 이용해서 처음에 해볼만한 게 무엇이냐.

간단한 웹 브라우저를 만들 수 있어요.

네비게이션바랑 상태바가 없었잖아요.

기본적으로 웹브라우저를 보면 있어야 될 거잖아요.

추가적으로 나만의 웹브라우저를 만든다고 하면 탭기능, 요즘은 탭기능이 기본이죠.

크롬이니까 파이어폭스를 보면 탭이 딱딱딱 있어서 여러 가지 웹페이지를 다 띄울 수 있고.

즐겨찾기가 따로 있다는 게 뭐지? 라는 생각이 안 드세요? 다운로드 페이지도 다운로드 창이 뜨잖아요.

파이어폭스 같은 경우에는 다운로드 페이지가 떠요.

크롬도 뜨나 모르겠는데.

이런 페이지를 우리가 사실은 다 만들어줘야 되는 거다가 되겠고.

소스가 조금 긴 편인데.

나중에 예제코드 보시면서 하시면 되는데 이거는 보여드릴게요.

따로 움직이지는 않고 이렇게 네비게이션을 위젯을 만들었어요.

따로 빼서 만드는 게 맞아요.

소스를 보여주시는 분들 보면 한 소스에 다 넣어서 가지고 오시는데 네비게이션툴바 다 따로 만들어서 하면 되고요.

주소창..

이렇게 넣어놓고 얘네들을 띄워주는데 아까 setURL 메소드가 있었잖아요.

URL로 바꿔달라는 코드.

거기다가 그거를 시그널로 띄워주면 여기서 주소를 치면 엔터를 치는 순간 여기로 넘어갈 수 있게끔 바꿔주시면 돼요.

setURL로 바꿔주시면 되고.

이거는 웹뷰에서 이 페이지에 로딩을 하고 있을 때 정보를 퍼센테이지를 저한테 보내주거든요.

시그널이 있거든요.

그거를 여기에 붙여주시면 퍼센테이지가 쭉 올라가는 걸 보실 수가 있습니다.

이렇게 바꾸시면 밑에 방금 보신 것처럼 바 올라간 거랑 뒤로 가는 거랑 이전 페이지에 있는 게 나오잖아요.

여기서 한 가지, 분명히 아까 다음으로 갔다가 백을 했는데 주소창이 안 바뀌었잖아요.

이런 과정도 다 만들어주셔야 돼요.

이런 과정들은 다 구현을 따로 해야 되는 거고 나중에 구현에 대한 리스트를 정리해놨거든요.

뭐를 해야 될지를..

웹 요청처리라는 게 있어요.

이게 뭐냐면, 우리가 웹에서 뭔가 링크를 누르면 어떻게 돼요? 링크를 누르면 새창이 새탭이 뜨거나 하잖아요.

그런 거에 대한 요청이 있어요.

그런데 공교롭게도 이걸로 웹브라우저를 만드는 거는 아니고 웹을 만든다고 해도 내가 요청코드를 해줘야 되는데..

여기를 보시면 웹엔진을 제가 상속받아서 쓰는데 크리에이트뉴라고 있잖아요.

이 코드를 상속받지 않으면 창이 안 떠요.

일일히 정해줘야 돼요.

새로운 창 생성 요구할 때 이거로 들어가라.

이런 식으로 구현을 따로 해 주셔야 화면이 뜨게 돼요.

이거에 대한 시연 보면, 예제는 동영상으로 준비를 안 했고요.

눌러보시면 팝업에 이렇게 뜨잖아요.

만약에 코드가 없게 된다.

그러면 눌러도 뜨지 않아요.

닫기 요청.

Javascript에 보면 윈도우 클로우즈가 있어요.

그거는 Javascript에서 윈도우를 다뤄달라는 요청을 했는데 이것도 말 그대로 우리가 구현을 해줘야 되는 부분이에요.

처리요청이 들어오면 창을 닫아달라고 해줘야 되는 부분이고.

심지어는 다운로드요청.

다운로드를 눌렀는데 아까처럼 리퀘스트가 있거든요.

그런 거에 대한 처리를 해 주거나 다운로드페이지를 따로 만들어주고.

플래쉬는 요즘에 잘 안 쓰지만 옛날, 아까처럼 아이 기반의 웹을 다시 앱으로 바꾸는 과정에서는 그런 웹들은 여전히 플래쉬를 쓰고 있더라고요.

그래서 플래쉬를 쓰는 웹은 다 허가해 주는 거를 깔아줘야 돼요.

그리고 경고창은 Javascript딴에서 띄워주는 거잖아요.

이런 것도 간단하지는 않은데, 사실 모든 방법을 통해서 우리가 원하는 대로 경고창을 바꿀 수도 있고요.

여기에 적혀있는 거를 보면 웹요청처리를 위해서는 상품을 받고 해당 시그널을 서로 이어줘야 그 요청들을 처리할 수 있다.

한마디로 웹브라우저를 만든다는 기분으로 하시면 돼요.

오늘 발표한 것 중에 제일 중요한 것 중에 하나인데, Qt 웹채널이라고 하고요.

PyQt하고 웹을 서로 통신하게 해줘야 되잖아요.

지금까지는 그냥 웹을 띄운 거고 이제는 Javascript를 통해서 웹을 나한테 보내거나 아니면 데이터를 보내고 주고 받고 하는 게 Qt웹채널이고.

펑션도 부르고 이런 역할을 해 주는데.

와이파이가 안 돼서 테더링을 해볼게요.

이것도 예제를 먼저 보면, 제가 Qt에서 텍스트 밑에다가 헬로라고 적었는데 밑에 보면 이 부분은 아까 디버깅 쪽이었고 Qt쪽에서 Javascript로 헬로우를 보내고.

웹에서 제가 Javascript로 Qt한테 석시드를 보내라고 한 거예요.

그래서 서로 데이터를 주고 받고 할 수 있다.

이거는 제가 한번만 더 시도를 해볼게요.

뜨네요.

웹채널을 사용하기 위해서는 웹채널을 여기 보시는 것처럼 등록을 해줘야 되는 부분이고요.

웹채널을 핸들러라고 해서 Javascript하고 통신하는 부분이 있고, 이거를 통해서 이쪽 텍스트를 보내고 텍스트를 받고 그렇게 해 주는 핸들러라는 게 있고.

핸들러를 웹페이지에 등록해 주는 거예요.

Javascript를 웹페이지에다가 억지로 넣어요.

밀어넣는 게 아니고 안에 미리 넣어둘 수도 있는데.

억지로 넣거나 미리 준비해놓거나 방법은 두 가지이고.

셋팅을 하고.

Javascript에 보면 이런 식으로 얘가 나중에 HTML에서 임포트해서 등록된 핸들러를 쓸 수 있거든요.

그래서 헬로우라는 게 있으면 그거를 보내고, 제가 버튼을 누르면 헬로우라는 메시지를 받아서 헬로우를 여기에 뿌려주고 잘 받았다고 석시드를 날려주고 이런 과정들을 여기에 해놓는 거예요.

지금은 코드가 단순하지만 이게 기본적인 코드거든요.

나중에 우리가 PyQt로 웹기반으로 어플리케이션를 만든다고 하면 이런 것들이 굉장히 길어지고.

구글 웹차트 같은 경우에 버튼을 누르면 이런 코드를 눌러서 PyQt하고 통신하게 만들어요.

제가 데이터를 준비해놓은 거를 데이터에 넣으면 이런 웹 Qt채널을 통해서 준비된 Javascript를 실행시켜서 그래프를 띄워준다든가 그런 식으로 가게 되거든요.

그래서 웹과 서로 해 주는 역할을 하고.

이 웹채널의 동작 개요를 잠시 보시면, 이렇게가 패키지예요.

특히 웹채널을 가지고 아까 핸들러.

이게 핸들러고.

핸들러 안에 기능을 넣는 거예요.

호출한다든가.

HTML에 웹채널을 넣어서 통신하게끔.

간단하게 말하면 이런 구조로 돼 있어요.

그다음에, 지금까지 제가 말씀드린 거는 이미 HTML 안에 제가 임포트를 다 해놨어요.

그러면 다른 방법으로 이미 다음이나 네이버나 이런 사이트에 바로 실시간으로 제가 만든 코드를 넣어서 할 수는 없을까?

이게 적어 놓은 거는 웹브라우저 사용과 아닌 경우를 분리이라고 있는데 제가 말한 경우는 실시간으로 돌아가는 웹사이트에 내 Javascript를 억지로 밀어넣고 Qt로 한다.

이 웹브라우저 사용가 아닌 경우를 분리는 뭐냐면, 기존에는 잘 돌아가고, 웹브라우저 실시간으로 코드를 넣어서 웹브라우저 사용이 아닌 경우를 분리한다.

이거는 예제를 보면, 소스가 긴데요.

들어오면, 계속 이 소스를 웹페이지가 바뀔 때마다 코드를계속하는 거예요.

우리가 보통 웹페이지에서 프린트 버튼을 누르면 Javascript도 그러고 윈도우도 표출하거든요.

이 윈도우는 브라우저한테 나한테 프린트 다이얼을 찍어달라는 요청을 하는데 지금 Qt웹채널로 만들면 그 요청을 처리할 수가 없어요.

왜냐하면 그거는 브라우저가 서로 통신하는 거지 Qt가 통신하려고 만든게 아니잖아요.

그래서 이거를 처리하려면 보시는 것처럼 윈도우를 오버라이트 해야 돼요.

그래야만 제가 Qt쪽에 다시 요청할 수 있거든요.

이거는 실시간을 웹페이지마다 이런 코드를 억지로 집어넣고 있는 거예요.

아까 서로 데이터를 주고 받는다고 했잖아요.

그런데 Javascript에서도 문자나 숫자는 그냥 넣을 수 있는데.

딕셔너리나 리스트.

딕셔너리나 리스트는 반드시 큐제이슨베일루나 큐제이슨도큐먼트.

이 코드를 지키지 않으면 서로 데이터를 주고 받을 수 없어요.

우리가 무슨 데이터를 정리해서 대량의 데이터를 묶어서 보내야 되잖아요.

문자를 하나씩 보내는 건 상관이 없는데 리스트나 딕셔너리를 보내야 될 때는 이렇게 해줘야 되고.

보시는 것처럼 데이터타입을..

잠시만요.

이거 어디갔지?

여기 큐제이슨도큐먼트라고 해서 베일루 에이, 비, 씨 이런 것들을 큐제이슨도큐먼트에 넣고 셋오브젝트한 다음에 보내야 받을 수 있게 되고.

그다음에 이 코드는 큐제이슨베일루는 제가 따로 만든 건데.

나중에 웹에서 데이터를 하게 되잖아요.

그러면 웹에서 데이터를 받게 되면 바로 볼 수 있는 게 아니고 제이슨으로 뜨는 게 아니고 큐제이슨베일루라고 해서 묶여서 들어와요.

그래서 열어보면, 계속 따야 돼요.

그게 귀찮아서 데이터를 뽑을 수 있게 해놨고요.

시연도..

여기 보시는 것처럼, 이게 지금 서로 미리 준비된 데이터를 웹으로 보내고 웹에서 다시 Qt로 보내주는 부분인데.

코드에서 자료를 받게 되면, 여기 큐제이슨을 돌려서 데이터를 돌려서 다 꺼내서 재조합해서 파이썬에서 쓸 수 있게끔 다시 만들어주는 거예요.

이런 식으로 써주셔야 되고요.

이거는.

타입을 지키지 않으면 한마디로 리스트나 딕셔너리는 반드시 큐제이슨이나 제이슨도큐먼트를 쓰셔야 한다는 거고.

오늘은 제가 긴장을 해서 사람들이 많아서 그런가 긴장을 많이 해서 버벅거렸어요.
