https://www.youtube.com/watch?v=wrWY2me281A

해외에도 두바이나 엔지니어 중에서도 외국에서 오신 분이 있고 옆에 그래프를 보시면 아실 수 있듯이 하이퍼커넥트는 빠르게 성장하고 있는 회사입니다.

정말 글로벌하게 일을 하고 있는 스타트업이라고 할 수 있겠죠.

저희 하이퍼커넥트의 핵심제품은 아자르인데요.

아자르가 기존에는 없던 소셜 디스커버리라는 새로운 카테고리를 만든 앱이라고 생각합니다.

전세계에서 알지 못했던 사람들이 아자르를 통해서 국가, 성별을 넘어 서로를 만나고 그들의 삶과 문화를 이해할 수 있게 되었기 때문인데요.

그뿐만 아니라 아자르를 즐겨보시는 분도 있으시면 아시겠지만 매우 즐거운 시간을 가지실 수 있습니다.

이런 아자르를 처음 들어보시는 분도 있으시겠지만, 이미 아자르는 전세계에서 많은 인기를 얻고 있습니다.

총 2억건 이상 다운로드 되었고요. 전세계 230여개국에서 사용 중입니다.

혹시 이런 나라 이름 들어보신 적 있나요? 각각 태평양, 인도에 있는 섬나라인데, 저는 그런 나라가 있는지 몰랐는데 아자르 유저들을 국가들을 통해서 알게 되었어요.

이런 전세계에서 모인 유저들이 지금까지 총 400억번의 매치를 했습니다. 매치라는 것은 아자르에서 두 명의 유저가 영상을 통해서 만나는 것을 의미하는데요.

400억이라는 것은 전세계의 인구가 다섯번씩 만난 셈이죠.

이런 매칭을 통해서 영상통화를 한 거까지 합치면 아자르는 매일 6천번 이상의 영상통화를 하고 있습니다.

매출 7위라는 의미있는 수준의 매출을 만들고 있고요.

주요 앱에 여러 번 피쳐링도 되었습니다.

아자르만이 하이퍼커넥트에서 여러분께 자랑하고 싶은 건 아니에요. 하이퍼커넥트는 본질적으로 기술 기반의 스타트업입니다.

그래서 창업 이후에 다양한 기술들을 하고 있는데요. 가장 중요한 것은 영상통화 기술입니다.

작년 아자르에서 150억건의 영상통화가 이루어졌습니다.

이는 10억 이상의 유저를 가진 페이스북 메신저의 기록과도 비교할 수 있는데요.

2천 3천건의 통화를 처리하고 있어요.

이런 방대한 건수를 바탕으로 서비스를 제공하는 거에 만족하지 않고 계속 통화 품질이라든지 유저 경험을 발전시키고 있고.

예를 들어, 지구 반대편에 있는 남미국가에 있는 여러 통신사 중에서 LTE, 3G 중에서 어떤 게 가장 좋은 데이터 품질을 제공하는지도 저희는 알아낼 수 있는 글로벌데이터를 가지고 있습니다.

영상통화뿐만 아니라 최근에는 모바일이라는 곳은 낮은 성능과 적은 메모리 환경인데요.

그런데도 딥러닝의 인퍼런스를 빠르게 돌릴 수 있도록 해서 서버에 데이터를 보내지 않고도 모바일에서 실시간으로 동작하는 인퍼런스 엔진을 만드는데 주요하게 하고 있고요.

그러면서 네트워크 비용도 아낄 수 있습니다.

이미지를 바탕으로 한 성별인식이라든지, 그런 것들이 이미 연구성과로 있고요.

아까 하이퍼커넥트 부스에서 저희 회사앱의 기술을 시연하고 있으니까 관심있으신 분들은 들려서 보셔도 좋을 것 같네요.

그런데 이런 질문을 하시는 분이 있을 것 같아요.

하이퍼커넥트는 아자르 하나만 하는 회사 아닌가요? 아자르는 Javascript기반이라고 들었는데 하이퍼커넥트에서도 파이썬을 쓸 일이 있나요?

아자르에서 Javascript를 쓰는 건 맞습니다.

우리는 처음부터 Javascript로 만들어서 파이썬을 만든 다음에 다시 자바로 만드는 일 없이 잘 하고 있다는 이야기도 한 적이 있긴 한데요.

그러나.. 하지만..

실제로 하이퍼커넥트에서 만들고 있는 것들은 아자르말고도 수없이 다른 제품들이 있었습니다.

물론 잘 알려진 건 아자르 하나뿐이에요.

하지만 그 그림자에서는 아마 수없이 많은 저희들이 시도를 했었거든요. 출시했던 다른 앱을 합치면 10개도 훨씬 넘을 겁니다. 눈물을 닦아야 될 것 같은데..

이렇게 다양한.. 제가 말씀드리고 싶은 거는 다양하게 시도했던 프로젝트에서 아주 많은 부분을 파이썬을 이용했습니다.

왜냐하면 파이썬을 씀으로써 더 생산성있게 유저가 원하는 것을 빠르게 만들 수 있었기 때문이죠. 이뿐만이 아닙니다.

이거는 저희 아까 소개해드린 아키텍쳐의 간략한 모습인데요.

여기에 있어서도 파이썬이 중요하게 사용되고 있습니다.

머신러닝을 잘 하기 위해서는 많은 분들이 아시겠지만 좋은 데이터가 많이 필요합니다. 그러기 위해서는 데이터가 중요한데.

아시다시피 코어는 C++로 이루어져있지만 파이썬을 많이 쓰게 되죠.

그리고 저희 회사 내에서는 학습된 모델을 바탕으로 Microservices를 만들어서 내부적으로 사용하는 경우가 많은데 이런 경우에도 Django 프레임워크를 써서 운영하고 있습니다.

그리고 무엇보다 파이썬은 하이퍼커넥트에서 데이터 기반한 의사결정을 하는 데 있어서 가장 중요한 도구입니다.

하이퍼커넥트에서는 작은 기능도 출시를 하고 잘 되는지 안 되는지 지켜보거나 그러지 않습니다.

저희는 아무리 작은 기능도 철저하게 테스트를 기획하고 배포 후에 데이터를 수집하고 분석하고 나서야 그 판단에 따라서 출시여부를 결정하고 하는데요.

이를 위해서 방대한 데이터를 효과적으로 처리할 수 있는 그런 능력이 필요합니다.

이거는 저희가 가지고 있는 데이터 인프라를 간략하게 소개한 것입니다.

자세히 설명드릴 수는 없는데 담당하신 분들이 부스에 계시니까 관심있는 분은 세션이 끝나고 부스에서 질문해 주셔도 좋고.

바로 하이퍼커넥트 룸에서 엔지니어와 이야기를 할 수 있는 시간이 있으니까 OST룸에 들려주셔도 좋을 것 같습니다.

제가 말씀드리고 싶은 포인트는 이런 데이터 인프라에서도 파이썬이 아주 중요하게 사용되고 있다는 겁니다.

저희가 파이썬 기반 도구를 그냥 가져다 쓰는 경우도 있지만 많은 경우는 오픈소스의 힘을 빌려 수정해서 사용하고 있고 얻어서 좋은 거는 진행하고 있습니다.

그리고 파이썬은 이런 데이터 파이프라인에서 구성 요소들을 연결해 주는 역할을 하고 있는데요.

물론, 성능이 필요한 곳에서는 스파크기반의 스칼라로 만들어서 하는 것이 있기도 하지만 파이썬 없는 하이퍼커넥트의 데이터은 상상할 수 없을 것 같네요.

지금까지 제가 하이퍼커넥트라는 회사와 하이퍼커넥트에서 파이썬을 어떻게 사용하고 있는지에 대해서 간략히 소개를 드렸습니다.

지금부터는 하이퍼커넥트에서 데이터기반 의사결정을 하는 게 실제로 어떤 건지 보다 실무적이고 상세한 내용으로 설명드리겠습니다.

파이썬을 이용해서 구축한 데이터파이프라인인 자동광고성과측정서비스에 대해서 발표하겠습니다.

여기서 말하는 광고에 대한 이야기로 시작하겠습니다.

많은 회사에서 다양한 마케팅을 하고 있을 텐데요. 기존 마케팅으로는 TV광고, 신문광고와 같은 것들이 있죠. 요즘에는 기존 이런 마케팅 외에도 페이스북, 구글, 유튜브 등과 같은 디지털 미디어를 통해서 디지털 마케팅도 가능합니다.

그런데 디지털 마케팅은 기존에 마케팅들과 다르게 정량적인 성과평가가 가능합니다.

예를 들어서 페이스북 광고에 우리가 얼마만큼의 예산을 지불했고 얼마나 많은 사용자들이 그 광고에 노출했고, 그래서 실제로 우리 앱의 접속하는 것도 알 수가 있죠.

이런 데이터들을 기반으로 어떠한 광고가 더 효과적이었는지 분석이 가능해졌습니다.

그래서 이렇게 정량적인 성과측정이 가능하기 때문에 자동화된 성과측정서비스를 구축할 수 있었습니다.

자동성과측정서비스가 무엇을 해 주는지 저희 예시를 통해서 설명을 드리겠습니다.

얼마 전, 온 알림인데요. 이거처럼 7월 27일에 시작했던 광고의 성과를 2주 후에 자동으로 측정해서 리포팅한 내용입니다. 7월 27일에 시작된 광고는 8월 10일 현재까지 토탈 포스트 365달러, 이것을 마케팅 비용으로 지출한 것이고. 토탈 리턴 187달러를 현재까지 들어온 유저들이 발생시킨 매출입니다.

더 나아가서 에스티메이티드 리턴 같은 경우는 해당 유저들이 507달러 만큼의 가치가 있을 것으로 추정되는 것을 말합니다.

이러한 리포팅이 매일, 매주 제공되면서 광고의 성과에 따라서 액션을 빠르게 취할 수 있었습니다. 로하스란 마케팅 비용 대비 매출을 말하는데요. 첫 번째 케이스처럼 로하스가 좋은 광고는 유사한 광고를 추가생성하고. 로하스가 좋지 않았던 광고는 빠르게 중단할 수 있었습니다.

이렇게 자동으로 광고의 성과를 측정하면서 마케팅하는 사람들은 손쉽게 피드백을 받을 수 있었습니다.

계속해서 증가하고 있습니다.

이제부터 본격적으로 이러한 서비스를 어떻게 구축했는지 소개하겠습니다.

목차인데요.

매일 리포팅을 하기 위해서는 도구가 필요하겠죠.

광고데이터를 수집하는데요.

광고와 광고에 소모되는 비용, 매출과 관련된 데이터인 결제와 행동 데이터를 수집합니다.

이러한 거를 이어주기 위한 것과 유저의 평생 가치를 예측하는 LTV 모델에 대해서도 다룰 겁니다.

아직은 행동 데이터가 매출에 연관이 있고 어트리뷰이션이나 LTV가 뭔지 모를 수 있는데 차근차근 설명드리겠습니다.

목차를 시각화하면 이렇게 될 것 같고요.

첫 번째 부분입니다.

방금 보여드린 것처럼 데일리로 리포팅을 제공할 필요가 있는데요. 매일 아침마다..

우선 스케줄링 하면 크론을 떠올리실 것 같습니다.

크론은 유니스 운영체제에서 특정작업을 특정시간에 주기적으로 실행시키는 건데요.

이처럼 다섯개 필드로 원하는 시간과 주기를 설정할 수 있습니다.

다섯개 각각의 필드는 보시는 것처럼 분, 시간, 한달 중 며칠, 몇월, 무슨 요일인지 의미하고요.

이 예제에 보이는 것처럼 03별별은 역순으로 보면 모든 매일, 세시에 실행될 것입니다.

따라서 만약 광고성과리포팅을 매일 3시에 하고 싶으면 이처럼 광고성과를 리포트하는 작업을 실행시킬 수 있도록 크론을 하시면 되겠죠.

알 수 없는 이유로 3시작업이 실패하면 어쩔 수 없이 서버에 직접 접속해서 디버깅해야 되고 직접 재실행도 해줘야 됩니다.

이렇게 직접 서버에 접속해야 한다는 게 번거롭죠. 그런데 이보다 더 번거로운 게 있습니다.

이처럼 리포팅을 하기 전에 광고와 관련된 데이터를 수집해야 한다면 어떻게 해야 될까요? 우선 데이터를 수집하는 작업을 크론에 추가해야겠죠. 한시에 데이터를 수집하는 작업을 추가했고.

다음에, 작업이 완료된 후 리포팅을 하고 싶은데 좋은 방법이 없습니다. 한시에 작업이 세시 작업 전에 끝날 거라는 믿음을 가지고 두 손 모아 기도를 해야 합니다.

그런데 또 여기서 한시 작업이 실패하게 되면? 한시 작업을 재실행해 주고. 3시 작업은 의미가 없으니까 중단시켜주고. 1시 작업이 끝난 다음, 3시 작업을 재실행해줘야 합니다.

이런 식으로 하면 복잡해질수록 도저히 감당할 수 없는 지경이 이르게 됩니다.

그래서 저희는 파이썬으로 스케줄링할 수 있는 Airflow를 사용하게 되었습니다.

Airflow는 간단히 말해서 데이터워크플로우 관리도구인데요.

간단히 풀어말하면 아까 못했던 거를 다 할 수 있습니다. 주기적으로 작업을 실행할 수 있고, 작업 사이에도 추가해서 워크플로우를 구성할 수 있습니다.

Airflow는 파이썬으로 만들어진 소스고, 그렇기 때문에 파이썬으로 개발할 수 있다는 게 가장 큰 장점입니다.

이처럼 파이썬 코드를 이용해서 워크플로우를 구성할 수 있는데요. 자세히 보시면 아까 크론과 비슷한 내용이 보이시죠. 이처럼 매일 2시에 이 워크플로우를 실행하라는 의미를 가지게 됩니다.

UI상에서 보면 이런 스케줄로 하고 있고. 마지막으로 실행된 거를 보시면 2018년 8월 14일 2시 0분인 것을 확인할 수 있습니다.

다시 아까 파이썬 코드 아래에 있는 부분을 보시면 여러 개의 작업들이 연결된 것을 볼 수 있는데요. 이것은 사실 UI 상에서 이렇게 보이게 됩니다.

작업들 사이에 추가해서 하위 작업이 끝나고 성공하기 전까지는 위 작업이 실행되지 않습니다.

뿐만 아니라, 실패한 작업에 대해서 리트라이를 하거나 완료된 작업, 실행 중인 작업에 대해서도 볼 수 있습니다.

서버에 직접접속하는 게 아니라 웹 UI로 가능합니다.

보시는 것처럼 아까 작업을 클릭해보면 이런 화면이 뜨는데. 작업 디테일도 확인할 수 있고 뷰로그와 같이 실행된 작업의 로그를 보기도 하고. 클릭하면 작업을 재실행할 수도 있습니다.

이런 Airflow에는 중요한 개념 세 가지가 있는데요. 그 중에 핵심이 댁입니다. 댁이란 하나의 워크플로우를 의미하고요. 아까 이 코드에서 애드는 광고 관련 워크플로우를 말하는 것입니다.

애드댁을 보면 매일 2시마다 샐행되는 워크플로우라는 것을 알 수 있습니다.

워크플로우라고 하면 당연히 안에서 실행되는 작업들이 있어야겠죠. 그러한 작업들을 정의하기 위한 것이 바로 탬플릿 클래스 오퍼레이트라고 합니다.

여기에 보시면 하이버오퍼레이트가 이처럼 오퍼레이트는 클래스이기 때문에 여러 가지 파라미터들을 갖게 되는데요.

이렇게 실제로 파라미터들을 받아서 생성된 인스턴스, 오퍼레이트에 대한 인스턴스를 태스크라고 부릅니다.

여기서 하이퍼에서 몇 가지 파라미터를 받아서 생성된 태스크죠. 이처럼 생성된 태스크는 하나의 작업이 되고요. 이렇게 불그스름한 작업이 있는데 이것이 바로 하이퍼 오퍼레이트가 됩니다. 오퍼레이트는 탬플릿을 사용해서 파라미터에 따라서 이렇게 다양한 태스크들이 생성될 수 있습니다.

그렇게 저희는 에어플로우를 사용해서 매일 리포팅을 할 수 있도록 이렇게 댁을 구성했습니다.

에어플로우는 보신 것처럼 파이썬을 기반으로 정의하기 때문에 익숙하고 코드만 봐도 워크플로우를 쉽게 이해할 수 있습니다.

그리고 또 중요한 장점이 있는데 Airflow는 여러 머신을 분산해서 실행이 됩니다.

그래서 저희는 Airflow로 가져와서 여러 개의 워커를 활용해서 파이썬 작업들을 실행하고 있습니다.

Airflow를 사용하면 이렇게 데일리 리포트가 가능해지는데요. 리포트를 구성하기 위해서는 더 중요한 것들이 있죠. 바로 광고 관련 데이터죠. 리포트를 하기 전에 데이터를 수집해야 하고요. 그 중에 하나가 광고에 지불한 비용입니다.

광고비용 데이터는 이처럼 페이스북, 에드워즈와 같은 매체를 통해서 가져올 수 있습니다.

이번에는 파이썬을 이용해서 마케팅, 비용 등을 가져오는 방법에 대해서 설명해드리도록 하겠습니다.

이 예제는 페이스북 API를 이용해서 성과를 가져오는 예제인데요. 말씀드린 것처럼 비용 데이터는 이처럼 각각의 광고 데이터를 이용해야합니다.

이러한 거를 활용해서 저희는 이런 거를 구성했고요.

매일 가져와야 되기 때문에 Airflow의 오퍼레이트로 만들었습니다. 파이썬을 사용하기 때문에 방금 예제와 동일하게 페이스북을 사용해서 광고 데이터들을 가져올 수 있었습니다.

다만 이러한 오퍼레이터를 만들 때 어려운 점이 몇 가지 있었는데요. 첫 번째로 광고매체의 API를 사용하다보니까 문제가 발생했습니다.

그래서 API 사이에 간격을 만들어주고 처리하는 속도가 느려지면 불필요한 API 요청을 최소화 했고요.

두 번째로는 계정마다 설정한 시간대와 화폐단위가 다른데요. 이를 위해서는 Hourly를 가져와서 시간대를 맞춰주고 환율 정보를 매일 가져와서 통일해줄 필요가 있었습니다.

많은 분들이 느끼셨을지 모르겠는데 마케팅 용어가 익숙치 않고 광고 매체마다 용어를 다르게 사용하고 있다는 점입니다. 제일 어려운 부분이기도 한데요. 이거 때문에 매일 마케터 분들과 회의를 해야 했습니다.

페이스북에서는 하나의 포스팅이 광고 단위가 된대요. 그래서 이처럼 매체마다 조금씩 광고의 단어들이 다르기 때문에 통일시켜줘야 되고요. 저희는 아래와 같이 광고매체, 계정, 목표, 운용 이렇게 통일을 시켜줬습니다.

결과 파이썬을 통해서 모든 매체에 데이터비용을 가져와 한 테이블로 합쳤고 여러 매체에 흩어져있는 광고 비용을 한 테이블에서 볼 수 있었습니다.

이제 광고에 지출되는 비용을 알았으니 광고를 통한 매출데이터를 알아야겠죠. 매출하면 바로 떠올릴 수 있는 실제 우리 앱에서 결제한 것입니다.

트랜잭션 데이터베이스에 쌓이게 됩니다. 그렇기 때문에 시간이 지나면 데이터가 조금씩 변할 수 있는데 주기적으로 스냅샷을 찍어서 원하는 테이블로 구성할 필요가 있습니다.

저희는 Airflow에서 구성했고요.

이렇게 파이썬을 이용해서 쉽게 결제데이터에 스냅샷 테이블을 구성할 수 있었습니다.

그런데 매출에는 결제데이터만 있는 게 아닌데요.

처음에 말씀드린 것처럼 매출과 관련이 있는 행동에 대해서도 서비스의 매출로 할 수 있습니다.

예를 들어서 아자르에서는 실시간으로 매칭을 하는데, 조금이라도 더 원하는 상대방을 만나기 위해서는 프리미엄매칭을 할 수도 있어요. 만약 프리미엄매칭을 할 수 있는 상대방이 없다면 유저는 돈을 쓰고 싶어도 돈을 쓸 수가 없게 되겠죠. 이렇게 유저가 소비를 못하게 되면 새로운 구매도 필요없고 반대로 가면 유저가 소비를 잘 할 수 있도록 하는 것이 우리 서비스매출의 도움이 된다는 뜻입니다.

그래서 이때 원하는 상대방이 들어와서 매칭이 가능해졌다면? 이 상대방 덕분에 유저는 소비할 수 있게 됐죠. 따라서 유저가 결제를 하지 않았어도 이 유저 역시 매출에 기여한 유저라고 할 수 있습니다.

따라서 결제 행동뿐만 아니라를 다양한 행동들이 매출에 영향을 줄 수 있습니다.

그렇기 때문에 이러한 유저의 행동분석을 위해서라도 유저와 행동에 대한 정보를 로그로 남길 필요가 있고요.

이러한 서버로그들을 분석하기 위해서는 전처리 과정을 통해서 원하는 형태로 만들어줘야 합니다. 이런 전처리 과정을 통해서 자연스럽게 개인정보와 관련된 데이터도 필요하고요.

예를 들어 매치가 시작하는 시점과 끝나는 시점의 로그를 통해서 매치시간을 추측할 수도 있고.

희망하는 매치정보에 대한 로그를 통해서 실제 이루어졌던 매치가 얼마나 원했던 매치인지 알 수 있습니다.

그래서 저희는 매치데이터들을 전처리하고 어그리게이션해서 원하는 방식으로 구현하는 오퍼레이터를 만들었고요. 보시는 것처럼 서버로그들은 그 데이터가 크기 때문에 스파크에 접속해서 실행하였습니다.

이처럼 하는 것이 파이썬으로 구현이 되어 있습니다.

하지만 이걸로 끝이 아닌데요.

실제로 매출이 발생하지 않았음에도 불구하고 이 행동이 얼마만큼의 가치를 갖고 있는지 추산해야 합니다. 사실은 이거는 정답이 없는데요. 서비스마다 모두 다르고 경험적인 내용이 필요할 수 밖에 없습니다.

그래서 이번에는 그냥 시도해보기 좋은 알고리즘들을 소개해보고자 합니다.

첫 번째로, 유명한 페이지랭크 알고리즘인데요. 구글의 페이지랭크 알고리즘은 구글검색의 기초가 되는 것입니다.

우선적으로 보여주기 위한 것이죠. 이처럼 각각 페이지 사이에는 여러 가지 인용들이 준비하고 그 인용들을 통해서 영향력이 높은 페이지를 찾게 됩니다.

조금 더 간단한 그림으로 설명하면 여기서 각 얼굴은 각각 페이지를 의미하고.

얼굴의 사이즈가 페이지 랭크 점수, 영향력을 의미합니다.

손가락으로 가리키는 것이 인용이 되겠죠.

그래서 보시면, 각 얼굴의 사이즈는 자신을 가리키는 얼굴들의 사이즈에 비례하게 됩니다.

여기에 제일 큰 노란머리가 많은 수의 이용을 받았기 때문에 제일 크고, 가장 큰 빨간 얼굴은 노란머리로부터 인용을 받았지만 노란머리가 영향력이 매우 크기 때문에 큰 사이즈가 되었습니다.

따라서 핵심 개념은 영향력이 있는 페이지가 인용할 수록 해당 페이지의 랭크 역시 높아진다는 것입니다.

이러한 개념은 그동안 예제로 말씀드린 매칭하고도 잘 맞습니다.

높은 매출을 낸 유저들과 프리미엄 유저들은 그 매출에 기여를 했다고 보고 그 영향력을 나눠주는 것이죠.

두 번째로 셰플리 베일루인데요. 협조적 게임 이론에서 나온 개념입니다.

보시는 것처럼 에이, 비, 씨라는 사람이 있고 파란색 박스가 기여도라고 하면 에이와 비가 합쳐졌을 때 낼 수 있는 일이 바로 단순하게 6만큼을 창출할 수 있다고 합니다.

게임 이론이니까 게임에 비교해보면 예를 들어서 검사가 몬스터를 5마리를 잡고 마법사가 20마리를 잡았는데 힐러는 한마리밖에 못 잡았습니다.

그러면 힐러는 적게 잡았으니까 낮은 베일루를 갖는 걸까요? 아닙니다.

그것은 알 수 없습니다만 사실 답은 모두 알 것입니다. 힐러가 없으면 사냥이 어렵죠.

그래서 힐러 없이 검사와 마법사 둘이서 상대를 하려고 하니 5마리밖에 못 잡는 겁니다. 이렇게 서로의 협동을 고려하는 것 역시 매칭에 의해서 매출을 계산하는 방법이 될 수 있습니다.

이렇게 다양한 이론들을 적용해서 행동의 가치를 추산해볼 수 있습니다.

그렇지만 다른 서비스에서는 방금 말씀드린 이론이 맞지 않을 수 있고요. 이렇게 다양한 경우를 고려해봐야 하고 경험적인 아이디어도 필요하기 때문에 매우 어려운 문제입니다.

그래도 이렇게 매출 데이터를 모두 모았는데 이런 매출 데이터들을 광고와 연결시키고 싶습니다.

그러면 매출을 발생시킨 유저들이 어떤 광고를 보고 우리 앱에 접속했었는지 알아야겠죠.

그래서 이렇게 매출과 광고를 이어주는 것이 어트리뷰션입니다. 어트리뷰션이란 앱을 설치한 유저들이 어떤 광고채널에 기여시킬 까를 의미하는데요. 간단하게 말해서 유저가 어떤 광고를 보고 들어왔는지 알 수 있습니다.

예제를 보면, 4번 유저가 페이스북의 제이피 이름을 가진 광고를 보고 들어온 것을 알 수 있죠. 이렇게 어트리뷰션 데이터는 어떤 유저가 어떤 광고 네트워크를 통해서 그리고 그 안에 어떤 광고를 보고 우리 앱에 접속했는지를 알 수 있습니다.

어트리뷰션 데이터는 일반적으로 두 가지 방법으로 데이터를 가져올 수 있습니다. 가장 기본적인 방법은 각 매체에서 제공하는 SDK를 통해서 가져오는 방법인데요. 각각의 광고 매체에서 제공해 주는 SDK를 추가해서 유저가 어떻게 들어왔는지를 추정할 수 있습니다.

이 방법은 비용이 들지는 않지만 모든 매체에 SDK를 추가해야 되기 때문에 개발코스트가 증가할 수 있습니다.

두 번째 방법은 써드파티툴을 활용하는 방법인데요. 써드파티툴을 활용하면 비용은 증가할지 모르겠지만 광고매체가 추가될 때 마다 클라이언트에서 매체에 SDK를 추가할 필요가 없고 클라이언트는 수많은 광고에 추가할 필요가 없어서 용랑을 줄일 수 있습니다.

그래서 저희는 이를 가공해서 아까와 같은 테이블을 만들고 있고요.

이 역시 매일 가져와야 하는 데이터이기 때문에 Airflow로 구성했습니다.

이제 해당 광고로 타고 들어온 유저들의 매출을 이용해서 광고성과를 측정할 수 있습니다. 하지만 여기서 더 나아가 유저들이 얼마나 더 매출을 올려줄지 예측이 필요합니다.

왜냐하면, 365달러를 들여서 한 광고가 있는데 187의 수익만 남으면 실패한 광고일까요? 지금 이 광고를 중단하더라도 앞으로 그 유저들은 매출을 올리면서 500달러 이상의 성과를 낼 수 있기 때문입니다.

그래서 이러한 개념이 바로 LTV입니다.

LTV란 Lifetime Value를 뜻하고요. 해석하면 고객생애가치를 뜻합니다.

단어에서 느껴지듯이 LTV는 해당고객이 평생 동안 얼마만큼의 가치를 가질 것이냐를 뜻합니다.

LTV에서는 고객획득비용, 매출, 얼마나 오래 유지되어 계속해서 매출을 가져다주는지를 고려하게 되고요.

단순하게 매출만 보는 것이 아니라 LTV관점에서는 마케팅 비용을 줄이고 매출을 올리고 고객의 리텐션을 올려야한다는 관점이 더 중요합니다.

보면 고객의 매출이 떨어지더라도 유저의 텐션이 올라가고 유지비용이 싸지면 더 큰 이득을 얻을 수 있게 되는 거죠.

그런데 이러한 유저의 LTV를 어떻게 알아낼 수 있을까요?

그 중 LTV를 추측하는 비지엔비디모델이라는 것이 있습니다.

비지엔비디모델의 핵심 가정 중 하나는 위와 같은데요. 고객은 일정한 비용으로 구매하는데 이 비율의 값은 다르다는 겁니다.

이를 좀 자세히 들여다보면 트랜섹션레이트와 고객마다 구매빈도가 다르니 이질성을 감마 분포를 따른다고 가정합니다.

이 모델의 또 다른 핵심 가정은 고객은 구매 직후에 바로 일정한 확률로 이탈을 할 수 있는데 역시 고객마다 확률의 값이 다르다는 것입니다.

그래서 이를 자세히 들여다보면, 드랍아웃레이트가 이와 같은 확률을 따른다고 하고, 고객마다 이탈의 확률이 다르니 베타 분포를 따른다고 가정합니다.

이 모델은 관찰 기간 동안에 유저의 구매빈도와 최근 구매실적과 같은 거를 통해서 앞으로 구매를 할 확률, 이탈할 확률을 생각해서 유저가 얼마나 더 많은 트랜직션이 발생할 수 있을지 확률적으로 계산하는 것입니다.

LTV를 추측하기 위해서는 구매빈도와 함께 구매금액도 모델링을 할 필요가 있는데요. 이를 위해서 감마감마모델을 사용할 수 있습니다.

감마모델도 고객의 1회 구매금액은 감마분포를 따른다고 하고 고객간 이질성도 감마분포를 따른다고 보고 있습니다.

이를 통해서 1회당 구매금액을 확률적으로 구할 수 있습니다.

이렇게 LTV를 계산하는 중요 모델들의 핵심 가정들을 설명해드렸는데 막막하시죠? 하지만 파이썬에서는 pip install이면 손쉽게 해당 모델을 사용할 수 있습니다.

간단한 예제를 보시면 해당 라이브러리에서는 이것이 감마감마 피터 같은 경우는 감마감마 모델을 구현한 것입니다.

트랜젝션 함수는 일반 구매빈도, 최근 구매시점과 같은 데이터로 변화시켜주는 유틸 함수입니다.

이런 데이터를 포함하고 있어야 하고요.

2018 파이콘 데이터는 3월 1일부터 3월 10일 사이에 가입한 유저들의 6월까지의 구매기록을 가지고 있습니다.

이를 썸머리 데이터로 바꿔주면 아래처럼 유저별로 구매빈도, 최근 구매날짜, 유저 나이와 같은 거를 만들어줍니다.

여기서 옵저베이션기간을 보면 2018년 3월 25일이죠. 그 기간까지의 구매기간을 관측으로 잡아서 했습니다.

그렇게 나온 값들을 감마감마 모델에 피팅을 시켜주면 피팅된 데이터들을 이용해서 LTV를 계산할 수 있습니다. 보시는 것처럼 구매빈도를 모델이나 비지에프, 지지에프 이 모두를 사용해서 LTV를 구하게 되죠.

그리고 최종적으로 예측되는 LTV 결과와 실제 데이터를 비교해봤는데요. 파란색 데이터가 실제 구매 데이터고, 주황색이 모델에 의한 예측결과입니다. 신기하게도 비슷한 거를 확인할 수 있었죠.

이렇게 모은 유저의 매출데이터를 이용해서 파이썬으로 손쉽게 LTV를 계산할 수 있었습니다.

이렇게 우리는 필요한 데이터들을 매일 집계해서 광고성과리포팅을 자동으로 할 수 있는 서비스를 구축하였습니다.

물론 여기서 멈추지 않고 더 많은 일들을 해나갈 것입니다.

광고성과에 따라서 광고 예산이나 입찰수준 변경 등과 같은 액션들을 할 수 있는데요. 그런 액션들을 역시 자동화할 수 있겠죠. 이를 위해서 아까와 같은 광고성과를 보냈을 때 그에 따른 마케터가 어떤 행동을 하는지 벌써 데이터를 수집하고 있습니다.

그리고 우리 서비스의 인프라에 따라서 광고 노출을 최적화하는 방법인데요. 페이스북 광고에서는 노페이싱 옵션을 통해서 페이스북에서 해 주는 최적화 기능을 끌 수 있습니다.

그래서 조절을 통해서 우리가 원하는 시간대에 노출되도록 할 수 있죠.

한마디로 하이퍼커넥트의 광고노출최적알고리즘을 만들고자 하고 있습니다.

광고성과가 LTV가 높은 유저들을 타겟팅으로 하여 자동으로 추가해 주는 것도 계획하에 있습니다.

이처럼 파이썬과 데이터가 만난다면 광고뿐만 아니라 다양한 분야에서 수많은 일들을 해낼 수 있을 것 같습니다.

마지막으로 회사 홍보를 한다면 하이퍼커넥트는 한층 전체가 휴식 공간과 편안한 회의 공간으로 이루어져 있는데요. 언제든지 자유롭게 내려가서 편한 자세로 개발할 수도 있고요.

제가 회사의 사무실 중 좋아하는 부분인데 식물이 많은데 식물에 물을 주는 사람이 따로 있을 수도 있습니다. 덕분에 저는 사무실이 쾌적한 느낌을 받고요. 시원하게 맥주할 수 있도록 맥주로 가득 차 있습니다.

사실 무엇보다 가장 큰 장점은 좋은 사람들과 함께 한다는 점입니다. 오픈소스에 기여했다거나 국제대회에 나가서 상을 타오신 분들이 제 옆자리에 계십니다.

발표 중간 느끼셨을지 모르겠는데 글로벌한 유저가 쓰는 서비스라 재미있는 경험도 하는데 알제리에서 매칭수가 0이 되었더니 알랏이 왔습니다. 무엇인가 하고 봤더니 알제리에서도 수능시험같은 거를 보는데 그게 그시험을 볼 때 한시간 동안 인터넷을 블락해버린다고 합니다.

이런 서비스 개발을 하면서 재미있는 경우도 많이 겪고 해서 많은 부분에서 배울 수 있었고요. 이렇게 같이 함께 성장하실 분들을 채용하고 있습니다.

감사합니다.