안녕하세요.

같은 시간대에 되게 쟁쟁한 세션이 많아서 많이 안 오시면 어떡하지라고 생각했는데 생각보다 많은 분들이 와주셔서 감사합니다.

저는 뱅크샐러드를 만드는 황성현입니다.

프로그램북을 통해서 보셨겠지만, 오늘 이 세션은 후원자 세션이에요.

그렇다보니까 다소 많은 광고가 포함될 수 있습니다. 그래서 중간중간 이거 과한 거 아닌가? 하는 생각이 드시면 인상을 팍 찌푸려주시면 제가 바로 조절을 하겠습니다.

다들 주말에 나오셔서 피곤하실 수 있지만 약간의 감정노동을 부탁드리겠습니다.

말이 끝나기 무섭게 후원사의 광고로 발표를 시작해보겠습니다.

저희가 만들고 있는 뱅크샐러드라는 서비스인데요.

화면에서 보실 수 있듯이 흩어진 금융자산을 한데 모아 볼 수 있는 기능을 제공합니다.

계좌잔액, 카드결제금액, 펀드, 주식 투자 현황뿐만 아니라 무료로 나의 신용점수를 확인할 수 있습니다.

일일이 서류를 제출해야만 알 수 있었던을 대출금리를 한눈에 모아 알 수 있습니다.

무료로 신용점수 또한 조회가 가능합니다.

광고 들어주셔서 감사하고요.

자연스럽게 발표를 시작해보도록 하겠습니다.

발표 제목이 학습하는 조직과 파이썬인만큼 조직이 학습한다는 게 무엇일까에 대해서 생각을 해보고 진행하면 좋을 것 같아요.

혹시 세션 참여하시러 오신 분들 중에서 스타트업에서 근무하시는 분들이 계실까요? 일하고 계시는 분들이 있으시면 간단하게 손을 들어서 표현해 주세요.

네. 절반 정도 되시는 분들이 스타트업 환경에서 업무를 하고 계신데요.

제가 오늘 드릴 내용에 대해서는 뱅크샐러드 사례가 주제인만큼 뱅크샐러드를 창업하면서 저희 조직이 했던 내용들을 포함할 수 있어요.

그렇기 때문에 같은 스타트업를 하고 계신 분들이라면 서로 공감하면서 들을 수 있으리라고 생각합니다.

먼저 슬라이드 하단에 조직적 학습이 무엇이냐에 대해서 제가 간단하게 글을 발췌해봤어요.

유명한 교수의 티밍이라는 책에서 따온 글인데요.

우리가 흔히 학습이라는 단어를 들었을 때, 떠올리는 모습이 개인적 차원의 학습이라고 생각이 돼요.

예를 들어, 채용공고들을 보면 굉장히 흔한 문장을 발견할 수 있는데, 그 중에 하나가 조직이 성장하면서 개인도 함께 성장한다는 문구를 대부분의 스타트업의 채용공고에서 흔히 발견할 수 있는 문장이라고 생각하는데요.

뭔가 그 의미를 즉각 들었을 때 떠오르는 거는 회사 업무를 하면서도 회사 사람들과 다 같이 스터디를 할 것 같고, 새로운 책을 읽을 수 있는 시간을 보장해 줄 것 같고, 이런 의미의 개인적인 학습을 장려하는 차원의 문장처럼 들립니다.

그런데 그거는 조직 내의 구성원이 학습한다는 것이지, 뭔가 조직이 다같이 학습한다는 느낌이랑은 거리가 있다고 생각합니다.

우리가 조직적 학습이라는 것을 말할 때, 어떤 모습인지 그 모습이 자연스럽게 그려지지 않고, 개인차원의 학습과 개념의 혼란이 온다면 저는 그거는 아무래도 대부분의 조직에서 조직적 학습이 이루어지는 경우가 많지 않기때문이라고 생각이 드는데요.

사람들이 자연스럽게 모인다고 해서 자연스럽게 그 조직이 학습을 하냐, 그 조직이 뭔가를 배우냐고 하면 저는 그거는 아니라고 봅니다.

그래서 편의상 전통적 조직과 학습하는 조직이라는 2분법 도식을 가져왔는데요.

전통적 조직은 조직적 학습이 딱히 중요하지 않은 조직이라고 퉁쳐서 가정을 하겠습니다.

반면에 학습하는 조직은 조직적 학습이 매우 필요한 조직이라고 가정하고 진행을 해볼게요.

전통적 조직, 즉 조직적학습이 중요하지 않은 조직은 다시 말해 무언가를 탐구할 일이 적도는 뜻이겠죠. 그렇기 때문에 학습이 그렇게 중요하지 않다고 표현할 수 있을 것입니다.

그말인 즉슨 대부분의 경우에서 어떤 회사 내지는 조직의 목표를 달성하기 위해서 구성원들이 해야 할 일이 매우 비교적 명확한 조직인 거죠. 답은 정해져있고 나만 잘하면 되는.. 그런 조직이 이런 모습이 아닐까 생각합니다.
비교적 성장에 있어서 확실하고 예측력이 높습니다.

이런 조직은 그렇기 때문에 보통 분업의 형태를 많이 띄죠.

어떤 일을 해야 하는지가 명확하면 그 일을 나눠서 각자가 더 잘할 수 있는 일을 맡아서 전체 생산 효율을 극대화시키는 게 전통적 조직의 모습이라고 생각할 수 있을 것 같습니다.

그래서 계획, 세부사항, 역할, 예산, 일정 등의 키워드를 비교적 쉬이 들을 수 있는 환경이겠죠.

반면에 학습이 중요한 조직 같은 경우에는 그와는 조금 다르다고 생각을 합니다.

이런 조직의 특성은 뭐를 해야 할지를 끊임없이 탐구하는 조직입니다.

그만큼 목표 달성을 위해 구성원들이 해야 할 일이 되게 불투명해요. 이런 조직일수록 무엇을 해야 이 조직의 목표를 달성할 수 있을지가 분명치 않기 때문에 우리가 무엇을 해야 할지가 분명할 때만 일을 나눌 수 있는데 무엇을 해야 할지를 모르면 무엇을 해야 할지를 찾아야하기 때문에 분업을 할 수 없죠.

그렇기 때문에 이러한 조직의 모습은 협업이 이러한 조직이라고 볼 수 있죠.

그래서 무엇을 하면 되는지를 끊임없이 실험하고 그 실험의 측정을 통해서 검증하고 계획보다는 방향을 설정하고 계산보다는 투자를 더 중요하게 생각하게 되는 것이죠.

이렇게 두 가지를 조금 더 비교해보면 우리가 전통적조직의 예로는 간단하게 공장을 예로 들 수 있을 것 같아요. 물론 신제품 개발도 회의하고 해야 할 일이 많지만 발표 편의상 공장을 전통적 조직이라고 하겠습니다.

공장의 생산라인을 효율화하는 연구가 엄청나게 이루어지지 않았습니까?

우리가 흔히 공장에 대해서 떠올리는 모습은 정말 완전하게 분업화되어 있고 각자가 맡은 생산라인이 끊임없이 돌아가고 톱니바퀴에 비유하자면 모든 톱니바퀴가 딱딱딱 돌아가면서 서로가 잘 돌아가는지 간섭하지 않아도 되는 것이죠.

이게 제가 생각했을 때 정말 효율화된 분업의 모습이라고 생각합니다. 반면에 이런 조직은 그만큼 해야 할 일이 명확하기 때문에 내가 할 일을 더 잘하려면 어떻게 해야 할지가 구성원들의 주요 과제가 아니죠.

단지 이 생산 라인을 좀 더 효율적으로 돌릴 수 있는 경험자의 고민이 조직적 학습의 역할이 되겠습니다.

반면에 여기 계신 많은 분들의 직장으로 추정되는 소프트웨어를 만드는 일은 이와 같은 사뭇 다르다고 생각합니다.

공장처럼 계획대로, 생산라인을 가동해서 효율만을 추구할 수 없습니다.

그거는 소프트웨어를 통해서 해결하려는 사용자들의 문제, 내지는 그들이 갖고 있는 목적이 너무 다양하기 때문이라고 생각하는데요.

그거를 예로 들면 가계부로써의 뱅크샐러드의 성패를 갈랐던 아주 중요한 디테일 중에 하나를 제가 예시로 가져왔는데요.

여기 반복재생되고 있는 영상을 보시면 아시겠지만 뱅크샐러드 앱 내에서 사용자 소비 내역을 추가하는 것입니다.
보시면 아시겠지만, 가계부를 사용하는 사람들한테 가장 중요한 기능이 뭘까?라고 했을 때 저희는 이거를 핵심으로 꼽지 못하고 있었습니다.

그런데 수많은 사용자들을 만나면서 그들을 통해서 어떻게든 알게 된 거는 이 사람들은 수기로도 내역을 충분히 많이 작성한다는 사실이었어요.

저희는 그전까지는 최대한 자동으로 모든 내역을 빠짐없이 정리해 주는 게 가계부의 미덕이라고 생각했고 여전히 그 생각은 변함이 없습니다. 다만 그만큼 내역을 직접하는 것이 얼마나 중요한 일이고 그작업이 얼마나 간편해야 하는지의 디테일이 가계부 시장에서 중요한 건지를 몰랐던 것이죠.

우측에 나와있는 글은 저희 유에스팀이 작성한 뱅크샐러드 설계에 대한 글을 따왔습니다.

그래서 이런 조직 같은 경우에는 즉, 뱅크샐러드 앱을 잘 만들기 위해서 무엇을 해야 할지가 비교적 명확하지 않기 때문에 이렇지 않은 가설들을 정립하고 그거를 사용자를 통해서 검증하고 측정하는 과정이 끊임없이 이루어질 수 밖에 없는 것이죠. 이런 모습이 조직적 학습이 아닐까 생각합니다.

이런 일련의 과정들이 조직이 무엇을 해야 우리의 목표를 좀 더 효과적으로 달성할 수 있을지를 다같이 학습하고 그게 각자의 역할에 반영이 되는 거를 조직적 학습이라고 부르고 싶은데요.

어느 정도 충분히 설명이 됐으니 학습하는 조직과 반대형으로 있는 전통적 조직의 차이에 대한 감이 오실 거라고 생각합니다. 이제 저희 조직이 어떤 방식으로 학습을 했었는지 그 사례를 들어서 조금 더 소프트하게 설명을 해보려고 하는데요.

이 화면은 뱅크샐러드라는 서비스가 시장에 나온지 정말 얼마 안 되었을 때 초기 화면입니다. 딱 봐도 굉장히 올드한 사이트고 옛날 사이트임을 한눈에 볼 수 있죠.

시기는 2014년 이맘때쯤입니다.

뱅크샐러드 창업 당시 저를 포함해서 개발자가 딱 두명 있었습니다.

그리고 디자이너 한명으로 조직된 조직이었는데요.

아마 이때부터 조직적 학습의 첫걸음을 뗀 게 아닐까 해서 초기에 있었던 거를 가져와봤어요.

개발자가 두명인데, 저희가 만들려는 거는 나의 소비패턴. 대중교통으로는 월 10만 원으로 지출하는데 카드혜택을 잘 뽑아먹을 수는 없을까? 하는 카드를 개선해 주는 거를 만들려고 했었습니다.

당시 회사의 목표는 저는 아직까지도 잘 모르겠습니다만 카드 추천을 만드는 것이었고. 개발자가 두명이 있는 상황에서 저희 개발팀에게 요구의 상황은 이런 두 가지의 팩터들이 있었습니다.

카드를 정확하게 카드의 혜택을 계산해서 추천하려면 그 당시의 100만번은 커뮤팅을 해야 카드를 계산할 수 있지 않을까? 하는 게 있었어요.

평균적으로 사용자가 입력했으면 하는 거는 16개쯤 되고. 일련의 공식들을 곱해서 한 100만번은 필요할 것 같은데?

제품이 돌아가려면 당시에 한참 유행했던 1초내에 결과가 나와야 사용자가 떠나지 않다는고 하고 1초내에 나와야하는구나라는 생각이 들었고 이 두 가지의 요구사항을 가지고 뱅크샐러드를 어떻게 개발해야되냐가 저희 팀의 고민이었죠.

당시에 저희 개발팀 두명이 경험했던 내용들을 보면 한명은 자바로 프로그래밍해왔던 경험이 있고 파이썬은 살짝 맛만 본 정도였고요.

다른 한명은 PHP로 개발했던 경력이 있고 파이썬은 들어는 봤고 개인적으로 써봤는데 프로덕트에서 써본적은 없다는 상황이었어요.

우리가 처음으로 개발하는 거기 때문에 무슨 스택을 쓸 거냐를 개발자들은 논쟁을 하게 되는 거죠.

그래서 요구사항을 분석했을 때, 1회 추천당 100만번의 계산을 해야 되고 연산 결과가 1초내에 나오려면 파이썬은 많이 느리다는데 이게 될까? 하고 파이썬을 써보기도 전에 그러면 요구사항을 분석했을 때 자바가 맞겠다는 생각을 했었죠.

그래서 자바로 해볼까 하는 생각이 있던아에 어차피 우리 창업 초기고 사용자가 쓸지 안 쓸지도 모르는데 그냥 어쨌든 이 개발자와 합을 맞추는 게 좀 더 중요하다고 봤고 우리 조직이 5명인데 창업 초기에는 언제 망할지 모르는 상태잖아요. 팀이 뿔뿔이 흩어질 수 있고. 그러면 팀차원에서 같이 협업하는데 방해물을 낮추는 의미에서 파이썬하고 둘 다 써보자하는 의사결정을 했습니다.

그래서 당시에 그러면 왜 파이썬을 쓰게 됐냐? 하면 나름의 설득근거가 있었죠. 제가 파이썬을 쓰자고 설득하는 쪽이었고. 다른 한분은 자바를 쓰자고 하는 편이었는데. 다들 아시겠지만 파이썬생태계에는 피피이씨문서가 출력이 되는데요.

그 당시에 이 문서를 보고 제가 약간의 그것을 받아서 파이썬을 써야된다는 주장을 했었는데요.
간단하게 번역해보면, 파이썬의 미덕, 선이고 올드한 번역이니까 의역해보면 파이썬이 추구하는 가치라고 해석할 수 있을 것 같아요.

본문을 다 같이 보면 좋겠지만 간단하게 발췌해서 보면요. 복잡함보다는 단순함이 낫다가 파이썬이 추구하는 가치라는 것이고. 저는 여기에서 굉장히 많은 매력을 느꼈어요.

파이썬을 다들 사용하신 분들이기 때문에 이게 어떤 매력이고 무슨 말인지는 잘 아실 거라고 생각합니다. 두 번째로, 제가 조금 주목했던 문장은 만약에 구현이 설명하기 어렵다면 나쁜 아이디어일거다라는 게 있었어요.

만약에 이거를 구현하기 쉽다면 그거는 좋은 아이디어일 거다라는 문장이 있는데 이 문장에 대한 전통적인 해석은 파이썬이 무언가를 구현할 때 굉장히 쉽게 구현할 수 있다는 가치를 조금 강조하는 쪽이 전통적인 해석입니다.

그런데 다만 당시에 저는 이거를 저의 부족한 영어 실력 등등을 포함해서 약간 오역했어요.

어떤 식으로 받아들였냐면 좋은 아이디어는 아무리 좋은 아이디어라도 그거를 구현하는 과정이 너무 어렵고 복잡하면 그거는 결국 나쁜 아이디어가 된다 식으로 저는 해석하고 받아들였습니다.

그래서 이러한 이유 때문에 파이썬을 조금 더 추가를 하게 됐었고요.

우리가 만들려고 하는 카드추천이 길가다 친구들한테 물어보면 그게 논리적인 것 같고 합리적인 것 같도는 반응을 얻었어요.

이런 식으로 아이디어를 검증하고는 하죠.

그런데 이거를 구현하는데 어떻게 만들어서 잘 동작하기까지 너무 오랜 시간이 걸리면 그냥 도태된 아이디어가 될 거라는 생각이 들었어요.

그렇기 때문에 창업 초기에 조금 더 단순해보이고 우리가 원하는 모습을 잘 만들 수 있어보이는 파이썬이라는 거를 선택해서 회사의 기술스택으로 가져갔습니다.

당시에 파이썬을 시작하시는 분들이라면 Flask와 Django 중에 무엇을 써야될 것인가 하는 고민이 있는 걸로 알고 있는데요. 당시의 이그잼프 문서만 보고 간단하게 Flask네하고 Flask를 썼습니다.

그래서 이렇게 매우 간단한 기술들을 취합함으로써 저희가 뱅크샐러드를 개발하게 되었는데요.

뱅크샐러드를 개발하면서 정말 문제가 됐던 지점은, 사실은 성능이 아니였어요.

저희의 요구사항 자체가 잘못 됐던 거죠.

무엇이 문제였냐면, 우리가 늘 개발자로써 어려움을 겪는 건데.

일을 해보기 전까지는 이 일의 핵심이 무엇인지를 모르고.. 그렇기 때문에 맨날 틀릴 수 밖에 없는 것이죠.
그래서 뱅크샐러드를 개발하면서 보니까 이거는 알고리즘를 잘 풀어내고 성능을 기똥차게 짜고 이런 문제가 아니었다는 거를 느끼게 됐어요.

반면에 어떻게 우리가 카드혜택을 데이터베이스로 관리할 것이냐가 훨씬을 더 중요한 문제가 되었습니다.

그래서 가령 예를 들면, 제가 국내 모 카드회사의 카드 혜택을 따왔는데요.

보시면 이런 내용들을 저희는 어떤 형태로든 데이터베이스화를 해야 했어요.

그런데 당시에는 이거를 그냥 대충 짜기에는 너무 저희가 카드를 몰랐던 거죠.

저희는 창업했던 멤버들 중에 그 누구도 카드회사 출신이라든지 카드를 많이 쓴 사람들이라든지 없었어요.

그렇기 때문에 왜 카드를 고르는 게 이렇게 어려운 거지? 라는 생각을 했지만 동시에 카드가 너무 어려웠던 거죠.
당시에 창업 초기에는 데이터베이스가 따로 없었고 엑셀이 있었고 엑셀을 읽어서 데이터베이스처럼 카드를 관리하고는 했었습니다.

왜냐하면, 언제든 카드에 대해서 우리가 새로운 사실을 알게 되면 전면적으로 기본의 데이터를 갈아엎어야했던 거예요.

그렇다보니까 엑셀을 통해서 카드를 관리하기 시작했는데요. 예를 들면 여기에 이런 식으로 전월실적 조건이 나오는 건 우측 엑셀파일의 저 해당 항목에 해당한다는 식으로 관리했습니다.

마찬가지로 이 내용은 저 셀대로 이 내용은 저 셀대로. 이런 식으로 카드회사 홈페이지를 펼쳐놓고 이 데이터를 수집하는 손수 수집했습니다.

손수 수집을 하는 도메인 전문가 한명과 개발자 두명이 앉아서 계속 홈페이지를 보면서 이거는 무슨 뜻일까? 어떻게 계산해야 될까?를 계속 엑셀을 가지고 방식을 만들었던 거죠.

그래서 이런 식으로 엑셀파일을 읽어서 집어넣어서 어떤 형태로든 꾸역꾸역 넣는 거를 작업했었고요.

엑셀을 읽은 다음에 그게 나중에는 번거로워지니까 파이썬으로 피크를 떠서 바이크로형태로 박아놓고 호출하는 식으로 급격한 변화를 해버렸에요.

이런 식으로 우리가 다뤄야하는 모델을 정의하는 데 너무 어려움이 있기 때문에 모델을 가져다쓰는 데이터베이스를 호출하는 부분을 아예 없애버리고 난이도를 낮춰버린 거죠.

그래서 어떻게든 모델을 잘 정의하자라는 측면으로 개발의 방향을 잡아가기 시작했습니다.

이거는 익숙한 유아이일 수 있는데요. 발표 준비를 위해서 예전 거를 보니까 이런 커밋이 있었어요.

이거는 제가 혹은 저희 개발팀에서 했던 커밋은 아니고요.

앞서 말씀드린 도메인 전문가께서 직접 엑셀의 양식을 나름 DSL화 했습니다.

그래서 내지는 이 값에 이게 들어가면 컴마니까 스페이스해야 돼라는 메타적인 문서를 만들어놓고.

그거를 DSL만의 전문가께서 수정요청하고 그거를 바탕해서 엑셀에서 뽑아내고 하는 소위 말하는 짓거리를 했었어요.

그 도메인전문가분께서는 Github 파이썬을 자연스럽게 다루게 되어 버렸고요.

처음에는 변경 사항을 요청하시다가 너무 변경사항이 많으니까 저희가 너무 많은 거를 요구하는 것은 아닌가? 하는 생각을 하게 되잖아요. 그래서 결국에는 파이썬이랑 Git을 배워서 직접 DSL을 조작하기 시작하시더라고요.

그래서 지금의 카드 데이터를 확립하는 데는 2년의 시간이 필요했고요. 계속 카드의 데이터 구조를 확립하고 이거를 저희가 원하는 형태로 변형하는 작업을 했습니다.

그래서 2015년 내내 카드사에서 새로운 상품을 낼 때 마다 그거를 열어보는 게 두려웠던 거죠. 당시에는 획기적인 기획이라고 하면서 냈던 상품들은 저희 데이터베이스로 표현할 수 없는 상품이었거든요..

그래서 계속 구조를 변경해야 하고, 새로운 컬럼을 추가해야 하고 데이터를 바꿔야 했습니다.

그래서 우여곡절 끝에 카드추천을 런칭했어요.

당시 2015년도에 뱅크샐러드의 실적입니다.

여기서 보시면 아시겠지만, 전체 세션이 678명 정도예요.

중요하게 보는 거거든요.

한달 기준으로 678명이면 하루에 한 3명 정도 저희 펀더를 탄다는 뜻이거든요.

그러면 처음에 저희가 요구사항 분석으로써 1회당 100만번을 계산해야 되고, 그렇기 때문에 1초 내로 계산이 나오는 게 매우 중요했었는데.

사실은 하루에 세 명 정도 쓰는 거기 때문에 그 사람들이 운 좋게 세명이 같은 시간에 접속하면 동접자가 3명이 되는 거고요.

그렇지 않은 경우에는 동접자가 1명이거나 아예 없는 서비스가 되는 거죠.

그래서 사실은 저희가 성능 내지는 안전성을 개발의 중요사항으로 해왔지만 사실은 아무도 안 쓰는 서비스였습니다.
그래서 그 요구사항은 별로 의미가 없는 거였죠.

그래서 우리가 개발을 해야 했을 때 그 개발 과제를 바라봤을 때 느꼈던 것과 실제로 해봤을 때 정말 어려웠던 점과 고민했던 점은 명확히 달랐어요.

추천 성능 내지는 안전성이 전혀 문제가 아니었고요.

우리가 다루려는 도메인을 이해하려는 것과 그 도메인에서 예를 들면 카드를 발급받으려는 거를 이해하는 것, 그들이 원하는 거를 정의하는 것이 훨씬 더 중요하고 가치있는 일이었다는 거를 일을 해보고나서 알게 되었던 거죠.

그래서 만약에 우리가, 그러니까 저희가 어떤 실행을 위해서 무언가를 결정을 하게 된다면 문제정의에 있어서 저희가 아마 성능을 가장 중요한 요구사항으로 정의하고 했었을 거예요.

다만 우리가 학습하는 조직이고 창업초기이기 때문에 이해하자는 바탕으로 결정했기 때문에 만약에 이 결정을 학습하는 결정이라고 부를 수 있다면 저희의 목표는 성능이 아니라 이 문제를 이해하고 우리의 제품을 이해하는 것이 되겠죠.

그렇기 때문에 기술에 대한 선택 초이스가 두 결정이 완전히 달라졌던 거고요.

자바로 했던 경험으로써는 이렇게 계속 바뀌는 구조에서 매번 기존에 Strict한 타입을 유지하면서 자바를 개발했다면 아마 파이썬으로 카드추천 개발했던 것보다 훨씬 더 많은 시간이 걸렸을 것 같고. 당연히 이 도메인의 이해, 제품을 사용하는 사용자들의 이해는 늦어졌을 거고.

늘, 스타트업에서 학습이 늦어진다는 거는 그만큼 학습비용이 눈덩이처럼 커졌을 거라는 생각이 듭니다.

이런 식으로 저희가 뱅크샐러드 앱을 만들었었는데요.

현재 버전은 뱅크샐러드 앱의 카드추천 기능입니다.

예전과는 달라졌는데.

이번 버전 같은 경우에는 사용자의 실제 소비내역을 가지고 있기 때문에 사용자의 인풋을 넣을 필요가 없어요. 사용자가 가지고 있는 실제 내역데이터를 바탕으로 카드혜택을 계산하는 게 저희가 개발해야 하는 서비스의 목표가 되었습니다.

그런데 그말인 즉슨, 사용자가 인풋을 넣을 필요가 없다는 거는 인풋의 개수가 저희 입장에서는 기존에 16개였던 거에 비해서 약 900개쯤 됩니다.

즉 900개의 소비내역을 바탕으로 카드혜택을 계산해야 되고 그렇기 때문에 난이도가 훨씬을 더 높아진 거죠.
그래서 나에게 맞는 카드 10개를 만들기 위해서 저희가 1억 3천 7백 70만번의 계산을 해야 되는 문제가 된 거죠.

당시에 개발팀은 늘었지만 카드추천을 개발할 수 있는 사람은 두명밖에 없었어요.

왜냐하면 워낙 서포트해야 할 일이 많았기 때문에 신규개발에 참여할 수 있는 인원은 두명밖에 없었습니다. 그런데 저희 중에 누구도 정말 헤비한 문제를 경험해본 사람이 없었어요.

실시간으로 1억만번을 계산하면서 그 결과가 1초내에 나오는 요구사항을 만족한 경험이 아무도 없었던 거죠.

두명이 담당하기에는 너무 난이도가 높았습니다.

우리 조직의 역량과 일의 난이도를 두 축으로 나눌 수 있다고 하면, 저희가 잘할 수 있는, 그리고 하면서도 되게 재미를 느끼는 일의 형태는 저희의 역량과 난이도가 어느 정도 일치하는 그런 일을 했을 때 몰입도 잘 되고 가장 잘 할 수 있다고 생각이 드는데요. 카드 추천앱의 카드추천이라는 거를 받았을 때 저희가 느꼈던 감정은 이거였어요.

이거를 비슷한 문제를 해결해본 경험도 없고 당연히 자연스레 역량도 부족한데 일의 난이도는 너무 높았던 거죠.

그러면 여기에서 저희가 또 한번 느끼는 문제는 일의 난이도를 낮춰야한다는 게 저희의 결론이었죠.

왜냐하면 역량을 단기간 높일 수 있는 방법은 별로 없다라고 봤어요.

비슷한 문제를 해결해본 사람이 다른 사람한테 조언을 구할 수 있는 환경도 아니었고요.

그렇기 때문에 이 문제를 해결하기 위해서는 우리의 역량을 단기간에 높일 수 없기 때문에 일의 난이도를 낮춰야된다라고 생각을 했습니다.

일의 난이도를 낮추는 방안으로 다시금 파이썬을 떠올리게 된 거죠.

이 요구사항을 보고 새로운 개발자는 일억번 계산하려면 단일 컴퓨터 머신에서 빠르게 작동하는 언어를 선택해야 한다는 입장이 지배적이었지만, 당시의 일의 난이도가 너무 높았기 때문에 우리 팀이 경험해보지 않은 새로운 언어로 무언가를 개발하는 게 어려웠고.

오히려 제가 느끼기에는 난이도를 높이는 일이었습니다. 낮추는 게 필요한데요.

그렇기 때문에 비교적 저희팀이 익숙한 언어인 파이썬을 이용해서 난이도를 낮추는 전략을 세웠고요.

그 경험에 대해서 발표자료를 준비하면서 비슷한 사례가 무엇이 있을까?를 찾아봤는데요. 엘리톤스라는 사람이 있는데 이 사람은 아마추어망원경제조쪽에서 유명한 사람이라고 합니다. 그 사람이 이렇게 이야기했다고 합니다. 망원경 같은 경우에는 구경의 반경이 직경이라고 해야 되나요? 인치수가 크면 클수록 만드는 난이도가 훨씬을 더 높아지는데요. 4인차 광산형 망원경을 만드는 후에 6인치를 만드는 게 6인치 반사경을 바로 만드는 것보다 더 쉬울 뿐더러 더 낫다고 표현했는데. 그거를 해석하자면, 더 쉬울 뿐더러 더 빨리 만들 수 있다에 가깝다고 봅니다.

그래서 저희는 이 아이디어를 차용했는데요.

예를 들어서, 우리가 달성해야 하는 성능에 대한 다른 대안으로써 스칼라라는 언어가 있었습니다. 이 스칼라는 난이도가 높아지니 비교적 익숙한 언어인 파이썬을 이용해서 카드추천을 만들어보고 거기에서 나오는 문제 자체에 대한 공통적인 핵심, 내지는 우리가 알지 못 했던 메타적인 정보들을 얻고 그거를 파이썬을 통해서 해결해본 후에 비교적 익숙치않은 스칼라라는 언어로 포팅해보는 작업을 해보자가 저희가 내렸던 의사결정사항이었어요.

불안정하고 혹은 성능이 나오지 않을 거라는 사실을 알고 있지만, 그럼에도 불구하고 파이썬으로 동일한 기능을 수행하는 프로그램을 먼저 만들어본 것이죠.

가운데 영역에 겹치는 주황색으로 표현된 부분이 저희가 파이썬 프로그램을 개발하면서 얻고자 했던 바람으로 이해해 주시면 될 것 같습니다. 실제로 파이썬으로 카드추천 프로그램을 개발했었고요.

역시 예상대로 정말 오래 걸렸습니다.

1억번의 데이터를 불러와서 계산을 하는데.

아이오 시간만 80초가 나왔어요.

그냥 900개의 소비내역을 불러오고, 3060개의 카드혜택을 불러오는 데만 80초가 걸렸거든요.

문제에 대해서 알게 된 게, 일단은 카드의 혜택을 계산하는 것도 중요하지만 아이오 문제를 해결하는 게 일단 당연히 필요하다.

그리고 이거는 모든, 어떤 언어를 쓰든 프레임워크을 쓰든 동일한 문제를 가져올 것이기 때문에 이 문제에 있어서 아이오 문제를 해결해야겠다고 생각한 거죠.

그래서 비교적 간단하고 데이터구조를 변경하기도 쉬운 파이썬을 통해서 우리가 어떻게 데이터를 관리하고 데이터를 불러와서 반영할 것인가 하는 아이오 구조 자체를 파이썬을 통해서 먼저 구조를 확립했어요.

이 구조는 그대로 스칼라를 이용한 시스템으로 포팅이 되는 거죠.

두 번째로, 도메인상에 문제가 있었을 때 우리가 지금 만들어놓은 알고리즘에 분명한 바틀넥이 있습니다.
바틀넥을 알기 위해서는 언어를 뭘 쓰냐가 중요한 게 아니라 어떤 언어든 연산양이 헤비하게 늘어나는 거는 언어의 특성을 지우면 거의 동일하다고 생각해요.

그렇기 때문에 파이썬으로 비교적 빠르게 쉽게 카드추천에 대한 알고리즘를 개발하고 그것을 프로파일을 통해서 도메인상으로 가장 문제가 되는 지점이 무엇인지, 가장 성공의 방법이 어디인지를 저희가 밝혀내겠다는 거죠.

그래서 이러한 파이썬을 통해서 알게 된 어떤 문제를 파이썬 내에서 조금 더 쉽게 알고리즘를 짜서 해결하고요.
그거를 그대로 스칼라로 옮겨가면서도 동일한 알고리즘을 스칼라언어로만 다시 작성했습니다.

이런 식으로 저희가 느끼는 이 문제의 난이도를 파이썬으로 먼저 만들어보고 거기서 오는 메타적인 지식과 도메인에 대해서 넓어진 지식을 바탕으로 요구사항을 할 수 있는 방법으로 다시 재작성한 것이죠.

이렇게 두 가지로 나눠서 표현할 수 있을 것 같은데요.

먼저, 실행을 위한 조직은, 실행만을 위한 조직이 어감상 맞는 것 같습니다.

실행만을 위한 조직은 무언가를 학습하고나서 행동을 하게 됩니다.

예를 들어서, 이런 언어 내지는 이런 도구를 사용하면 이 문제를 해결할 수 있을지 없을지를 장기간의 리서치를 바탕으로 행동에 나서는데요.

저는 학습하는 조직은 보통은 그렇지 않다고 봅니다.

왜냐하면 요구사항에 대해서는 앞서 누누히 말씀드렸지만 저희가 실제로 그 일을 해보기 전까지는 완벽하게 알 수 없다고 생각해요. 대부분의 일에 대해서.

그렇기 때문에 학습하는 조직은 행동을 함으로써 배운다는 생각.

또한 직원에게 주어진 재량으로서는 일반적인 경우라고 생각합니다.

반드시 학습하는 조직의 경우에는 시행착오를 통한 실험을 직원이 할 수 있게끔 직원의 재량으로 돌려주는 게 학습하는 조직의 모습이라고 생각하고요.

마지막으로 여기가 아마 발표의 핵심이 될 것 같은데요.

어떤 조직에서든 실패는 늘 있습니다. 그게 아무리 잘 디자인되고 잘 계획되었다고 해도 무언가의 일로 실패는 겪게 되는 거죠.

그런데 그 실패를 통해서 실패에 대한 반응이 학습하는 조직과 실행만을 위한 조직은 명확하게 다르다고 생각하는데요. 실행만을 위한 조직은 제대로 했냐고 묻습니다.

반면에 학습하는 조직은 이 실패를 통해서 우리가 배운 게 뭔지를 묻습니다. 아마 이 질문이 가장 큰 차이일 것 같습니다.

그래서 일부러 실패하기 위해서 파이썬 카드추천 알고리즘를 다시 개발하고 나서 저희가 얻었던 지식이 무엇이냐고 하면, 새로운 환경이나 언어의 난이도를 할 만큼 도메인이 쌓였고.

다만 이 언어의 문법을 익히기에만 집중하면 됐던 거죠.

우리가 해결하고자 하는 카드추천에 따라 오는 우리가 상상하지 못 했던 문제들을 해결하는 것을 훨씬 더 빨리 해결책을 찾을 수 있었고. 익숙치 않았던 방법이었다면 그 방법을 찾기가 어려웠을 거라고 생각합니다.

합을 맞춰서 실제 제품으로 배포를 해두고 베타 상태로 유지하면서 다시 스칼라로 갈아끼우는 작업을 병렬로 진행했습니다.

실제로 카드추천을 아주 단기간 동안 운영하면서 배운 바가 있었고 이 배운 바를 통해서 저희가 스칼라로 다시 짤 때는 좀 더 집중할 부분과 스칼라로 다시 짜면서 카드추천을 했을 때 예상되는 이윤이라든지 사용자에게 제공할 수 있는 가치에 대해서 미리 학습할 기회가 있었던 거죠.

예를 들면, 왼쪽 리뷰 같은 경우에는 카드추천에 대한 부정적인 리뷰입니다. 너무 느리고 등등등의 반응이 있었는데 우측 같은 경우에는 카드추천에서 굉장히 좋은 반응들이 많았어요.

저희는 여기에 좀 더 집중을 해도 된다는 결정을 내릴 수 있었고. 이게 조직적 학습이라고 생각합니다.

이런 반응들이 나왔고 실제로 지표로 얼마나 이어지는지를 측정함으로써 전사적으로 이 프로젝트를 잠깐 축소하고 카드추천을 스칼라로 옮기는 프로젝트에 좀 더 많이 투자해야겠다는 의사결정을 내릴 수 있었고. 그를 바탕으로 소울을 굴릴 수 있었던 기회였지 않았나 싶습니다.

마지막으로 따온 그림입니다.

아마 유명한 그림이기 때문에 다들 많이 보셨을 거라고 생각이 드는데요.

제 주변에서 린스타트업 애자일 정신에 있어서 이것을 단계적으로 순차적으로 개발하는 것 내지는 제품을 만드는 것이라고 착각하는 경우를, 혹은 오해하시는 경우를 저는 너무 많이 봐왔습니다. 조직적 학습에서 말하고 싶었던 거는 린의 정신이나 애자일의 정신은 사실은 조직이 학습하는 방법이라고 생각을 하는데요.

바퀴를 만들고 자동차의 프레임을 만든 후에 둘을 합체하는 거는 이 자동차가 잘 동작할 것인지에 대한 불확실성이 매우 클뿐만 아니라 더 좋은 자동차를 만드는데 필요한 학습이 만드는 과정 중에 전혀 일어나지 않습니다.

그러나 아래 예시처럼 스케이트보드를 먼저 만드는 경우에는 만들기도 매우 쉽고 그렇기 때문에 사용자를 더 빨리 만날 수 있고 사용자에 대한 이해를 좀 더 앞당길 수 있기 때문에 자동차를 만드는 과정에서도 학습이 일어납니다.

그렇기 때문에 학습하는 조직의 경우에는 필연적으로 린이나 애자일 정신을 따라야 한다고 생각하는데요.

변화 외에 영원한 것은 없다는 이야기가 있습니다.

학습하는 조직, 조직에서 학습이 중요한 이유는 우리가 만들던 것이 우리의 제품이 성장하기 위한 것이 계속 매번 바뀌기 때문이라고 생각하는데요. 

이 변화를 좇는 데에는 린과 애자일을 중요하게 생각하듯이 생각합니다.

발표 들어주셔서 감사하고요.

발표 자료를 구성하면서 참고했던 문서들은 발표 자료 후반부에 첨부를 해놨습니다.

마지막으로 저희 뱅크샐러드가 파이콘의 후원자로 참여하면서 이런 행사를 운영하고 있어요.

그래서 뒤에 뱅크샐러드 부스로 방문해 주시면 스티커와 간단한 이벤트에 대해서 설명을 드리도록 하겠습니다.

발표 들어주셔서 감사하고요.

혹시 궁금하신 점 있으시면 질문 부탁드리겠습니다.

감사합니다.