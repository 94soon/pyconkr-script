-다음은 나승채 님께서 발표해주시겠습니다.

-안녕하세요? 저는 마이스터고등학교에 현재 재학 중인 고등학생인데요. 

제가 이러한 주제로 발표를 하려고 했습니다. 

제가 지금까지 공부한 것을 아주 간략하게 정리한 건데 우선 컴퓨터가 여러 가지 구조가 있는데 과거로 돌아가면 이렇게 나뉩니다.

다양한 컴퓨터가 있는데요.

우선 스택기반 컴퓨터는 말 그대로 스택 구조를 사용해서 주 메모리에 있는 거를 A, B를 가져와서 더하고 C로 내보냅니다.

그런데 이게 메모리 오버헤드, 접근방식이 너무 커져서 느려서 이것을 보완한 것이 누산기 기반 컴퓨터인데요.

이게 여기 그림에 보시다시피 블록이 세 개로 명령어가 세 개로 나뉘어서 간략화되었고 이것 같은 경우에는 애플1에 쓰였던 프로세스였습니다.

다음으로는 저희가 흔히 사용하는 흔히 볼 수 있는 CPU가 전부 다 레지스터 기반 컴퓨터라고 레지스터가 중점이 되는, 그러니까 레지스터를 이용해서 안에 있는 것을 저장하고 오버헤드가 매우 극소화되어서 명령을 실행하고 효율적으로 프로세스를 돌릴 수 있는 그러한 구조입니다.

그다음에 CISC와 파이프라인에 대해서 소개하겠습니다.

CISC는 CPU의 하나의 구조예요.

복잡한 명령어라고 말하는데요. 

이게 왜냐하면 명령의 길이가 가변적이라서 그런 거고요.

이게 하나하나 실행하다 보니까 파이프라인이라는 개념을 이용해서 좀 더 효율적으로 극대화시킨 기법이에요.

보시다시피 명령어가 패치, 디코드, 익스큐트, 롸이트백 이렇게 실행이 되는데 이거를 나눠서 예를 들어서 1번 명령어가 익스큐트 되고 있을 때 2번 명령어는 디코드 되는, CPU를 효율적으로 사용하는 기법이에요.

하지만 이것 같은 경우에는 각종 하자드 이런 문제를 일으켜서 설계 시 주의가 좀 더 필요합니다.

그리고 또 RISC가 있는데 그러니까 아까 것과 달리 명령어가 간소화 되어서 16비트와 32비트 크기가 고정이 되고 또 범용 레지스터 개수와 효율이 증가하는 그런 효과를 봤었는데요.

하지만 이제 코드의 길이가 매우 증가하고 당시에는 x86 구조가 대세여서 나온 지 올해 지나서 슬슬 주목받기 시작했습니다.

현재 같은 경우에는 CISC, 그러니까 복잡한 명령어를 수행할 수 있는 RISC 구조.

겉보기에는 복잡한 명령어가 들어가지만 내부는 간단한 명령어로 해석이 되어서 간단히 빠르게 처리되는 CPU 구조가 있고요.

현재 같은 경우에는 병렬 프로세서 기술.

그러니까 병렬성, 4코어 이렇게 8코어 이렇게 나뉘는데요. 

이게 CPU의 프로세서가 안에 내부적으로 여러 개가 들어가서 조금 더 효율적으로 극대화 시킨 기법이지만 역시나 캐시의 일관성 같은 이슈가 대량으로 발생해서 더욱더 세밀한 설계가 요구되고요.

병렬 프로세스를 좀 더 말하자면 VLIW라는 것도 있고 벡터 프로세서, 그러니까 일정한 양의 배열들을 한꺼번에 처리할 수 있는 그런 프로세서가 대표적이고요.

지금 같은 경우에는 또 ILP보다는 TLP이 중요시 돼요.

이것은 명령어 단위보다는 쓰레드 단위 병렬성이 중요시 되어서 그로 인해 어셈블리 언어를 개발할 이유도 굳이 없어졌고 하이레벨, 속도가 극대화 되어서 매우 하이레벨로 언어를 개발하는 것이 좀 더 효율적으로 변했죠.

솔직히 좀 더 병렬성에 대해서 많이 설명해야 하지만 간단하게 설명하려고 이렇게 마치겠습니다.

감사합니다.

(박수)
