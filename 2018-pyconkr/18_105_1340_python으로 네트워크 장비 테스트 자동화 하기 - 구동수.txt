지금부터 python으로 네트워크 장비 테스트 자동화 하기에 대해서 시작하겠습니다.

반갑습니다.

저는 다산네트웍스 검증소프트웨어웨어개발실에서 연구원입니다.

품질 테스트 자동화에 대해서 관심이 받고 어떻게 하면 네트워크 장비를 더 잘 검증할 수 있을까 연구를 하고 있습니다.

살도 많이 찌고 있어서 살도 빼고 있습니다.

제가 이 발표를 시작하게 된 것은 파이썬 네트워크 장비 테스트 자동화에 사용을 하고 있어요.

1년 동안 동료들과 함께 파이썬 사용을 해서 테스트케이스를 만들었는데 공유를 하고 있었고 파이콘의 다양성에도 부합한다고 생각해서 발표를 하게 되었습니다.

파이썬은 데이터 웹 이외에도 인프라에서 굉장히 많이 사용되잖아요.

2017년에 파이콘에서 이 분야에 대해서 없어서 아쉬운 마음에 저희 영역을 알리고 싶어서 참석하게 되었습니다.

제 발표는 이러한 분들, 자동화를 도입하고 계시거나 생각하고 계신 CLI 기반 소프트웨어 테스트 엔지니어분들 파이썬이 무서워서 시작을 못하고 계신 수동 엔지니어 분들을 대상으로 하고 있습니다.

저도 얼마 하지 않았는데도 불구하고 무언가를 할 수 있다는 거에 대해서 용기를 얻었습니다.

저는 발표를 이렇게 진행하려고 해요 개발을 하면서 고민이 있었 어떻게 접근했는지에 대해서 설명드리려고 합니다.

첫 번째 고민은 네트워크 장비 테스트 장비에 대한 고민이었어요.

일반적으로 파이썬과 같이 자동화를 시킬 것인가.

어떤 부품들이 필요한 것인가 이게 제일 처음 고민이었어요.

네트워크 장비를 기준으로
하고 있었던 수동 정리를 해봤어요.

네트워크 장비를 테스트를 해보겠다고 하면 테스트에 앞에서 준비를 하고 시험에 필요한 설정들을 테스트 장비에 설정을 하기 시작하죠.

테스트 패킷을 만들고 시험 장비가 동작을 하는지 확인을 한 다음에 확인 결과를 옮겨다 적는 제가 하는 일반적인 네트워크 테스팅이었습니다.

정리를 해보자면 저한테 필요했던 거는 저는 장비에 접속을 하고 설정하고 패키지 써보고 확인할 수 있는 것들이 필요했던 거예요.

그것이 세 가지였습니다.

이 세 가지 통해서 네트워크 장비 테스트라는 이야기를 만들어낼 수 있게 됐던 것입니다.

그래서 사람이 장비에 접근을 해서 명령을 내리는 것처럼 접속하고 제어할 수 있다고 해주고 프로그램 정의를 해서 정의한 패킷을 쏴주고 받아보고 할 수 있도록 해주는 것입니다.

유니테스트는 그리고 테스트 형식 기본적인 형식을 마련해 주는 데 사용을 했습니다.

그래서 결국에는 장비에 접속을 하고 패키지 쓰고 잘 들어오는 것을 확인하는 것을 하고 있고 실행 절차라든지 형식 절차를 유니테스트 구성을 할 수 있겠죠.

왼쪽에 기존 수행을 하던 파이썬과 함께 하면서 오른쪽 형태로 가게 되는 거죠 유네 테스트라는 형식 위에서 특정한 부분을 장비에는 설정을 내리고 혹은 어떠한 단계에서는 패킷을 쏴서 그렇게 확인을 하고 어떠한 특정 테스트 단계에서는 해지해 주는 그런 일련의 이야기들을 만들 수가 있었던 것입니다.

그래서 결론적으로는 핵심적인 방법을 통해서 수동 진행을 했었던 것을 자동화 하는 데 자동화라는 그림을 그릴 수가 있었습니다.

그래서 그다음으로 마주했던 고민은 장비 제어에 대한 고민입니다.

장비에 접속을 하고 제어를 할 수 있는 데까지는 좋았으나 제가 실제 현실에서 마주했던 또 하나의 고민은 이러한 것이었습니다.

동작은 같지만 커맨드가 다른 것이었습니다.

그다음에는 테스트 자체에 대한 몇 가지 고민들이 있었습니다.

첫 번째로는 테스트 절차와 구조를 정의하는 거였습니다.

기본적으로 유니테스트 같은 경우에는 셋업 테스트 총 세 가지 진행이 되었습니다.

저희는 셋업과 테어다운 세부적으로 역할을 부여를 하고 테스트케이스 정의를 했습니다.

각 단계를 설명을 하면 셋업 커먼은 시험장비 확보 계측기 준비 케이블링을 하고 셋업 테스트 경우에는 테스트데이터 준비를 하고 시험을 위한 설정을 하는 절차.

전반적으로 시험을 위한 논리적으로 구성을 하는 테스트.

테스트의 경우에는 실제로 테스트를 하고자 하는 시험 목적을 확인하는.

확인한다는 것은 장비에 들어가서 실제로 내가 체크할 수 있는 상태를 얻어오는 커맨드를 하는 것과 확인을 해서 테스트 실패 유무를 결정짓게 되는 것이고 논리적인 환경 구성 해제 티어다운 테스트에서 정의를 했습니다.

테스트케이스의 절차와 구조를 함으로써 규칙이 생기게 되고 형식에 맞춰서 구현할 수 있게끔 되었습니다.

그다음에 맞닥뜨리게 된 고민 중 하나는 테스트케이스 최소한의 조건이 왜 필요하냐면 테스트케이스가 실행되기 위해 만족하지 않는다면 의미가 없거든요.

디바이스언더테스트와 최소한의 요구조건에 만족하지 않았을 때는 테스트가 동작하지 않고 스킵이 되게끔 부여를 했어요.

이쪽에서 그림을 보시면 가장 위에 빨간색 부분 4개 이상 있고 테스트를 다 할 수 있다.

파란색 부분은 모델 A 장비군만 가능하고 테스트가 가능하다고 얘기하고 있죠.

초록색 같은 경우에는 디바이스 D라고 하는 표현을 하고 있습니다.

이러한 논리적인 물리적인 자원의 개수 그것을 갖고 있는 기능들 또 다른 다른 기타 등등 필요한 요구조건을 만족하는지 체크를 하고 이렇게 실행유무를 결정을 해서 테스트라고 생각하시면 될 것 같습니다.

장비 하나를 가지고 저희가 가지고 있는 테스트케이스를 본다고 했을 때 테스트 할 수 없는 것들은 테스트가 되지 않고 지나가게 되었습니다.

그다음으로 결과를 확인하는 부분에 대한 고민이 있었어요.

결과를 확인한다는 것은 저희가 일련의 절차 중에서 장비를 설정하고 어떠한 테스트를 통해서 테스트의 목적에 맞는 형태로 했는지 확인을 하는 절차도 커맨드를 내려서 그것이 뿜는 아웃풋을 가지고 확인을 하거든요.

사람으로 따졌을 때 굉장히 쉬운 행위잖아요.

장비에 들어가서 본 다음에 커맨드를 내려서 여기에 내가 생각했었던 도달 했네.

존재가 하고 있네 이렇게 보게 되는.

사람들이 넘어갈 수 있지만 이 아웃풋을 보고 제대로 되었다 하는 것을 구현하기 위해서 실제로 테스트를 통해서 커맨드를 내리게 되면 밑에 있는 한 줄짜리 러프한 스트링이 들어오게 되는데 해석할 수 있는 객체로 만들어주는 게 필요했던 것이죠.

그래서 TC 쪽에서 결과를 확인하기 위한 함수를 표출을 하게 되고 커맨드를 내려주는 부분에서 DUT는 러프한 스트링이 돌아오게 되어 있고 러프한 스트링이 해석을 할 수 있는 개체로 만들어줘서 결국에는 결과를 프로그램으로 진행을 해서 어떠한 결과를 만들어줄 수 있는 거죠.

명령어를 통해서 테스트 중에서 결과를 확인하고 있는데 특정한 레코드가 존재를 하는가에 대해서 체크를 하고 그것에 대해서 오른쪽 테스트케이스 내가 의도했던 결과를 갖고 있는가 확인을 하는 부분인데 그것을 확인을 하기 위해서 실제로 겟아웃테이크라는 함수를 하게 되고 왼쪽에서 러프한 스트링을 오른쪽에 형태가 있는 객체로 만들어줘서 실제 결과가 비교를 하고 있죠.

결국에는 시험 그 자체로 러프한 스트링 안에서 우리가 의도한 존재를 확인을 하게 되었고 수월하게 진행될 수 있도록 만들었습니다.

그리고 그다음으로 절차서와 테스트케이스가 다른 파일로 존재하는 게 싫었습니다.

그것은 테스터분들이 공감하실 거예요.

왜냐하면 테스터분들이 일반적으로 워드파일 일부는 엑셀파일로 가지고 있고 거기에서 사용되는 테스트베이스 파일도 따로 갖고 계시는 분들도 있어요.

이것들이 따로 형성이 관리가 되고 시작하면 이거는 어느 수준에 있어서 분명히 불일치가 생길 수 있거든요.

그래서 불일치를 어떻게든 줄일 수 있는 방법은 없을까 생각을 하게 될 텐데 코드로 관리를 같이 해버리자 아이디어가 있었어요.

그래서 스핑스라는 게 있었고 커맨드 부분을 기술된 것을 제너레이션 시켜서 도구로 만들 수게 있게 됐어요.

테스트 프로듀스 테스트케이스가 있다는 거예요.

수정을 하면 된다는 거죠.

그래서 하나의 형상 안에서 관리가 됨에 있어서 변경이 되었을 때 테스트케이스가 변경되지 않는 불일치가 최소한으로 줄어들게 되더라는 걸 알게 되었습니다.

그다음에는 테스트 결과와 관련된 몇 가지 고민이 있었습니다.

몇 가지 고민이라고 하는 것은 테스터 분들이 테스트 실행 확인 절차 등도 중요하지만 무엇보다도 중요한 것 중 하나는 테스트 결과입니다.

테스트를 내가 실제로 하시는 분들은 말씀드렸던 것처럼 엑셀에서 몇 월 며칠에 수행을 했더니 테스트 결과가 나왔다 그리고 거기에서 수행을 하면서 특정한 텍스트 파일이라든지 다른 파일로 저장을 해서 거기에 대한 이게 왜 어떻게 페일이 됐는가 대해서.

이런 부분들을 자동으로 알리고 싶었어요.

테스트를 거쳐갔던 그리고 테스트가 실패나 에러가 났다고 하면 발생된 페일에 대한 메시지로 저장이 되면 우리가 보고 이런 지점에서 테스트가 실패했다는 것을 확인할 수 있다는 거죠.

그리고 전체적인 결과를 만들게 되면 전반적인 테스트가 어떻게 수행이 됐는지 알 수 있는 거죠.

결국에는 수행이 됐었던 것들 그리고 테스트가 페일 되거나 에러가 됐을 때 메시지 같은 것들 수행이 됐을 때 수행이 되는 저장을 할 수 있게 했습니다.

그래서 결국에는 이런 결과들이 관리가 되기 시작했고 더 넘어서는 더욱더 필요한 것 중 하나는 분석을 하는 거잖아요.

분석에 하는 데 있어서 테스트 범주 안이 될 수 있고 혹은 여태까지 실행했던 모든 테스트케이스 여러 가지 히스토리를 가지고 할 수 있을 거예요.

지난 며칠간의 테스트 결과를 알고 싶다는 그런 것도 생길 것이고 특정한 테스트케이스 하나가 장비별로 어떤 테스트 결과를 가지는가 혹은 어떤 요인의 테스트 실패가 가장 많을까 이런 것도 알고 싶고 그 외에 정말로 많은 것들이 있을 것입니다.

그래서 저희는 이에 대해서 테스트가 실행이 될 때마다 이 테스트를 어디인가 한곳에 결과를 누적시킬 수 있는 시스템을 만들었어요.

엘라스틱서버를 구축을 했고요.

결과가 쌓이도록 만들었습니다.

그래서 한 곳에서 뭉쳐 있는 데이터를 가지고 보고 싶은 걸로 시각화를 시켜서 할 수가 있었고 혹은 특정 다른 시스템에서 결과를 가지고 응용을 할 수 있게끔 만들었습니다.

그리고 혹은 어떠한 특정 기간 통계를 내는 데 쓰이고 있습니다.

추세와 함께 분석이 가능하게 되었습니다.

테스트 자원 관리 자체에 대한 고민이 있었습니다.

관리 필요한 정보, 테스트를 이루고 있는 모든 자원들을 각자가 그냥 테스트 시점에 갖고 있다가 테스트가 필요하지 않으면 해체시키면 별의미가 없잖아요.

재사용을 할 수 있고 어떠한 장비들이 테스트가 가능한지 이런 것들을 한 군데에 뭉쳐서 관리하고 싶었어요.

파이썬을 통해서 시스템을 만들었고 시험 장비 접속 가능한 기타 정보들 장비 타입이라든지 물리적인 연결 관계 등 이런 것들을 저장을 해놨고요.

그리고 장비의 예약 반납 메커니즘을 주입을 해서 특정한 테스터, 특정한 개발자가 이 장비는 내가 예약해놨어 사용 중이야 라는 것을 표시할 수 있게끔 그리고 테스트 프로그램 안에서 실행을 시킬 때 대상 사용자가 테스트 장비를 했을 때 이것이 예약되어 있지 않다고 했으면 중복되지 않게끔 만들었습니다.

결국에는 방금처럼 중앙집중적으로 결과가 모이는 거랑 중앙집중적으로 테스트 자원들이 모이게 되는 거는 한 곳에서 관리할 수 있다는 이점이 있고 그것을 통해서 무언가를 응용을 할 수 있다는 것에 큰 의미가 있었습니다.

이거와 관련된 실행 돌영상을 보여드리겠습니다.

테스트를 실행을 시키고 있고요.

테스트가 실행이 되게 되면 내부적으로 행아웃챗을 사용을 하고 있는데 거기에 직접 날리게 되어 있어요.

몇 개의 테스트케이스가 실행이 됐는지 만들었고 설정이 되고 있는 거예요.

실제로 장비에 들어가서 테스트를 하기 위한 필요 조건, 설정들을 내리고 있는 부분들을 수행을 하고 있는 거죠.

컬러로 중간중간에 커맨드를 내리는 부분에 조금 더 보기 수월하게 만들어졌고요.

설정을 하고 실제로는 여기에서 부터 테스트를 실행하시작하는 거예요.

장비가 쓰고 패킷을 받은 다음에 내가 생각했던 특정한 행위를 했는지 확인을 해서 내가 생각했던 것과 맞는지를 확인을 하게 되는 거죠.

그래서 이것이 맞으면 다음 단계로 넘어가게 되고 테스트의 단순 절차죠.

그다음 단계 확인 절차를 진행을 하게 되는 거죠.

이런 것들이 반복되고 실제로는 이런 부분을 찍고 있습니다.

결국에는 테스트에 필요한 설정들, 테스트 확인하는 몇 가지 부분들 완료가 되어야지 테스트가 성공했다고 볼 수 있습니다.

그리고 아무런 문제 없이 테스트가 수행이 된 다음에 설정이 되었던 자원들을 정히가 되고 있습니다.

그리고 설정된 부분들은 해제가 되는 부분이고 테스트가 끝나게 되면 끝난 것 자체가 나오게 되어 있어요.

그리고 엘라스틱서버로 결과를 보내서 그리고 서버에 보내지는 것이고 방금 전에 리절트에 대한 넘어오게 되는데 링크를 누르게 되면 바로 이렇게 테스트 결과들이 들어가 있도록 접근을 할 수 있도록 만들어진 엑셀 파일 본다거나 그리고 이쪽에 메시지를 확인을 하고 지금 OK에서 별다른 게 없고.

테스트를 도착하면서 했었던 로그들을 저장을 시켜놓고 있습니다.

로그는 한 파일로 저장되는 게 아니라 각자 파일로 만들어졌고요.

이런 식으로 테스트 만들었습니다.

이렇게 하다 보니까 결국에는 얻은 것들이 있어요.

수동 테스트밖에 하지 않던 제가 자동화를 해나가면서 첫 번째로는 개발과 더 착 달라붙을 수 있었어요.

이게 어떤 의미가 있냐면 처음에 저희 같은 경우에는 장비가 개발이 되고 소프트웨어가 개발이 된 다음에 확인하는 작업을 해야 하는데 기다리지 않고 이러한 커맨드가 만들어질 거고 확인이 될 거야 라는 것만 있으면 그것만 디자인이 되어 있다면 그걸로 테스트를 만들 수 있다는 거죠.

코드적으로 만들어놓고 개발이 돈 것들은 개발자한테 어떠한 테스트케이스가 있으니 이렇게 하면 됩니다.

결과를 확인해 주세요 커뮤니케이션을 하게 될 수 있게 되었습니다.

그래서 이것이 뭔가 완성될 때까지 굳이 기다리고 있어야 하는 불필요한 갭을 없애고 두 번째로는 개인차에 따른 테스트 수준이 맞춰졌어요.

자동화의 가장 큰 이점은 프로세스가 반복적으로 수행될 수 있다는 건데 테스트케이스 하나를 만들게 되면 가장 높은 실력을 갖고 있는 사람의 테스트 노하우가 생길 수 있다는 거죠.

결국에는 저처럼 아직 네트워크에 입문한 지 얼마 되지 않은 사람도 테스트가 디자인이 되어 있다면 바로 디자인 해서 품질로 만들어낼 수 있다는 것도 확인했습니다.

그다음으로 테스트 자동화라고 하면 사람들이 굉장히 어렵게 생각하시는데 저처럼 맨땅에서부터 헤딩을 하면서 너무 어렵게 생각하지 않으셨으면 하는 바람에 슬라이드를 넣었어요.

정말로 너무 어려워서 이거 어떻게 자동화를 하지 하는 부분은 그냥 나중에 해도 되는 부분이거든요.

그래서 일단은 수동 테스트를 하다가 스킬이 늘어서 그러면 좀더 도전을 해보고 그다음에 자동화를 시켜도 된다고 생각을 합니다.

그리고 가장 중요한 거는 역시나 내가 어떠한 일을 하는데 정말 그 일에 대해서 이거는 너무나 소비적이고 특별한 가치를 부여하지 않는 일이라고 하면 그것부터 자동화를 시작해보시면 될 것 같아요.

시작을 꼭 저처럼 이거 해보려고 하는데 파이썬에서 어떤 필요하게 될까 찾아가는 과정 부품들을 어떻게 연결을 시킬까 하다 보면 결국에는 전체적인 자동화, 일부분의 자동화가 존재하게 되는 거고 좀더 얻게 된 시간 만큼 더 중요한 곳에 투자를 하게 될 것입니다.

좀더 중요한 곳에 시간을 할애할 수 있다는 것이죠.

더 많은 이야기들이 훨씬 많고 이런데 슬라이드를 준비한 것은 여기까지입니다.

파 자동화엔지니어들의 대화를 만들었는데 이곳에서 대화를 나누고 싶습니다.

테스트 자동화와 관련된 많은 이야기들을 나누도록 하겠습니다.

관심 있으신 분들은 저한테 연락을 주시면 될 것 같습니다.

감사합니다.

