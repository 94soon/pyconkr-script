안녕하세요?

뒤에 소리 잘 들리시나요?

저는 이번 파이썬에서 학생 들여다보기라는 주제로 발표를 진행하려고 합니다.

먼저 제 소개를 드리면 저는 아이스크림에듀라는 회사의 지능정보기술연구소 부서에서 근무하고 있고요. 

저는 저희 회사의 홈런이라는 서비스에서 시스템을 개발하는 업무를 맡고 있습니다.

먼저 학습 과정에 대해서 생각해보고 이 과정에서 학습 데이터 구조화에 대해서 알아보겠습니다.

두 번째로 학습 데이터 저장을 알아보겠습니다. 

마지막으로는 저장한 이벤트를 바탕으로 간단한 학습 구성을 만들어보겠습니다. 

먼저 학습 데이터로 구조화 하기 전에 학습활동을 생각해보겠습니다. 

저는 원래 사범대에서 일반사회를 전공했는데요. 

제가 교생 실습을 하던 때를 생각해보면 밤새가면서 수업지도안을 만들었던 기억이 나는데요. 

보통 다음과 같이 구성돼 있습니다. 

먼저 지난 시간에 배운 내용을 복습하거나 오늘 배울 것에 대해서 관심갖도록 유도합니다.

그다음에 오늘 배울 것을 설명하고 학생들을 조별로 모아서 조별활동을 할 때도 있습니다.

마지막으로는 오늘 배운 내용을 평가하고 수업을 마친다 아니면 다음에 배울 내용을 미리 알려주기도 하죠.

교생이었을 때는 겪어본 적은 없지만 선생님께서 숙제를 내주신 경우도 있을 겁니다.

온라인 학습에서 학생들은 어떻게 공부할까요, 가장 먼저 생각나는 것은 영상 강의일 것입니다. 

강의를 다 들은 뒤 게시판에 질문을 올리고 선생님의 답변을 받을 수도 있을 겁니다.
 
운전면허 시험 같은 것도 본 분이 있을 텐데요. 

온라인으로도 응시할 수 있고 과제로 온라인으로 제출할 수 있습니다. 

학생이 온라인 학습에서 하는 행위들을 보다 보면 이런 점이 발생할 수 있을 것 같습니다.


먼저 강의를 들을 때 처음부터 쭉 듣는 게 나은지, 필요한 부분만 듣는 경우가 많은지.

다음으로는 시험문제를 풀 때 충분히 고민하며 풀까, 찍고 끝낼까.

또 숙제를 내면 바로 제출하는 경우가 많을까, 기한이 될 때까지 미뤘다가 하는 경우가 많을까요.

마지막으로 강의 내용에 대해서 어떤 질문이 자주 올라올까요

이런 의문을 해결하기 위한 데이터는 서로 다른 포맷을 갖고 있습니다.

먼저 RDB에 저장하는 경우가 있는데요. 

하지만 서로 다른 테이블, 서로 다른 방식으로 데이터 저장하는 방식이 많습니다. 

또는 텍스트, JSON, CSV에 저장하는 경우도 많을 겁니다.

한편으로 수집은 가능할 것 같은데 수집하지 않는 데이터도 있을 겁니다. 

주로 개발앱우선순위에 밀릴 경우가 많을 겁니다.

그러면 학생을 위해 우리반을 위해 우리 학년을 위해 우리 학교를 위해 일관성있게 데이터를 저장하고 분석할 방법은 없을까요.

몇 년 전부터 학습 분석이라는 개념이 등장하면서 학생들의 학습 과정에서 발생하는 데이터를 구조화하려는 시도가 있었습니다. 

이 시도는 아직도 진행 중이고 대표적으로 xAPI와 Caliper입니다.

xAPI는 미 국방부 산하기관인 ADL에서 개발하고 있습니다. 

현재 최신 버전은 1.0.3버전입니다.

Caliper 아랄리틱스는 여러 교육기관이 만든 IMS 글로벌 단체가 주도하여 개발하고 있습니다.

2015년 1.0버전과 금년 초 1.1 스펙이 나왔습니다.

xAPI Caliper 모두 JSON 기반으로 하는 데이터구조를 갖고 있는데요. 

화면에서 보실 수 있듯이 학생이 수행한 하나의 학습 활동은 하나의 문장과 같은 데이터구조를 갖고 있습니다. 

즉 우리가 쓰는 말처럼 주어, 동사, 목적어를 가지고 있습니다.

약간의 차이가 있다면 xAPI는 언제 이벤트가 발생했는지를 기록하는지 필수 속성으로 나옵니다. 

하지만 Caliper에서는 이벤트 발생시간이 필수 요소입니다. 

또한 Caliper에서는 이 이벤트가 과제를 하는 과정에서 일어났는지 등을 보기 위한 타입이라는 속성이 있습니다.

하지만 xAPI에서는 이와 관련된 부분이 없습니다.

앞에서 설명 드린 것을 덧붙이 Caliper에서는 학습 유형이 구체적으로 나와 있습니다.

용어가.


책을 읽을 때, 평가술행할 때에 대해서 주어, 동사, 목적어에 들어가야 할 내용이 구체적으로 정해져 있습니다.

이 때문에 학습 행위를 어떻게 표현할지에 대한 고민을 줄일 수 있고요. 

하지만 이러한 점 때문에 학습의 행동, 예를 들어서 앱이나 서비스에서 학습 콘텐츠를 구매하는 것과 같은 표현하는 유연성은 떨어지는 편입니다. 

그 대신 xAPI에서는 데이터 구성을 조금 유연하게 할 수 있습니다.

학습 행위를 표현할 때 주어, 동사, 목적어를 찍기 때문에 좀 더 유연하게 할 수 있습니다.

그러면 이런 표준화 데이터를 썼을 때 어떤 장점이 있을까요. 

저는 먼저 데이터 설계에 들어가는 시간을 줄일 수 있다고 생각합니다. 

어떤 시간, 어떤 시점에 학습을 수집할지, 그리고 데이터는 어떻게 구성할지에 대한 고민을 좀 더 줄일 수 있을 겁니다.

한편으로 표준화된 데이터를 수집하거나 분석하는 툴을 필요에 따라 쓸 수 있습니다.
 xAPI의 경우 학습 데이터를 수집하고 개발할 수 있고 Caliper 경우 오픈LRW, 오픈돼서 쓸 수 있습니다.

그리고 반대로 여러분이 직접 데이터 수집이나 분석에 필요한 도구를 개발하고 배포할 수도 있습니다.

이러한 xAPI는 어도브를 줄 수 있습니다.

또 Caliper에서는 캔버스와 같은 학습관리시스템을 예로 들 수 있습니다.

또 블랙보드가 익숙한 분이 많을 텐데 블랙보드는 대표적인 관리 시스템 중 하나입니다.

저희 회사에서도 Caliper를 이용하고 있는데요.

아이스크림홈런서비스에 3월부터 데이터를 수집하고 있는데 초기에는 매 300, 400만 건의 1기가 이상 자료를 쌓고 있었습니다.

매월 500만 건, 약 2기가 바이트를 7월에 쌓고 있습니다. 

지금까지 설명드린 내용에 대해서 오해할 것 같아 미리 말씀드리면 xAPI와 Caliper는 학습 데이터를 어떻게 구성할지, 어떻게 분석할지 돼 있습니다.

생성하고 저장하고 분석하는 부분은 서비스를 제공하는 여러분의 몫입니다.

다음으로는 학습 데이터를 저장하는 과정에 대해서 말씀드리겠습니다.

xAPI와 Caliper는 화면에서 볼 수 있듯이 다양한 언어를 지원합니다.

물론 두 개 다 파이썬을 지원합니다.

먼저 xAPI에서 지원하는 틴 캔 파이썬를 설치하겠습니다.

2.7버전만 지원하고 마지막 업데이트가 3년 전이어서 유지보수 상황을 알 수 없는 상태입니다. 

이번에는 Caliper를 지원하는 Caliper 파이썬을 설치하겠습니다.

파이썬 3, 2.7버전을 지원하고 있고 PYPL 지원이 없어서 수동으로 해야 하는 단점이 있습니다.

여기서는 일단 주어, 동사, 목적어 역할을 하는 개체를 생성하려 하는데요.

주어의 액터 속성에 들어갈 수 있는 건 그룹 개체입니다.

여기서는 사람 1명이나 하나의 프로그램 시스템을 의미할 수 있습니다. 

필수적인 속성으로는 이름 속성과 이메일 주소를 적어 준다. 그리고 생성한 개체에 대해서 투 제이슨이라고 하면 제이슨으로 표현된 사람을 볼 수 있습니다.

동사 역할을 할 건 동사의 정의에 해당하는 주소를 ID 속성에 적어주고 사람이 이해할 수 있도록 디스플레이 속성의 내용을 채워줍니다.

코드에서 보실 수 있듯이 하나의 행동을 표현할 수 있고요. 

동사 부분도 마찬가지로 투 제이슨 함수를 실행하면 제이슨으로 실행된 동사를 보실 수 있습니다. 

마지막으로 목적어 역할을 할 오브젝트 부분에는 활동을 의미하는 액티비티, 사람을 표현하는 에이전트, 스테이트먼트를 채워넣을 수 있습니다. 

여기서는 어떤 활동을 표현하기 위해서 액티비티 개체를 만들어보겠습니다.

아이디는 특정한 활동을 구분할 수 있는 고유 주소 그리고 이 활동을 설명하기 위한 데피니션 속성입니다.

다음으로는 하나의 학습 활동을 얘기하는 스테이트먼트, 하나의 문장을 만들어보겠습니다.

스테이트먼트에서 꼭 들어가야 할 건 주어, 동사, 목적어입니다.

스테이트먼트의 앞에서 만든 주어, 동사, 목적어 부분을 화면과 같이 채우면 테스트 유저가 테스트 DBT에 로그인할 수 있다는 걸 볼 수 있게 됩니다.

스테이트먼트 또한 투 제이슨 함수를 이용해서 제이슨으로 만들 수 있습니다. 

액터, 주어 부분.

그리고 동사 부분, 오브젝트, 목적어 부분이 들어간 걸 볼 수 있는데요.

버전을 볼 수도 있는데요.

이번에는 Caliper 데이터를 생성해보겠습니다.

Caliper는 하나의 학습 활동을 이벤트라는 데이터로 생성합니다.

이런 이벤트는 학습 활동의 종류에 따라 정해질 수 있습니다. 

예를 들어 로그인 로그아웃을 표현할 때 세션 이벤트, 영상 시청 표현은 미디어입니다.

그리고 각 이벤트에 들어갈 내용은, 사람을 표현하려면 퍼슨, 소프트웨어를 표현하고 싶으면 소프트애플리케이션같이 표현합니다. 

앞에 보여드린 예는 사람을 표현하기 위해 퍼슨이라는 개체를 만드는 과정입니다.

아이디에는 이 사람을 나타내는 고유 주소를 적고요.

모든 개체가 애드 제이슨이라는 소스를 실행하면 아래와 같이 제이슨으로 표현된 사람을 보실 수 있습니다.

그리고 학생의 행동을 나타내기 위한 동사를 나타내보겠습니다. 

각각의 액션은 Caliper 표준문서에 준비돼 있습니다. 

여기에서는 로그를 1을 선택했습니다.

xAPI에서도 동사 부분을 개체로 표현하는 것과 다르게 Caliper에서는 하나의 문장으로 표현합니다.

그리고 옵저버 역할을 실행하겠습니다.

아이디 속성에는 이 시스템을 구분할 수 있는 내용을 적고 이 프로그램을 좀 더 구체적으로 설명할 수 있도록 메인이라는 속성에 프로그램 이름을 붙여 개체를 만듭니다. 

이번에도 애드 제이슨 함수로 제이슨으로 표현할 수 있습니다. 앞에서 만든 거로 로그인 이벤트를 만들겠습니다. 

Caliper에서 로그인이나 로그아웃을 표현하기 위해 세 션 이벤트를 만들고, 주어, 동사, 목적어를 앞처럼 만들어줍니다.

그리고 필수요소 이벤트 타임 속성을 채웁니다. 

이벤트 타임 속성은 이벤트 발생 시간을 나타내는데 시간을 나타내는 ISO860에 따라서 표현해줍니다.

앞에서 만든 세션 이벤트를 제이슨으로 표현하면 화면에 나오는 것과 같이 테스트라는 사람이 러닝 이그잼플이라는 소프트웨어에 2018년 7월 9일에 로그인했음을 표현할 수 있습니다.

앞에서 말씀드렸던 내용을 바탕으로 간단한 예제를 만들어보겠습니다.

저는 FLASK, MongoDB, Caliper를 이용해서 학습 활동 데이터를 분석할 수 있는 간단한 예제를 만들겠습니다.

MongoDB를 이용하는 방법에는 여러 가지가 있겠습니다만 이번 예제는 파이몽고를 이용하겠습니다.

제가 회사 밖에서 가장 많이 받는 질문 중 하나는 RDB, 즉 광대역데이터베이스 저장하고 분석해도 되지 않냐, 답변을 드리자면 앞에서 말씀드린 것처럼 데이터베이스는 구현하는 사람의 몫인데요.

그래서 RDB에 넣고 분석해도 상관없습니다.

하지만 제가 느끼기에는 요구사항이 바뀔 때마다 데이터가 변하는 경우가 많았습니다.

그래서 데이터 흐름이나 속성이 끊임없이 변화하는데요.

이러한 상황에 유연하게 대처하기 위해서 이번 예제에서는 데이터 저장에 MongoDB를 사용했습니다.

먼저 파이몽고를 통한 MongoDB를 보겠습니다.

MongoDB에서 컬렉션은 관계DB의 테이블, 도큐먼트는.

저는 에러리스라는 데이터베이스에 저장하도록 하겠습니다. 그리고 슬래시 엔드포인트로 하면 수신된 걸 몽고디비에 저장합니다.

그리고 Caliper에서는 데이터를 보낸 센서를 만들어줘야 합니다.

센서 설정은 윗부분에 센서 마크 변수를 참고하시면 됩니다.

여기에 들어갈 내용은 코스트, 인증방법, 인증키입니다.

그리고 센서 컨픽을 바탕으로 아래 있는 것처럼 센서를 생성합니다.

이 과정으로 만들어진 시스템은 다음과 같습니다. 

백 엔드 부분에서는 이벤트를 만들어서 센서에 보내라고 명령합니다. 

센서에서는 엔드 포인트의 코스트 방식으로 메시지를 전송하고 엔드 포인트는 실시간 데이터를 MongoDB에 저장하는 기능을 수행합니다.

먼저 로그인과 로그아웃 이벤트를 생성해보겠습니다.

로그인과 로그아웃 이벤트는 Caliper의 세션 이벤트로 만들어줍니다. 

주어는 사용자를 나타내는 퍼슨, 동사 부분인 액션은 상황에 따라 로그인 로그아웃을 나타내는 액션을 채워줍니다. 

그리고 오브젝트에는 제가 만든 프로그램을 나타내는 소프트웨어 애플리케이션 개체를 넣어줍니다.

이벤트 발생시점인 이벤트 타임 속성도 적어 줍니다. 

그리고 추가로 학생이 속한 반을 나타내기 위해 그룹 속성에 내용을 채워줍니다.

그러면 어떠한 그룹에 속한 특정 사용자가 언제 이 프로그램에 로그인, 로그아웃을 했음을 표현할 수 있게 됩니다. 그리고 마지막 줄과 같이 센서에서 이벤트를 송출하게 됩니다.

그리고 앞에서 만든 코드를 여러분이 원하는 부분에 삽입하면 됩니다.

실제 학습 활동에서는 로그인 버튼을 클릭하거나 로그아웃을 웹에서 클릭할 때 이벤트를 생성하고 전송합니다.

그다음으로는 읽기자료로 이동하는 걸 생각해보겠습니다.

사용자가 지정한 웹페이지로 언제 이동했다는 걸 표현하게 됩니다. 

이번에도 역시 센서에게 생성한 이벤트를 전송하도록 합니다.

이 코드를 원하는 곳에 붙이면 특정 페이지 이동할 때 이벤트가 만들어지고 엔드포인트로 전송이 됩니다.

실제 학습 활동에서는 메뉴에서 독서 부분을 클릭하여 페이지를 이용할 때 이벤트를 만들고 전송합니다. 

이벤트 전송이 끝나면 화면과 같이 읽기자료 페이지로 이동하게 됩니다.

이번에는 읽기자료에 태그를 다는 경우를 생각해보겠습니다. 

학생이 생성한 태그로 로테이션이라는 개체를 생성하고 언어 페이지에 넣어줍니다. 

지금까지 보신 것과 차이점은 제너레이티라는 속성이 있는데 이 속성에는 생성한 태그를 달아주는 특성이 있습니다. 

이렇게 하면 특정 사용자가 어떤 웹페이지에 특정한 시간에 어떤 태그를 달았다는 걸 표현할 수 있게 됩니다.

이제 학생이 입력한 태그를 받아서 이벤트를 생성하는 코드를 화면과 같이 넣어줍니다.

실제 학습활동에서는 페이지에 원하는 태그를 달고 애드 태그 버튼을 클릭합니다.

그러면 이벤트를 생성하고 전송합니다.

이벤트 전송이 끝나면 학생에게는 학생이 넣은 태그를 보여주게 됩니다.

이번에는 평가 시간을 표현하기 위해서 어시스먼트 이벤트를 만들어보도록 하겠습니다.

여기서는 사용자가 특정한 시험을 어떤 시간에 시작했음을 표현할 수 있습니다.

그리고 앞에서 만든 코드를 실행한 함수를 원하는 부분에 붙여줍니다.

실제 학습 활동에서는 메뉴에서 평가 부분을 클릭해서 이동할 때 이벤트가 발생합니다.

이벤트가 전송되고 나면 평가 페이지로 이동하게 됩니다.

그리고 시험을 다 풀고 제출할 때는 두 개의 포인트를 동시에 생성해보겠습니다.

첫 번째는 평가가 끝났음을 의미하기 위해서 어시스먼트 이벤트를 생성하고 그다음으로는 채점 결과가 나왔음을 나타내는 그레이드 이벤트를 생성하겠습니다.

액션은 서브미치드라고 표현한다는 점을 제외하면 앞에서 평가 시간을 나타내기 위한 것과는 차이가 없습니다.

채점 결과를 나타내는 그레이드 이벤트는 특정 사용자가 이번 시험을 몇 번째로 시도하는지를 목적으로 사용합니다.

그리고 제너레이티드 속성에는 시험 결과로 나오는 점수를 넣어줍니다. 

그러면 어떤 유저가 어떤 시험에 몇 번째 시도해서 몇 점을 받았다는 것을 표현할 수 있게 됩니다.

여러 이벤트를 한 번에 전송하고 싶을 때는 맨 아랫줄에 있는 내용과 같이 리스트에 생성한 내용을 넣어서 전송하면 됩니다.

그리고 앞에서 만든 함수를 실행하는 코드를 원하는 곳에 넣어줍니다.

학습 활동에서는 문제 보기를 선택하고 제출 버튼을 클릭하면 이벤트를 생성하고 전송하게 됩니다. 

데이터 생성과 전송이 끝나면 학생은 다음과 같이 정답인지 오답인지를 확인할 수 있게 됩니다.

실제로 데이터가 어떻게 쌓이고 있는지를 확인하려면 MongoDB 클라이언트를 이용하거나 GI기반의 클라이언트를 이용하면 되는데요.

구현한 부분을 돌아보면 왼쪽 사진과 같이 데이터가 쌓인 것을 볼 수 있고 이 이벤트 중 하나를 펼쳐보면 오른쪽과 같이 주어, 동사, 목적어와 같은 이벤트가 들어와있는 것을 보실 수 있습니다.

마지막으로는 MongoDB에 저장된 학습 데이터를 간단히 분석해보겠습니다. 먼저 저는 오늘의 타임라인을 구성하는데요.

특정한 날짜를 기준으로 누가 무엇을 언제 어떻게 했느냐를 표현하려고 합니다. 

시각화에는 오래 걸릴 거 같아서 일단 리스트로 나열하는 식으로 표현해보겠습니다.

이를 위해서 타임몽고를 이용해서 쿼리를 해보려고 하는데요. 

학생의 이름과 기본적으로 도큐먼트에 붙어있는 오브젝트 아이디를 이용하면 이 도큐먼트의 생성일자를 가져올 수 있게 되는데요.

이를 이용해서 1일치 데이터를 가져보겠습니다.

우리는 사용자 이름, 어디에 어떤 행동을 했는지, 그리고 이벤트 발생 시간 이 4가지를 가져오도록 하겠습니다. 그리고 쿼리 결과를 리스트로 만들어보려고 하는데요.

이벤트가 발생한 시간은 문자열로 돼 있기 때문에 이걸 데이터타입 개체로 바꿔줍니다.

그리고 Caliper에서 지원하는 시간대는 한국 표준시간으로 바꿔줍니다.

화면에 보시는 것과 같이 하루 타임라인을 보실 수 있습니다. 

앞에서 구현했던 로그인, 읽기자료로 이동한 거, 태그를 단 거 평가 시간, 제출, 성적이 나오는 것, 이걸 타임라인으로 표시할 수 있게 됩니다.

두 번째로 해볼 것은 하나의 시험에 대해 나의 성적과 전체 집단의 평균 점수를 비교하는 작업을 해보려고 하는데요.

먼저 제 성적을 구하기 위해서 성적이 나오면 발생하는 그레이드 이벤트를 기준으로 해서 사용자의 이름을 넣고 그다음에 시험에 대한 아이디, 속성으로 문서를 찾고 제가 받은 점수를 의미하는 스코어 기븐이라는 속성을 가져옵니다. 

그래서 저의 성적을 구할 수 있게 되죠.

이번에는 같은 시험을 응시한 평균 점수를 하겠습니다.

먼저 다른 매치 부분에 도큐먼트를 구하기 위한 조건을 여기에는 그레이드 이벤트와 응시한 주소를 적어 줍니다. 그리고 평균 점수를 내기 위해서 달러그룹 부분을 채워주는데요.

이번에는 도큐먼트에서 각 학생 선수들이 받은 스코어를 가지고 평균 점수를 내줍니다.

파이몽고에서는 어그리먼트 시험 결과가 허수개체로 전달되는데요.

이를 리스트로 변화를 해줘야 가져올 수 있습니다. 

변환이 끝나면 세 번째 요소에서 값을 가져옵니다.

앞에서 구한 값으로 저의 점수 그리고 평균 점수를, 같은 시험을 쳤던 그룹의 평균 점수를 이용해서 같은 시험을 응시한 사람과 비교할 수 있는 그래프를 만들 수 있습니다. 

그리고 그래프를 만드는 부분은 발표 자료에서 그래프 부분을 클릭하시면 해당 부분으로 이동할 수 있게 만들었는데요.

이를 참고하시면 될 것 같습니다.

제가 준비한 내용은 여기까지인데 제가 생각한 것보다 좀 짧게 끝난 것 같은데.

먼저 질문을 먼저 받겠습니다.
