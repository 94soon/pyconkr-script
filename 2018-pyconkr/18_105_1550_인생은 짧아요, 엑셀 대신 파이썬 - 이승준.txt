https://www.youtube.com/watch?v=w7Q_eKN5r-I

인생은 짧아요, 엑셀 대신 파이썬.

도발적인 제목을 가지고 이야기를 할 이승준이라고 합니다.

반갑습니다.

오늘 이야기는 크게 어려운 이야기들은 아니고요.

파이썬을 가지고 특히 여러분들 느끼시는 분들 많으실 겁니다.

엑셀 노가다라는 거를 는 어떻게 자동화할 수 있는지 업무를 자동화하고 더 나아가서 금융권에 화두 이슈가 있는데 알피이 로봇 프로세스 자동화.

로봇이라는 말이 들어가서 오해의 소지가 있는데 이러한 이야기들.

엑셀 자동화를 넘어가서 업무 자동화, 뿐만 아니라 영역까지 타진을 해보고 가능성을 이야기해보려고 합니다.

본격적으로 이야기를 하기 전에 무관한 이야기를 하나 해보려고 합니다.

이런 포스팅이 올라온 겁니다.

엑셀에서 짝수 행들만 추출하거나 이런 거를 할 수 있느냐 이런 기능이 있느냐 이런 건데 여러분들 생각해 보시죠 엑셀 거의 다 써보셨을 거고 이거를 하기 위해서 어떻게 할까? 굉장히 친절하고 성실한 답변들 대답들이 많이 나왔고 권고들이 많습니다.

스크립트를 써보세요 코딩도 할 수 있다던데? 코드를 010 이렇게 넣은 다음에 필터링을 해서 로드를 날리면 짝수 남길 수 있지 않을까 대략 이런 얘기입니다.

엑셀을 저도 자주 쓰지만 간단한 이야기는 아닌 것 같습니다.

이 이야기를 파이썬 풀어볼게요.

짝수행만 남기게 할게요 이거는 세 줄로 해결됩니다.

데이터 :: 으로 시작하는 프롬 투 짝수 행들만 추출이 되는 거고 그렇게 추출된 데이터들을 투 엑셀에서 저장하면 끝.

이게 두 줄만의 코드로 이런 로직이 실행이 됐다는 것도 이의가 있지만 더 큰 이의는 이 코드가 엑셀 설치가 되어 있지 않은.

혹은 리눅스 같은 경우에서도 잘 돌아가느냐.

엑셀을 별도로 띄우고 있는 작업이 아니기 때문에 굉장히 빠르게 작업이 돼요.

2초도 안 걸려서 바로 수행이 됩니다.

오늘 제가 말씀드리고자 하는 내용은 이런 내용입니다.

엑셀을 코딩을 통해서 대체를 하고 자동화했을 때 이점.

얼마나 드라마틱한지.

단 몇 줄의 코드로 이런 것들을 작업 할 수 있는지.

얼마나 대체할 수 있는지 이런 이야기들을 주로 할 거고요.

결론부터 말씀드리면 거의 가능합니다.

끝나고 나서 아마 엑셀.

업무에 대한 조금씩 접해보시면 목적을 달 성하도록 하는 강연이 될 것 같습니다.

홀수 행 너무 너무 간단합니다.

제가 10년 조금 안 되는 기간 공부했습니다만 바로 옆 부서에 이런 일들이 흔히 있습니다.

특정 부서 팀에 매일매일 하는 일이 있습니다.

아침에 출근하자마자 브라우저를 띄우고 거래소 페이지 엑셀 다운로드하거나 연관된 수집해서 짜깁기 하고 카피도 하고 다시 엑셀로 정리하고 파일 관리자들에게 이메일로 발송하는 일을 거의 매일 합니다.

매일매일 시장의 동향을 알고 가격들을 생기기 때문에 매일매일 할 수밖에 없는 일인 것 같아요.

이런 작업을 하는데 40분에서 50분 정도 시간이 걸립니다.

되게 단순한 일이에요.

창의적인 일 이런 게 아니고요.

되게 단순한 일인데 이거를 매일매일 40분, 50분씩 소요를 한다는 것.

개인적인 입장에서도 굉장히 큰 손실이 아닐 수 없습니다.

이거를 극복하기 위해서 도전을 해봅니다.

오늘의 주제는 이거입니다.

티셔츠에 써 있는 말 이 말을 조금 더 확장해서 인생은 짧아요, 파이썬 쓰세요 오늘 제가 드리고자 하는 메시지고요.

라이브러리 굉장히 종류가 많습니다.

생각보다.

설치된 엑셀이 필요하거나 아니거나 혹은 어떤 부분에서 조금 더 정리를 해보면 오픈엑셀 같은 경우에는 엑셀 파일 설치 없이 한다는 얘기입니다.

여기 있는 건 다 무료입니다.

주는 매크로를 파이썬으로 대체한 이런 용도로 주로 사용됩니다.

매크로 자동화 이런 의미로 사용되고요.

서버사이드에서 사용하는.

각기 장단점이 있지만 살펴보도록 하겠습니다.

엑셀로 작업했던 거 생각해 보시고 저 작업을 내가 엑셀로 어떻게 어떻게 처리했더라라는 걸 생각해 보시면 훨씬 더 와닿을 것 같습니다.

데이터를 준비를 합니다.

오픈마이엑셀 라이브러리에서 파일을 제대로 읽어낼 수 있고요.

옆에 보이기가 왼쪽에 보이는 화면을 중간에 엑셀로 확인만 한 거예요.

왼쪽에 엑셀로 보이는 거는 실제로 엑셀을 띄우지 않은 상태예요.

코드만 돌아가는 상태인데 여러분들의 확인을 위해서 보여드리는 거예요.

엑셀을 띄울 필요가 없습니다.

셀에 접근하는 것을 보시죠 각 시트에서 A2, B1.

콜롬과 로그를 지정하면 그대로 사용하고 있죠.

굉장히 어려워 보이지는 않습니다.

이런 방법을 쓸 수 있지만 코딩을 할 때는 레이지 같은 이런 게 많이 쓰기 때문에 로컬.

숫자로 인덱싱을 하는 이런 경우도 훨씬 많습니다.

크게 어려워 보이는 걸 별로 없네요.

엑셀 쓰다 보면 하나의 이름을 부여해서 접근을 하는 건데 이런 게 가능하나? 예.

이렇게 지정을 하면 이거 하나의 개체로 가르킬 수 있게 할 수 있고 개별 엑세스 해서 처리할 수 있습니다.

엑셀 레인지 전체 한꺼번은 아니고 로 단위냐 이런 점은 있지만 엑셀을 쓸 때 특정 영역을 커버하는 그런 것도 간단히 구현이 가능합니다.

간단히 살펴봤고 이런 작업들 많이 하시죠.

두 개 엑셀 파일 병합하는.

그런 예를 보겠습니다.

이 데이터는 삼성전자 LG전자 광고비 지출 내역입니다.

그래서 두 엑셀 파일이 준비가 되어 있고요.

두 파일을 합치면 예를 하나 들어보면 이 파일과, 이 파일이 준비가 되어 있는데 각각 보면 날짜 이렇게 각 회사에 대한 내용이 있고 각 콜롬이 있는데 확인해 보시고 각 회사들 토털 값을 합쳐서 이 셀에 넣고 싶어요.

이 작업을 아예 엑셀 라이브러리 쓰지 않고 데이터 분석할 때 굉장히 많이 사용하는 파이썬 판다스를 가지고 진행을 해보겠습니다.

파이썬 판다스를 삼성전자 파일 엑셀파일을 인덱스를 부여를 합니다.

날짜를 부여했습니다.

왼쪽에 날짜 있죠.

그다음에 엘지전자 똑같은 형태로 있고 인덱스 날짜를 부여했습니다.

이 두 개를 합쳐서 하나의 엑셀을 만든다.

너무 간단합니다.

빈 데이트 그래서 토털 클론을 이 클론했어요.

투 엑셀에서 저장만 하시면 됩니다.

보시면 이런 거를 좀 캐치하면 좋겠습니다.

엑셀을 띄워서 뭔가 작업하는 게 아니라 코드로 해 놓은 상태예요.

속도가 굉장히 빠르게 진행이 되지만 실제로 엑셀에서 요구됐던 엑셀에서 기능들이 어떤 게 있나 캐치를 하면서 보시면 좋을 것 같습니다.

파이썬에서 예를 들면 이런 작업들을 많이 하시죠.

1년 치인데 여기에 넣고 싶습니다.

파이썬으로 코딩을 하기 때문에 파이썬 코드를 짜서 B2부터 B13까지 SUM B14 저장을 했습니다.

엑셀에서 하는 거를 여기에서 어떻게 했냐.

중간에 이런 계산을 할 때 필요하다면 코드로 계산도 가능하네요.

그러면 원래 엑셀 SUM 함수들이 있지 않습니까? 이런 거 쓸 수 있나요? 네, 쓸 수 있습니다.

셀 자체에다가 엑셀 수식이죠 SUM.

어디에서 부터 어디까지.

수식 자체를 그대로 넣고 쓸 수 있습니다.

그런 것도 되네? 그러면 이전에 갖고 있는 복잡한 엑셀 수식들도 재활용이 가능하겠네요.

그렇죠?

제 경험상으로도 그렇지만 파이썬 판다스를 가지고 엑셀을 볼 때 막히거나 문제가 모양을 예쁘게 꾸미는 거 이런 거 관련한 부분들이 해결하기가 조금 어려운데 그런 거를 오픈파일엑셀 이거를 활용하면 문제를 거의 다 해결할 수 있습니다.

코드를 잠깐 설명드리겠습니다.

제일 왼쪽 아래에 보면 합계에 글자가 확대가 되어 있고 색깔이 다릅니다.

특정 코디네이션 스타일을 지정하는 객체들이 있습니다.

얼라이먼트.

맞춤.

테두리 보더.

그다음에 필 하는 거.

셀 색상 지정.

보통 네 가지죠.

특정 셀 폰트 얼라이먼트 보드 필.

이렇게 서식을 부여하는 게 가능합니다.

서식을 쓰는 게 코드가 길어 보이기는 하네요.

조금 복잡하기는 합니다.

일반적으로 저희가 설정을 해놓으면 만들어놓는 거를 계속 재사용하게 돼요.

저 뿐만 아니라 팀원들이 같이 하는 거기 때문에 사실은 처음에 만들 때만 약간 수고스럽지 나중에는 문제가 되지 않습니다.

이렇게 해서 레인지를 정하는 방법이 있죠.

이런 것도 가능합니다.

그러면 레인지에다가 넘버에 소수점 이하 두 자리만 출력하도록 해 이런 거 굉장히 많이 하시죠.

전체 레인지에 출력하는 포맷을 소수점 이하 두 자리로 일률적으로 맞추는 겁니다.

엑셀을 코드로 다 되는데 손으로 하는 작업을 코드로 진행을 하고 있습니다.

이것만 되느냐? 또 있습니다.

케이블 TV 광고 하는 것 같아요.

또 있습니다.

또 있습니다.

앞으로 제가 계속 그럴 것 같은데요.

데이터 두 개가 있고요.

바차트 형성을 하고 이 데이터와 이 데이터 참조 데이터 참조를 만들고 이거를 추가하고 차트에 추가하고요.

똑같이 이 콜롬도 차트에 추가하고 이 차트를 E1 이 차트가를 실제로 그려집니다.

이 과정은 엑셀이 뜬 상태에서 하는 게 아니고 코드가 안 보이는 상태에서 중간중간 결과를 제가 확인만 위해서 옆에다 보여드리는 것뿐입니다.

실제로는 보이지 않고 최종 결과만 엑셀 파일로 나옵니다.

물론 이 파일로 엑셀을 열면 이 형태로 나오는 거죠.

차트 수식 거의 다 되네요.

이것도 아니고도 엑셀에 대해서 할 얘기가 너무 많지만 95% 이상 엑셀을 쓰는 이유를 몇 가지를 축약해 보면 이 세 가지로 감히 축약할 수 있을 것 같습니다.

필터링과 소트.

공감되시나요?

VLOOKUP 이거를 해결하는 문제가 너무 많죠.

피벗 테이블 엑셀의 꽃입니다.

이 내용들을 어떻게 할 수 있는지 이런 거를 해볼게요.

필터링과 소트는 클롬 기준으로 이런 작업을 하는 데 많이 사용을 하고요.

VLOOKUP 코드라든가 같은 조건에 있는 거를 데이터를 옮겨올 때 이럴 때 주로 많이 사용하죠 피벗 테이블 정리하거나 이럴 때 주로 많이 사용합니다.

파이썬 판다스를 가지고 어떻게 할 것이냐 살펴보겠습니다.

이번에 준비한 데이터는 종목코드와 PER, PBR 주식 투자 관련한 데이터를 가지고 왔는데요.

개별 종목에 대한 수익.

이런 항목들 비율 데이터들이 엑셀로 준비가 되어 있고 오른쪽에는 진행되고 있는 겁니다.

두 개로 나눠서 왼쪽에는 엑셀 오른쪽에는 파이썬 코드로 진행 이렇게 보면 되겠습니다.

필터 소스가 있죠.

이런 모양이 붙습니다.

특정 필터링 하는 조건을 설정하고 필터링의 해당하는 것만 보여지죠.

13개의 데이터가 있었는데 글자가 너무 작습니다만 10배 이하인 것만 했습니다.

앞에 잠깐 볼까요? 13개 종목 중에 퍼가 10보다 작거나 같음 10배 이하인 것만.

5개가 추출이 됐고요.

이거를 파이썬 코드로 만약에 옮긴다면 용어에는 너무 구애받으실 필요는 전혀 없고요.

DF 팩터 PER 10보다 작거나 같음 전체에서 이거에 해당하는 것만 추출하는 겁니다.

동일한 결과가 나오죠.

이런 상상을 해보시면 엑셀에서 할 때는 마우스를 메뉴를 선택해서 찍고 값을 설정하고 이런 작업들을 쭉 해나갑니다.

그래서 파이썬 코드에서는 너무 간단해요 한 줄 기술을 합니다.

필터링 하고 정렬 하는 거를 소트 하는 거를 같이 하죠

퍼 필터링을 한번 하고 엑셀 작업이고 파이썬에서는 그렇게 안 합니다.

배당수익률 가지고 어센딩 큰 애들이 이쪽에 나옵니다.

PER가 10보다 같거나 작고 이런 로직을 쓸 수가 있죠.

이런 어떤 종목 선택에 대한 얘기는 아니고 이런 거를 가지고 할 때 이렇게 표현을 해서 엑셀에서 했던 작업들을 기껏해야 한두 줄로 해서 할 수 있다는 거를 말씀드리는 겁니다.

브이루컵 얘네들 기준으로 한쪽에 있는 데이터를 이쪽으로 옮겨올 때.

이 종목에만 관심이 있어요.

데이터는 이렇게 주어져 있습니다.

관심 있는 종목에 대한 PER, PBR, 배당수익률 이거를 여기에다 옮겨놓고 싶어요.

이것과 이것과 같은 코드가 있는 FALSE 세 번째 A2, 이 셀에에 대해서 전체 중에 세 번째 1, 2, 3.

이거죠.

지금 이 셀 있죠.

이 셀의 내용 이 빨간 테두리 내용입니다.

이 내용들이 셀마다 다 들어있는 거죠.

이 내용을 파이썬으로 구현한다고 그러면 이게 가능한 거는 두 개의 데이터 콜롬 종목 인덱스가 걸려 있어요.

인덱스 끼리 같은 종목 코드 끼리 매칭이 되기 때문에 콜롬을 이렇게 복사 연상하는 것으로 그대로 실현할 수 있습니다.

굉장히 심플하죠.

서식을 넣고 저장하는 방법.

와이터에서 세이브 이 사이에 다양한 서식들.

이 콜롬에 대한 테두리, 색상들 포매팅을 해서 세이브.

이렇게 서식을 지정하는 것도 가능합니다.

피벗.

엑셀의 하이라이트라고 할 수 있죠.

이렇게 많은 데이터를 이런 형태로 간략하게 진행하는 것.

여기에서 쓰는 거는 데이터와 네임, 토털 이렇게 3개 사용했는데 이렇게 피벗으로 정리를 했는데요.

이거를 동일하게 파이썬 피벗테이블이라는 게 있습니다.

토털 밸류로 쓰고 이거는 인덱스로 사용하고 컬럼은 네임 회사 이름.

종목 이름.

값과 인덱스와 컬럼으로 지정을 해주는 겁니다.

이렇게 피벗테이블을 얻었습니다.

이렇게 마우스로 했던 작업들을 굉장히 간단하게 처리를 하네요.

그렇죠?

이런 레인지.

특정 날짜 이런 복잡한 수식들.

어렵지 않은 가능합니다.

시간상 빠르게 진행하겠습니다.

시간상.

파이썬 판다스를 코드로 다루는 엑셀로 말씀드릴 수 있을 것 같아요.

차트를 넣는 것도 파이썬 판다스 가지고 다 가능합니다.

지금 보는 이 엑셀 파일은 엑셀로 형성한 게 아니고 파이썬 판다스로 제네레이션한 엑셀 파일입니다.

더군다나 엑셀에서 가지지 못한 까다로운 작업도 가능하고 속도도 파이썬판다스가 훨씬 빠릅니다.

엑셀을 자동화 하는 거에 포커스를 두었지만 파이썬 판다스를 데스트탑에 데이터 허브라고 할 수 있습니다.

파이썬 판다스 써보신 분들은 대부분 느끼실 수 있을 것 같은데 PD 읽거나 데이터를 가져오거나 글로벌 사이트에서 라이브러리 데이터를 모으거나.

이렇게 데이터를 가져오면 가져온 데이터를 엑셀로 다시 저장하거나 리포팅 하는 데 사용하거나 라이브러리 통해서 메일로 나가는 이런 게 가능합니다.

다시 이거를 전산화 할 수도 있고요.

그래서 파이썬 판다스를 엑셀을 대체하는 이런 형태로 말씀을 드리지만 이것뿐만 아니라 조금 더 확장해서 데스크탑 데이터 허브라고 감히 얘기할 수 있을 것 같아요.

여기서 보는 이런 코드들이 딱딱딱 실행이 되면서 브라우저 실행하고 페이지 방문하고 거래소 페이지 상장 목록을 가지고 버튼을 눌러서 상장회사 목록이 담겨 있는 엑셀 파일을 다운로드 받고 특정 데이터를 옮기는 이런 시나리오입니다.

지금 이 시나리오가 이 정도의 코드로 진행이 됩니다.

앞에서 브라우저를 띄우고 자동화에 관련한 거라 내용 자체는 큰 내용은 아닙니다만 페이지를 방문하고 오른쪽 끝에 보시면 이 페이지.

엑셀파일로 다운로드 하는 클릭하고 다운로드 된 파일을 다른 데 옮기거나 이 정도.

조금 더 상세하게 말씀드린 거고요.

이것도 자동화에 관련한 건데 국세청 홈텍스 자동 로그인.

이거는 넘어가고 조금 더 말씀드리겠습니다.

자동화 하는 거는 아마 들어보셨을 겁니다.

그런데 실제로 저희가 회사에서 다루는 회사 내 단말이라든가 특히 이런 경우에 기업은행 첫 페이지입니다.

인증서 로그인 하는 컨트롤이 나왔습니다.

여기에서 선택하고 인증서를 선택하고 확인을 누르는 것.

이런 과정은 매크로링으로는 확인이 안 됩니다.

이 부분은 C로 만들어진 웹브라우저랑 전혀 상관 없는 .

그러면 실제로 위치를 찾거나 얘를 클릭하거나 마우스를 움직여 놓고 키보드를 타이핑 하는 거 이거를 어떻게 할까 이미지를 보고 이미지를 매칭해서 위치를 찾아내는 이런 방법을 쓸 수밖에 없습니다.

매칭하는 기능이 아예 있습니다.

이 전체 화면이 전체 이미지고 이 부분이 이 이미지가 전체 중의 있는 위치를 찾아내는 거죠.

오른쪽에 보는 이 이미지를 여기서 찾아냅니다.

처음에 브라우저에서 띄우고 로그인을 하면 이쪽에 로그인 버튼을 누르면 아까 인증서 로그인 하는 창이 뜹니다.

이 창이 코드로 되어 있는 거죠.

비밀번호를 넣는 위치를 찾는데 오픈CV를 가지고 로그인을 합니다.

이 라이브러리를 찾아서 인증을 하고 인증 된 것까지 확인을 합니다.

업무용 단말이나 이런 데서 이런 내용을 자동화할 수 있는 방법이 있겠네요.

네, 조금 더 복잡한 시나리오인데 네이버에 로그인 해서 쪽지 쓰기까지 이 정도의 코드로 가능합니다.

제가 하는 여러 가지 자동화 중에 주로 장고나 플러스트 같은 쓰는 건데 충분히 활용할 수 있습니다.

왼쪽에 보이는 게 템플린인데 df.to.html 이렇게 표현할 수가 있습니다.

이뿐만이 아니라 이미지도 있죠.

이미지의 표준입니다.

저희가 생성한 차트 있죠.

이거는 페이지 안에 그대로 넣을 수 있습니다.

그대로 생성된 보고서입니다.

굉장히 큰 장점 중 하나가 이렇게 만들어진 보고서를 이메일로 발송을 하거나 pdf 저장하거나 굉장히 쉬워집니다.

이메일도 여기에 첨부해서 보내면 처음에 말씀드렸던 김대리 시나리오.

매일매일 하던 것을 자동화를 시킬 수 있습니다.

몇 줄 안 되는 코드 이런 게 가능합니다.

간단하게 소개해드리겠습니다.

실제로는 테스2 자동화를 위한 프레임워크 업무 자동화 활용할 수 있습니다.

실제로 쓰여진 코드를 볼게요.

많은 활성 라이브러리 들이 있습니다.

테스트케이스라는 말이 나오는데 자동화라서 그렇습니다.

특정 버튼을 클릭하고 상장회사 목록을 다운로드 하는 것입니다.

이름을 바꿔주고 이런 작업을 파이썬 코드가 있네요.

간단히 소개해드리는 겹니다.

자동화를 위한 파이썬 오픈소스들을 쭉 정리해 봤습니다.

간단간단하게 설명해드렸고요.

rpa 도입하거나 현재 도입을 검토하고 있습니다.

간단하게 말씀드리면 이전에 사람이 했던 작업들이 있습니다.

pc를 가지고 단말기 옆에 앉아서 수집하고 정리해서 저장하고 이런 작업들을 단순 반복 작업들을 기계를 써서 자동화시키는 데이터를 수집하는 것.

사람들이 개입을 해서 같이 해야 하는 경우도 있습니다.

고객과 전화를 한다거나 이런 걸 기계가 할 수 있는 일은 아니죠.

pc를 가지고 자동화 하는 작업.

이게 rpa 입니다.

휴머노이드 로봇.

소프트웨어.

사람이 하던 작업.

사람pc 앞에서 하던 단순 반복 작업을 자동화 시키는 솔루션입니다.

인공지능 알아서 척척 수행한다.

예를 보면 전 직장이라서 썼습니다.

k 증권.

여러분이 간단하게 스마트폰을 가지고 계좌 개설을 할 수 있도록 되어 있죠.

본인 확인을 위해서 신분증 확인을 이 작업을 사람이 합니다.

여러분이 사진을 찍어서 신분증을 보내면 이 신분증이 가짜인지 진짜인지 사람이 확인을 합니다.

이런 부분이 rpa의 목적입니다.

테스트 자동화를 위한 오픈소스 기능이 거의 동일합니다.

이런 훌륭한 솔루션도 있지만 대부분 기능들을 보면 찾아볼 수 있는 내용들입니다.

그러면 rpa만 고유 기능은 없냐? 자동화 이런 내용들을 주로 갖고 있습니다.

rpa를 쓰면 스크립트 자동 생성 된다고 하는데 코딩 필요 없나? 그렇지는 않습니다.

처음부터 코딩 하는 거랑 rpa 쓰는 거랑 차이가 크지 않을 수 있겠네요? 네.

자동화하는 데는 rpa가 크게 발휘할 수 있지만 규모가 작거나 파이썬 코드를 쓰시는 게 오히려 더 나을 수도 있습니다.

자동화 그러면 전유물 이렇게 인식을 하고 있는데 조금 바꿔야 할 필요가 있습니다.

그래서 가장 베스트는 코딩을 할 수 있다면 더 효과를 볼 수 있습니다.

그다음에 코딩 하면 강력한 도구가 있죠 카피 앤 페이스트.

그다음에 지금 하는 일도 많은데 내가 코딩을 배워서 적용하는 이런 것까지 해야 하느냐.

이런 불편이 있을 수 있는데 전체 시간을 놓고 보면 오히려 투자를 하는 게 훨씬 더 시간이 세이브가 됩니다.

개인 레벨하고 팀 단위, 전사 업무까지 나눠서 생각해볼 수 있을 것 같습니다.

기계가 잘하는 일과 사람이 잘하는 일은 분명히 다릅니다.

단순하고 반복적이고 이런 일은 기계가 잘하지만 좀더 창의적이고 협업을 해야 하고 이런 일들은 사람이 훨씬 더 잘하죠.

마무리를 좀 짓겠습니다.

제가 두세 줄짜리 코드를 보여드렸는데 이런 일을 통해서 작은 일들을 자동화 할 수 있고 자동화 함으로써 업무 방식 자체도 개선이 일어납니다.

저희가 자동화에서 피드백을 받기 때문에.

여기까지

마무리 하라고 하겠습니다.

제가 준비한 강연은 여기까지입니다.

감사합니다.

-발표진행해 주신 이승준 님께 감사의 박수 다시 한 번 부탁드립니다.

